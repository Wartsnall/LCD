
LCD_Display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000009fc  00800200  00001cd8  00001d6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000019e  00800bfc  00800bfc  00002768  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002768  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000388  00000000  00000000  00002798  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004d21  00000000  00000000  00002b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001aeb  00000000  00000000  00007841  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000022ad  00000000  00000000  0000932c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000884  00000000  00000000  0000b5dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b50  00000000  00000000  0000be60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000345a  00000000  00000000  0000c9b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002e8  00000000  00000000  0000fe0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	90 c0       	rjmp	.+288    	; 0x126 <__bad_interrupt>
       6:	00 00       	nop
       8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
       a:	00 00       	nop
       c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
       e:	00 00       	nop
      10:	8a c0       	rjmp	.+276    	; 0x126 <__bad_interrupt>
      12:	00 00       	nop
      14:	88 c0       	rjmp	.+272    	; 0x126 <__bad_interrupt>
      16:	00 00       	nop
      18:	86 c0       	rjmp	.+268    	; 0x126 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
      26:	00 00       	nop
      28:	7e c0       	rjmp	.+252    	; 0x126 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c0       	rjmp	.+240    	; 0x126 <__bad_interrupt>
      36:	00 00       	nop
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	70 c0       	rjmp	.+224    	; 0x126 <__bad_interrupt>
      46:	00 00       	nop
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	60 c0       	rjmp	.+192    	; 0x126 <__bad_interrupt>
      66:	00 00       	nop
      68:	5e c0       	rjmp	.+188    	; 0x126 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	58 c0       	rjmp	.+176    	; 0x126 <__bad_interrupt>
      76:	00 00       	nop
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	52 c0       	rjmp	.+164    	; 0x126 <__bad_interrupt>
      82:	00 00       	nop
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4a c0       	rjmp	.+148    	; 0x126 <__bad_interrupt>
      92:	00 00       	nop
      94:	48 c0       	rjmp	.+144    	; 0x126 <__bad_interrupt>
      96:	00 00       	nop
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3e c0       	rjmp	.+124    	; 0x126 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	34 c0       	rjmp	.+104    	; 0x126 <__bad_interrupt>
      be:	00 00       	nop
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2c c0       	rjmp	.+88     	; 0x126 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2a c0       	rjmp	.+84     	; 0x126 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	26 c0       	rjmp	.+76     	; 0x126 <__bad_interrupt>
      da:	00 00       	nop
      dc:	24 c0       	rjmp	.+72     	; 0x126 <__bad_interrupt>
      de:	00 00       	nop
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	1b e0       	ldi	r17, 0x0B	; 11
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 ed       	ldi	r30, 0xD8	; 216
      fc:	fc e1       	ldi	r31, 0x1C	; 28
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ac 3f       	cpi	r26, 0xFC	; 252
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	2d e0       	ldi	r18, 0x0D	; 13
     110:	ac ef       	ldi	r26, 0xFC	; 252
     112:	bb e0       	ldi	r27, 0x0B	; 11
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 39       	cpi	r26, 0x9A	; 154
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <main>
     122:	0c 94 6a 0e 	jmp	0x1cd4	; 0x1cd4 <_exit>

00000126 <__bad_interrupt>:
     126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <gfgetfh>:
   {
   #ifdef GVIRTUAL_FONTS_DYN
   if (gvf_open(fp))
      return SYSFONT.symheight;  /* NULL pointer or a named font, and open failed, use default height */
   #else
   if (fp == NULL)
     128:	00 97       	sbiw	r24, 0x00	; 0
     12a:	19 f4       	brne	.+6      	; 0x132 <gfgetfh+0xa>
      return SYSFONT.symheight;  /* default height */
     12c:	80 91 2a 02 	lds	r24, 0x022A
     130:	08 95       	ret
   #endif
   return gi_fsymh(fp);
     132:	fc 01       	movw	r30, r24
     134:	81 81       	ldd	r24, Z+1	; 0x01
   }
     136:	08 95       	ret

00000138 <gi_process_newline>:
      cposy -= GDISPCH;
   }
#endif

SGUCHAR gi_process_newline(GYT lnsp)
   {
     138:	ef 92       	push	r14
     13a:	ff 92       	push	r15
     13c:	0f 93       	push	r16
   if (lnsp == 0)
     13e:	81 11       	cpse	r24, r1
     140:	07 c0       	rjmp	.+14     	; 0x150 <gi_process_newline+0x18>
      lnsp = gfgetfh( gcurvp->pfont );
     142:	e0 91 ff 0b 	lds	r30, 0x0BFF
     146:	f0 91 00 0c 	lds	r31, 0x0C00
     14a:	82 85       	ldd	r24, Z+10	; 0x0a
     14c:	93 85       	ldd	r25, Z+11	; 0x0b
     14e:	ec df       	rcall	.-40     	; 0x128 <gfgetfh>
   #endif
      /* Add extra line spacing */
      lnsp += chlny;
   #endif

   if (((SGUINT) cposy+lnsp) <= ((SGUINT)rby))
     150:	e0 91 ff 0b 	lds	r30, 0x0BFF
     154:	f0 91 00 0c 	lds	r31, 0x0C00
     158:	95 81       	ldd	r25, Z+5	; 0x05
     15a:	23 81       	ldd	r18, Z+3	; 0x03
     15c:	69 2f       	mov	r22, r25
     15e:	70 e0       	ldi	r23, 0x00	; 0
     160:	68 0f       	add	r22, r24
     162:	71 1d       	adc	r23, r1
     164:	42 2f       	mov	r20, r18
     166:	50 e0       	ldi	r21, 0x00	; 0
     168:	46 17       	cp	r20, r22
     16a:	57 07       	cpc	r21, r23
     16c:	18 f0       	brcs	.+6      	; 0x174 <gi_process_newline+0x3c>
                     G_IS_VPCLR_RIGHT() ? rbx : cposx, cposy+chlny+1,
                     (SGUINT)(G_IS_INVERSE() ? 0xffff : 0x0000));
            }
         }
      #endif
      cposy += lnsp;    /* Inside vp area, just advance position */
     16e:	89 0f       	add	r24, r25
     170:	85 83       	std	Z+5, r24	; 0x05
     172:	21 c0       	rjmp	.+66     	; 0x1b6 <gi_process_newline+0x7e>
     174:	44 85       	ldd	r20, Z+12	; 0x0c
     176:	55 85       	ldd	r21, Z+13	; 0x0d
     178:	ba 01       	movw	r22, r20
     17a:	77 27       	eor	r23, r23
      }
   else
      {
      #if ( !defined(GHW_NO_LCD_READ_SUPPORT) || defined( GBUFFER ))
      if (G_IS_NOSCROLL())
     17c:	41 ff       	sbrs	r20, 1
     17e:	09 c0       	rjmp	.+18     	; 0x192 <gi_process_newline+0x5a>
         {
         /* No scroll mode enabled for viewport (or hardware does not support read) */
         #ifndef GNOTXTSPACE
         if ( gi_fullheightline || ((cposy+chlny) >= rby))
         #else
         if ( gi_fullheightline || (cposy >= rby))
     180:	30 91 fe 0b 	lds	r19, 0x0BFE
     184:	31 11       	cpse	r19, r1
     186:	1f c0       	rjmp	.+62     	; 0x1c6 <gi_process_newline+0x8e>
     188:	92 17       	cp	r25, r18
     18a:	f8 f4       	brcc	.+62     	; 0x1ca <gi_process_newline+0x92>
         #endif
            return 1;
         /* else Room for a partial line below current line */
         cposy += lnsp; /* Ok that cposy exceeds viewport here to compensate for ancher position */
     18c:	89 0f       	add	r24, r25
     18e:	85 83       	std	Z+5, r24	; 0x05
     190:	12 c0       	rjmp	.+36     	; 0x1b6 <gi_process_newline+0x7e>
      #if ( !defined(GHW_NO_LCD_READ_SUPPORT) || defined( GBUFFER ))
      else
         {
         /* Process scroll modes */
         GYT numlines; /* flag or number of scroll lines */
         if ( gi_fullheightline )
     192:	30 91 fe 0b 	lds	r19, 0x0BFE
     196:	31 11       	cpse	r19, r1
     198:	03 c0       	rjmp	.+6      	; 0x1a0 <gi_process_newline+0x68>
            { /* Scroll so relative line positions are the same */
            numlines = lnsp;
            }
         else
            { /* Scroll so line is aligned with viewport bottom */
            numlines = (GYT)(((SGUINT)cposy+lnsp)- rby);
     19a:	92 1b       	sub	r25, r18
     19c:	89 0f       	add	r24, r25
            cposy = rby;
     19e:	25 83       	std	Z+5, r18	; 0x05
            }

         /* Activate viewport scroll */
         #if (defined(GSOFT_FONTS) || defined(GSYMBOLS) || defined(GGRAPHIC))
         /* Scroll graphic symbols */
         ghw_gscroll(
     1a0:	61 70       	andi	r22, 0x01	; 1
     1a2:	77 27       	eor	r23, r23
     1a4:	ee 24       	eor	r14, r14
     1a6:	ff 24       	eor	r15, r15
     1a8:	e6 1a       	sub	r14, r22
     1aa:	f7 0a       	sbc	r15, r23
     1ac:	08 2f       	mov	r16, r24
     1ae:	42 81       	ldd	r20, Z+2	; 0x02
     1b0:	61 81       	ldd	r22, Z+1	; 0x01
     1b2:	80 81       	ld	r24, Z
     1b4:	55 d7       	rcall	.+3754   	; 0x1060 <ghw_gscroll>
            }
         #endif
         }
      #endif /* defined( GBUFFER ) || !defined(GHW_NO_LCD_READ_SUPPORT) */
      }
   cposx = ltx;
     1b6:	e0 91 ff 0b 	lds	r30, 0x0BFF
     1ba:	f0 91 00 0c 	lds	r31, 0x0C00
     1be:	80 81       	ld	r24, Z
     1c0:	84 83       	std	Z+4, r24	; 0x04
   #ifndef GHW_NO_HDW_FONT
   if (gishwfont())
      gi_xyposalign();
   #endif
   return 0;
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	03 c0       	rjmp	.+6      	; 0x1cc <gi_process_newline+0x94>
         #ifndef GNOTXTSPACE
         if ( gi_fullheightline || ((cposy+chlny) >= rby))
         #else
         if ( gi_fullheightline || (cposy >= rby))
         #endif
            return 1;
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	01 c0       	rjmp	.+2      	; 0x1cc <gi_process_newline+0x94>
     1ca:	81 e0       	ldi	r24, 0x01	; 1
   #ifndef GHW_NO_HDW_FONT
   if (gishwfont())
      gi_xyposalign();
   #endif
   return 0;
   }
     1cc:	0f 91       	pop	r16
     1ce:	ff 90       	pop	r15
     1d0:	ef 90       	pop	r14
     1d2:	08 95       	ret

000001d4 <gi_put_prepare>:

/* Do checks, kill cursor and prepare for viewport relative calculations */
void gi_put_prepare(void)
   {
   gi_datacheck(); /* check internal data for errors */
     1d4:	88 d6       	rcall	.+3344   	; 0xee6 <gi_datacheck>
   glcd_err = 0;   /* Reset HW error flag */
     1d6:	10 92 99 0d 	sts	0x0D99, r1
      {
      #ifdef GVIRTUAL_FONTS_DYN
      if (gvf_open( gcurvp->pfont )) /* Reload font, if needed, ignore if not a dynamic vfont */
         glcd_err = 1;   /* Load failed */
      #endif
      gi_fullheightline = G_IS_PARTIAL_LINE() ? 0 : 1;
     1da:	e0 91 ff 0b 	lds	r30, 0x0BFF
     1de:	f0 91 00 0c 	lds	r31, 0x0C00
     1e2:	85 85       	ldd	r24, Z+13	; 0x0d
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	21 e0       	ldi	r18, 0x01	; 1
     1e8:	82 27       	eor	r24, r18
     1ea:	81 70       	andi	r24, 0x01	; 1
     1ec:	80 93 fe 0b 	sts	0x0BFE, r24
     1f0:	08 95       	ret

000001f2 <gi_put_complete>:
      }
   #endif
   #endif /* GNOCURSOR */

   /* update viewport cursor data */
   if (cposx > rbx) cposx = rbx;
     1f2:	e0 91 ff 0b 	lds	r30, 0x0BFF
     1f6:	f0 91 00 0c 	lds	r31, 0x0C00
     1fa:	82 81       	ldd	r24, Z+2	; 0x02
     1fc:	94 81       	ldd	r25, Z+4	; 0x04
     1fe:	89 17       	cp	r24, r25
     200:	08 f4       	brcc	.+2      	; 0x204 <gi_put_complete+0x12>
     202:	84 83       	std	Z+4, r24	; 0x04
   if (cposy > rby) cposy = rby;
     204:	83 81       	ldd	r24, Z+3	; 0x03
     206:	95 81       	ldd	r25, Z+5	; 0x05
     208:	89 17       	cp	r24, r25
     20a:	08 f4       	brcc	.+2      	; 0x20e <gi_put_complete+0x1c>
     20c:	85 83       	std	Z+5, r24	; 0x05

   gi_cursor( cursor_on ); /* set cursor on if it was on */
   #ifdef GGRAPHICS
   gcurvp->ppos.x = cposx; /* update graphics pos also */
     20e:	84 81       	ldd	r24, Z+4	; 0x04
     210:	86 83       	std	Z+6, r24	; 0x06
   gcurvp->ppos.y = cposy;
     212:	85 81       	ldd	r24, Z+5	; 0x05
     214:	87 83       	std	Z+7, r24	; 0x07
   #endif

   ghw_updatehw();
   gi_calcdatacheck(); /* correct VP to new settings */
     216:	fb c5       	rjmp	.+3062   	; 0xe0e <gi_calcdatacheck>
     218:	08 95       	ret

0000021a <gi_tabstep>:
GXT gi_tabstep(GXT x)
   {
   #ifndef GCONSTTAB
   SGUCHAR i;
   #endif
   x-=ltx;
     21a:	e0 91 ff 0b 	lds	r30, 0x0BFF
     21e:	f0 91 00 0c 	lds	r31, 0x0C00
     222:	90 81       	ld	r25, Z
     224:	89 1b       	sub	r24, r25
   #ifdef GCONSTTAB
   /* Calculate next tab */
   x = ((x/GTABSIZE)+1)*GTABSIZE+ltx;
     226:	86 95       	lsr	r24
     228:	2b eb       	ldi	r18, 0xBB	; 187
     22a:	82 9f       	mul	r24, r18
     22c:	81 2d       	mov	r24, r1
     22e:	11 24       	eor	r1, r1
     230:	86 95       	lsr	r24
     232:	86 95       	lsr	r24
     234:	86 95       	lsr	r24
     236:	26 e1       	ldi	r18, 0x16	; 22
     238:	82 9f       	mul	r24, r18
     23a:	90 0d       	add	r25, r0
     23c:	11 24       	eor	r1, r1
     23e:	89 2f       	mov	r24, r25
      }
   else /* tab not found */
      x = rbx;
   #endif
   return x;
   }
     240:	8a 5e       	subi	r24, 0xEA	; 234
     242:	08 95       	ret

00000244 <gi_putch>:

   Returns 0 if printed
   Returns symbol width if not printed (not room in vp, and ! GLINECUT)
*/
char gi_putch( GWCHAR val )
   {
     244:	af 92       	push	r10
     246:	bf 92       	push	r11
     248:	cf 92       	push	r12
     24a:	df 92       	push	r13
     24c:	ef 92       	push	r14
     24e:	0f 93       	push	r16
     250:	1f 93       	push	r17
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	c8 2f       	mov	r28, r24
   GXT w;
   if ((val == (GWCHAR)'\n') || (val == (GWCHAR)'\r'))
     258:	8a 30       	cpi	r24, 0x0A	; 10
     25a:	09 f4       	brne	.+2      	; 0x25e <gi_putch+0x1a>
     25c:	a3 c0       	rjmp	.+326    	; 0x3a4 <gi_putch+0x160>
     25e:	8d 30       	cpi	r24, 0x0D	; 13
     260:	09 f4       	brne	.+2      	; 0x264 <gi_putch+0x20>
     262:	a2 c0       	rjmp	.+324    	; 0x3a8 <gi_putch+0x164>
      return 0; /* No output, positions are handled at the level above */
   if (val == (GWCHAR)'\t')
     264:	89 30       	cpi	r24, 0x09	; 9
     266:	89 f5       	brne	.+98     	; 0x2ca <gi_putch+0x86>
      { /* Tabulator is handled like a single variable width symbol */
      if ((w = gi_tabstep(cposx)) != ltx)
     268:	c0 91 ff 0b 	lds	r28, 0x0BFF
     26c:	d0 91 00 0c 	lds	r29, 0x0C00
     270:	8c 81       	ldd	r24, Y+4	; 0x04
     272:	d3 df       	rcall	.-90     	; 0x21a <gi_tabstep>
     274:	d8 2e       	mov	r13, r24
     276:	88 81       	ld	r24, Y
     278:	d8 16       	cp	r13, r24
     27a:	09 f4       	brne	.+2      	; 0x27e <gi_putch+0x3a>
     27c:	97 c0       	rjmp	.+302    	; 0x3ac <gi_putch+0x168>
         {
         GYT fh = gfgetfh( gcurvp->pfont );
     27e:	8a 85       	ldd	r24, Y+10	; 0x0a
     280:	9b 85       	ldd	r25, Y+11	; 0x0b
     282:	52 df       	rcall	.-348    	; 0x128 <gfgetfh>
         ghw_fill(cposx, (GYT)((cposy < lty+fh) ? lty : (cposy-(fh-1))),
                 w, cposy,(SGUINT)(G_IS_INVERSE() ? 0xffff : 0x0000));
     284:	e0 91 ff 0b 	lds	r30, 0x0BFF
     288:	f0 91 00 0c 	lds	r31, 0x0C00
     28c:	04 85       	ldd	r16, Z+12	; 0x0c
     28e:	15 85       	ldd	r17, Z+13	; 0x0d
   if (val == (GWCHAR)'\t')
      { /* Tabulator is handled like a single variable width symbol */
      if ((w = gi_tabstep(cposx)) != ltx)
         {
         GYT fh = gfgetfh( gcurvp->pfont );
         ghw_fill(cposx, (GYT)((cposy < lty+fh) ? lty : (cposy-(fh-1))),
     290:	01 70       	andi	r16, 0x01	; 1
     292:	11 27       	eor	r17, r17
     294:	11 95       	neg	r17
     296:	01 95       	neg	r16
     298:	11 09       	sbc	r17, r1
     29a:	25 81       	ldd	r18, Z+5	; 0x05
     29c:	61 81       	ldd	r22, Z+1	; 0x01
     29e:	c2 2f       	mov	r28, r18
     2a0:	d0 e0       	ldi	r29, 0x00	; 0
     2a2:	a8 2f       	mov	r26, r24
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	a6 0f       	add	r26, r22
     2a8:	b1 1d       	adc	r27, r1
     2aa:	ca 17       	cp	r28, r26
     2ac:	db 07       	cpc	r29, r27
     2ae:	1c f0       	brlt	.+6      	; 0x2b6 <gi_putch+0x72>
     2b0:	61 e0       	ldi	r22, 0x01	; 1
     2b2:	62 0f       	add	r22, r18
     2b4:	68 1b       	sub	r22, r24
     2b6:	4d 2d       	mov	r20, r13
     2b8:	84 81       	ldd	r24, Z+4	; 0x04
     2ba:	3e d6       	rcall	.+3196   	; 0xf38 <ghw_fill>
                 w, cposy,(SGUINT)(G_IS_INVERSE() ? 0xffff : 0x0000));
         cposx = w; /* Move position to tab setting or end of viewport */
     2bc:	e0 91 ff 0b 	lds	r30, 0x0BFF
     2c0:	f0 91 00 0c 	lds	r31, 0x0C00
     2c4:	d4 82       	std	Z+4, r13	; 0x04
            #endif
            }
         }
      #endif /* GSOFT_FONTS */
      }
   return 0;
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	76 c0       	rjmp	.+236    	; 0x3b6 <gi_putch+0x172>
      #endif
      #ifdef GSOFT_FONTS
         {
         PGSYMBOL psymbol; /* pointer to a symbol */
         GYT fh;
         fh = gfgetfh( gcurvp->pfont );
     2ca:	e0 91 ff 0b 	lds	r30, 0x0BFF
     2ce:	f0 91 00 0c 	lds	r31, 0x0C00
     2d2:	82 85       	ldd	r24, Z+10	; 0x0a
     2d4:	93 85       	ldd	r25, Z+11	; 0x0b
     2d6:	28 df       	rcall	.-432    	; 0x128 <gfgetfh>
     2d8:	d8 2f       	mov	r29, r24

         if (cposx > rbx)
     2da:	e0 91 ff 0b 	lds	r30, 0x0BFF
     2de:	f0 91 00 0c 	lds	r31, 0x0C00
     2e2:	82 81       	ldd	r24, Z+2	; 0x02
     2e4:	94 81       	ldd	r25, Z+4	; 0x04
     2e6:	89 17       	cp	r24, r25
     2e8:	20 f4       	brcc	.+8      	; 0x2f2 <gi_putch+0xae>
            {
            cposx = rbx+1;
     2ea:	8f 5f       	subi	r24, 0xFF	; 255
     2ec:	84 83       	std	Z+4, r24	; 0x04
            return 0; /* Line overflow by previous char, skip (waiting for \n or \r) */
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	62 c0       	rjmp	.+196    	; 0x3b6 <gi_putch+0x172>
            }

         psymbol = gi_getsymbol( val , gcurvp->pfont, gcurvp->codepagep);
     2f2:	40 85       	ldd	r20, Z+8	; 0x08
     2f4:	51 85       	ldd	r21, Z+9	; 0x09
     2f6:	62 85       	ldd	r22, Z+10	; 0x0a
     2f8:	73 85       	ldd	r23, Z+11	; 0x0b
     2fa:	8c 2f       	mov	r24, r28
     2fc:	b2 d0       	rcall	.+356    	; 0x462 <gi_getsymbol>
     2fe:	8c 01       	movw	r16, r24

         if( psymbol == NULL )
     300:	00 97       	sbiw	r24, 0x00	; 0
     302:	09 f4       	brne	.+2      	; 0x306 <gi_putch+0xc2>
     304:	55 c0       	rjmp	.+170    	; 0x3b0 <gi_putch+0x16c>
            {
            G_WARNING( "gputch: Character have undefined symbol" );
            return 0;
            }
         w = gsymw(psymbol);
     306:	fc 01       	movw	r30, r24
     308:	c0 81       	ld	r28, Z
     30a:	c1 11       	cpse	r28, r1
     30c:	01 c0       	rjmp	.+2      	; 0x310 <gi_putch+0xcc>
     30e:	c2 81       	ldd	r28, Z+2	; 0x02
         if (!G_IS_PARTIAL_CHAR() && ((SGUINT) cposx+w-1 > (SGUINT) rbx))
     310:	e0 91 ff 0b 	lds	r30, 0x0BFF
     314:	f0 91 00 0c 	lds	r31, 0x0C00
     318:	24 85       	ldd	r18, Z+12	; 0x0c
     31a:	35 85       	ldd	r19, Z+13	; 0x0d
     31c:	31 fd       	sbrc	r19, 1
     31e:	0c c0       	rjmp	.+24     	; 0x338 <gi_putch+0xf4>
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	21 50       	subi	r18, 0x01	; 1
     326:	31 09       	sbc	r19, r1
     328:	2c 0f       	add	r18, r28
     32a:	31 1d       	adc	r19, r1
     32c:	82 81       	ldd	r24, Z+2	; 0x02
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	82 17       	cp	r24, r18
     332:	93 07       	cpc	r25, r19
     334:	08 f4       	brcc	.+2      	; 0x338 <gi_putch+0xf4>
     336:	3e c0       	rjmp	.+124    	; 0x3b4 <gi_putch+0x170>
            return 1; /* not room for symbol, skip to avoid cut */

         gi_putsymbol( cposx,
     338:	a2 85       	ldd	r26, Z+10	; 0x0a
     33a:	b3 85       	ldd	r27, Z+11	; 0x0b
     33c:	12 96       	adiw	r26, 0x02	; 2
     33e:	ad 90       	ld	r10, X+
     340:	bd 90       	ld	r11, X+
     342:	cd 90       	ld	r12, X+
     344:	dc 90       	ld	r13, X
     346:	15 97       	sbiw	r26, 0x05	; 5
                       (GYT)((cposy+1)-fh),
                       rbx, rby,
                       psymbol,
                       (GYT)(( fh <= cposy-lty ) ? 0 : fh - ((cposy-lty)+1)), /* yoffset*/
     348:	65 81       	ldd	r22, Z+5	; 0x05
     34a:	41 81       	ldd	r20, Z+1	; 0x01
     34c:	2d 2f       	mov	r18, r29
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	86 2f       	mov	r24, r22
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	84 1b       	sub	r24, r20
     356:	91 09       	sbc	r25, r1
            }
         w = gsymw(psymbol);
         if (!G_IS_PARTIAL_CHAR() && ((SGUINT) cposx+w-1 > (SGUINT) rbx))
            return 1; /* not room for symbol, skip to avoid cut */

         gi_putsymbol( cposx,
     358:	82 17       	cp	r24, r18
     35a:	93 07       	cpc	r25, r19
     35c:	34 f4       	brge	.+12     	; 0x36a <gi_putch+0x126>
     35e:	ee 24       	eor	r14, r14
     360:	ea 94       	dec	r14
     362:	e4 0e       	add	r14, r20
     364:	e6 1a       	sub	r14, r22
     366:	ed 0e       	add	r14, r29
     368:	01 c0       	rjmp	.+2      	; 0x36c <gi_putch+0x128>
     36a:	e1 2c       	mov	r14, r1
     36c:	6f 5f       	subi	r22, 0xFF	; 255
     36e:	6d 1b       	sub	r22, r29
     370:	23 81       	ldd	r18, Z+3	; 0x03
     372:	42 81       	ldd	r20, Z+2	; 0x02
     374:	84 81       	ldd	r24, Z+4	; 0x04
     376:	07 d1       	rcall	.+526    	; 0x586 <gi_putsymbol>
                       gi_fsymsize(gcurvp->pfont));

         #ifndef GNOTXTSPACE
         if ((SGUINT) cposx + w + chlnx > (SGUINT) rbx)
         #else
         if ((SGUINT) cposx + w > (SGUINT) rbx)
     378:	e0 91 ff 0b 	lds	r30, 0x0BFF
     37c:	f0 91 00 0c 	lds	r31, 0x0C00
     380:	44 81       	ldd	r20, Z+4	; 0x04
     382:	52 81       	ldd	r21, Z+2	; 0x02
     384:	24 2f       	mov	r18, r20
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	2c 0f       	add	r18, r28
     38a:	31 1d       	adc	r19, r1
     38c:	85 2f       	mov	r24, r21
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	82 17       	cp	r24, r18
     392:	93 07       	cpc	r25, r19
     394:	18 f4       	brcc	.+6      	; 0x39c <gi_putch+0x158>
         #endif
            cposx = rbx;
     396:	54 83       	std	Z+4, r21	; 0x04
            #endif
            }
         }
      #endif /* GSOFT_FONTS */
      }
   return 0;
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	0d c0       	rjmp	.+26     	; 0x3b6 <gi_putch+0x172>
         if ((SGUINT) cposx + w > (SGUINT) rbx)
         #endif
            cposx = rbx;
         else
            {
            cposx += w;
     39c:	c4 0f       	add	r28, r20
     39e:	c4 83       	std	Z+4, r28	; 0x04
            #endif
            }
         }
      #endif /* GSOFT_FONTS */
      }
   return 0;
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	09 c0       	rjmp	.+18     	; 0x3b6 <gi_putch+0x172>
*/
char gi_putch( GWCHAR val )
   {
   GXT w;
   if ((val == (GWCHAR)'\n') || (val == (GWCHAR)'\r'))
      return 0; /* No output, positions are handled at the level above */
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	07 c0       	rjmp	.+14     	; 0x3b6 <gi_putch+0x172>
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	05 c0       	rjmp	.+10     	; 0x3b6 <gi_putch+0x172>
            #endif
            }
         }
      #endif /* GSOFT_FONTS */
      }
   return 0;
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <gi_putch+0x172>
         psymbol = gi_getsymbol( val , gcurvp->pfont, gcurvp->codepagep);

         if( psymbol == NULL )
            {
            G_WARNING( "gputch: Character have undefined symbol" );
            return 0;
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	01 c0       	rjmp	.+2      	; 0x3b6 <gi_putch+0x172>
            }
         w = gsymw(psymbol);
         if (!G_IS_PARTIAL_CHAR() && ((SGUINT) cposx+w-1 > (SGUINT) rbx))
            return 1; /* not room for symbol, skip to avoid cut */
     3b4:	81 e0       	ldi	r24, 0x01	; 1
         }
      #endif /* GSOFT_FONTS */
      }
   return 0;

   }
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	ef 90       	pop	r14
     3c0:	df 90       	pop	r13
     3c2:	cf 90       	pop	r12
     3c4:	bf 90       	pop	r11
     3c6:	af 90       	pop	r10
     3c8:	08 95       	ret

000003ca <gselfont>:
   Set current font (incl. default character h,w)
   pass a pointer from a <font>.c file.
   Returns previous font
*/
PGFONT gselfont( PGFONT pfont )
   {
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	dc 01       	movw	r26, r24
      gi_cursor( 0 ); /* Remove cursor of old font size */
      }
   #endif
   #endif /* GNOCURSOR */

   pf = gcurvp->pfont;
     3d0:	e0 91 ff 0b 	lds	r30, 0x0BFF
     3d4:	f0 91 00 0c 	lds	r31, 0x0C00
     3d8:	c2 85       	ldd	r28, Z+10	; 0x0a
     3da:	d3 85       	ldd	r29, Z+11	; 0x0b
   #ifdef GVIRTUAL_FONTS_DYN
   if (gvf_open(pfont))
   #else
   if (pfont == NULL)
     3dc:	00 97       	sbiw	r24, 0x00	; 0
     3de:	81 f4       	brne	.+32     	; 0x400 <gselfont+0x36>
   #endif
      {
      G_WARNING( "gselfont: Parameter, No font selected" );
      gcurvp->pfont = &SYSFONT;
     3e0:	a9 e2       	ldi	r26, 0x29	; 41
     3e2:	b2 e0       	ldi	r27, 0x02	; 2
     3e4:	b3 87       	std	Z+11, r27	; 0x0b
     3e6:	a2 87       	std	Z+10, r26	; 0x0a
      gcurvp->codepagep = SYSFONT.pcodepage;
     3e8:	80 91 33 02 	lds	r24, 0x0233
     3ec:	90 91 34 02 	lds	r25, 0x0234
     3f0:	91 87       	std	Z+9, r25	; 0x09
     3f2:	80 87       	std	Z+8, r24	; 0x08
      gcurvp->fsize.x = SYSFONT.symwidth;
     3f4:	8c 91       	ld	r24, X
     3f6:	86 87       	std	Z+14, r24	; 0x0e
      gcurvp->fsize.y = SYSFONT.symheight;
     3f8:	80 91 2a 02 	lds	r24, 0x022A
     3fc:	87 87       	std	Z+15, r24	; 0x0f
     3fe:	0d c0       	rjmp	.+26     	; 0x41a <gselfont+0x50>
      }
   else
      {
      gcurvp->pfont = pfont;
     400:	93 87       	std	Z+11, r25	; 0x0b
     402:	82 87       	std	Z+10, r24	; 0x0a
      gcurvp->codepagep = gi_fpcodepage(pfont);
     404:	1a 96       	adiw	r26, 0x0a	; 10
     406:	8d 91       	ld	r24, X+
     408:	9c 91       	ld	r25, X
     40a:	1b 97       	sbiw	r26, 0x0b	; 11
     40c:	91 87       	std	Z+9, r25	; 0x09
     40e:	80 87       	std	Z+8, r24	; 0x08
      gcurvp->fsize.x = gi_fsymw(pfont);
     410:	8c 91       	ld	r24, X
     412:	86 87       	std	Z+14, r24	; 0x0e
      gcurvp->fsize.y = gi_fsymh(pfont);
     414:	11 96       	adiw	r26, 0x01	; 1
     416:	8c 91       	ld	r24, X
     418:	87 87       	std	Z+15, r24	; 0x0f
         /* Use font specific extended spacing settings */
         gcurvp->chln.x = gi_chsp(pfont);
         gcurvp->chln.y = gi_lnsp(pfont);
         }
      #endif
      h = gcurvp->fsize.y;
     41a:	e0 91 ff 0b 	lds	r30, 0x0BFF
     41e:	f0 91 00 0c 	lds	r31, 0x0C00
     422:	57 85       	ldd	r21, Z+15	; 0x0f
      gi_limit_check();
      #endif
      }
   #endif

   if( gcurvp->cpos.y < gcurvp->lt.y+(h-1))
     424:	41 81       	ldd	r20, Z+1	; 0x01
     426:	25 81       	ldd	r18, Z+5	; 0x05
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	85 2f       	mov	r24, r21
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	84 0f       	add	r24, r20
     432:	91 1d       	adc	r25, r1
     434:	28 17       	cp	r18, r24
     436:	39 07       	cpc	r19, r25
     438:	3c f4       	brge	.+14     	; 0x448 <gselfont+0x7e>
      {
      gcurvp->cpos.y = gcurvp->lt.y+(h-1); /* Assure font is visible */
     43a:	45 0f       	add	r20, r21
     43c:	41 50       	subi	r20, 0x01	; 1
     43e:	45 83       	std	Z+5, r20	; 0x05
      if (gcurvp->cpos.y > gcurvp->rb.y)
     440:	83 81       	ldd	r24, Z+3	; 0x03
     442:	84 17       	cp	r24, r20
     444:	08 f4       	brcc	.+2      	; 0x448 <gselfont+0x7e>
         gcurvp->cpos.y = gcurvp->rb.y;    /* Must not exceed buttom */
     446:	85 83       	std	Z+5, r24	; 0x05
      }

   #ifdef GGRAPHICS
   /* update graphics pos also */
   gcurvp->ppos.x = (gcurvp->cpos.x > gcurvp->rb.x) ? gcurvp->rb.x : gcurvp->cpos.x;
     448:	94 81       	ldd	r25, Z+4	; 0x04
     44a:	82 81       	ldd	r24, Z+2	; 0x02
     44c:	98 17       	cp	r25, r24
     44e:	08 f4       	brcc	.+2      	; 0x452 <gselfont+0x88>
     450:	89 2f       	mov	r24, r25
     452:	86 83       	std	Z+6, r24	; 0x06
   gcurvp->ppos.y = gcurvp->cpos.y;
     454:	85 81       	ldd	r24, Z+5	; 0x05
     456:	87 83       	std	Z+7, r24	; 0x07
   #endif

   gi_calcdatacheck(); /* correct VP to new settings */
     458:	da d4       	rcall	.+2484   	; 0xe0e <gi_calcdatacheck>
      gi_cursor( 1 ); /* Restore cursor with new font size */
      }
   #endif
   #endif /* GNOCURSOR */
   return pf;
   }
     45a:	ce 01       	movw	r24, r28
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	08 95       	ret

00000462 <gi_getsymbol>:
/*********************************************************************
   Finds a pointer to char
   Must not be called if it is a hardware font
*/
PGSYMBOL gi_getsymbol( GWCHAR c, PGFONT pfont, PGCODEPAGE codepagep)
   {
     462:	0f 93       	push	r16
     464:	1f 93       	push	r17
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	ea 01       	movw	r28, r20
         }
      }
   /* We end here if no codepage is used, or if codepage is not in virtual memory */
   #endif

   if( codepagep != NULL )
     46c:	20 97       	sbiw	r28, 0x00	; 0
     46e:	71 f1       	breq	.+92     	; 0x4cc <gi_getsymbol+0x6a>
      {
      /* Using codepage, convert character to an index via lookup */
      crpb = &codepagep->cpr[0]; /* Codepage element array base */
     470:	da 01       	movw	r26, r20
     472:	12 96       	adiw	r26, 0x02	; 2

      if (codepagep->cph.cprnum == 0)
     474:	08 81       	ld	r16, Y
     476:	00 23       	and	r16, r16
     478:	09 f4       	brne	.+2      	; 0x47c <gi_getsymbol+0x1a>
     47a:	55 c0       	rjmp	.+170    	; 0x526 <gi_getsymbol+0xc4>
         code pages, and for the fonts codepages created with IconEdit) */
      for(;;)
         {
         /* Sub range = full range */
         numelem = codepagep->cph.cprnum;
         min = 0;
     47c:	10 e0       	ldi	r17, 0x00	; 0
         arranged in increasing order (= default ordering for all standard font
         code pages, and for the fonts codepages created with IconEdit) */
      for(;;)
         {
         /* Sub range = full range */
         numelem = codepagep->cph.cprnum;
     47e:	50 2f       	mov	r21, r16
         min = 0;
     480:	41 2f       	mov	r20, r17
         for(;;)
            {
            half = numelem >> 1;   /* half = mid point in sub range */
     482:	95 2f       	mov	r25, r21
     484:	96 95       	lsr	r25
            crp = &crpb[(SGUINT)min+half]; /* Next element to check */
     486:	24 2f       	mov	r18, r20
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	29 0f       	add	r18, r25
     48c:	31 1d       	adc	r19, r1
     48e:	f9 01       	movw	r30, r18
     490:	ee 0f       	add	r30, r30
     492:	ff 1f       	adc	r31, r31
     494:	2e 0f       	add	r18, r30
     496:	3f 1f       	adc	r19, r31
     498:	fd 01       	movw	r30, r26
     49a:	e2 0f       	add	r30, r18
     49c:	f3 1f       	adc	r31, r19
            if ((c >= crp->min) && (c <= crp->max))
     49e:	20 81       	ld	r18, Z
     4a0:	82 17       	cp	r24, r18
     4a2:	08 f4       	brcc	.+2      	; 0x4a6 <gi_getsymbol+0x44>
     4a4:	4c c0       	rjmp	.+152    	; 0x53e <gi_getsymbol+0xdc>
     4a6:	31 81       	ldd	r19, Z+1	; 0x01
     4a8:	38 17       	cp	r19, r24
     4aa:	08 f4       	brcc	.+2      	; 0x4ae <gi_getsymbol+0x4c>
     4ac:	45 c0       	rjmp	.+138    	; 0x538 <gi_getsymbol+0xd6>
               {
               /* Found */
               c = crp->idx + (c - crp->min); /* Convert to symbol index */
     4ae:	e2 81       	ldd	r30, Z+2	; 0x02
     4b0:	8e 0f       	add	r24, r30
     4b2:	82 1b       	sub	r24, r18
               goto c_converted; /* fast skip of all loops */
     4b4:	0b c0       	rjmp	.+22     	; 0x4cc <gi_getsymbol+0x6a>
                  /* define next sub range */
                  if (c < crp->min)
                     numelem = half;        /* too high, continue in lower half */
                  else
                     {
                     min = min+half;        /* too low, continue in upper half */
     4b6:	49 0f       	add	r20, r25
                     numelem = numelem - half;
     4b8:	59 1b       	sub	r21, r25
     4ba:	95 2f       	mov	r25, r21
                     }

                  if (numelem != 0)        /* subrange exist ? */
     4bc:	11 f0       	breq	.+4      	; 0x4c2 <gi_getsymbol+0x60>
         code pages, and for the fonts codepages created with IconEdit) */
      for(;;)
         {
         /* Sub range = full range */
         numelem = codepagep->cph.cprnum;
         min = 0;
     4be:	59 2f       	mov	r21, r25
     4c0:	e0 cf       	rjmp	.-64     	; 0x482 <gi_getsymbol+0x20>
                  if (numelem != 0)        /* subrange exist ? */
                     continue;
                  }

               /* Not found */
               if (c == codepagep->cph.def_wch)
     4c2:	99 81       	ldd	r25, Y+1	; 0x01
     4c4:	98 17       	cp	r25, r24
     4c6:	91 f1       	breq	.+100    	; 0x52c <gi_getsymbol+0xca>
                  return NULL;
                  }
               else
                  {
                  /* Use default character instead */
                  c = codepagep->cph.def_wch;
     4c8:	89 2f       	mov	r24, r25
     4ca:	d9 cf       	rjmp	.-78     	; 0x47e <gi_getsymbol+0x1c>

   c_converted:
   /* Check that character symbol index value is within font table size */
   /* (= ordinaty c parameter check for fonts without codepage).
      (= double check of codepage table lookup for fonts with a codepage) */
   if ( (SGUINT) c > (SGUINT) gi_fnumsym(pfont))
     4cc:	e8 2f       	mov	r30, r24
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	db 01       	movw	r26, r22
     4d2:	18 96       	adiw	r26, 0x08	; 8
     4d4:	8d 91       	ld	r24, X+
     4d6:	9c 91       	ld	r25, X
     4d8:	19 97       	sbiw	r26, 0x09	; 9
     4da:	8e 17       	cp	r24, r30
     4dc:	9f 07       	cpc	r25, r31
     4de:	48 f1       	brcs	.+82     	; 0x532 <gi_getsymbol+0xd0>
      return gi_fontv_sym(c); /* Do GFONTV lookup */
   /* Do GFONT lookup */
   #endif

   /* Is a standard font (linear symbol array in linear memory) */
   s = ((GBUFINT)(giscolor(pfont->psymbols) ? sizeof(GCSYMHEAD) : sizeof(GSYMHEAD))) /* Sizeof symbol header */
     4e0:	16 96       	adiw	r26, 0x06	; 6
     4e2:	0d 90       	ld	r0, X+
     4e4:	bc 91       	ld	r27, X
     4e6:	a0 2d       	mov	r26, r0
     4e8:	8c 91       	ld	r24, X
     4ea:	81 11       	cpse	r24, r1
     4ec:	05 c0       	rjmp	.+10     	; 0x4f8 <gi_getsymbol+0x96>
     4ee:	04 e0       	ldi	r16, 0x04	; 4
     4f0:	10 e0       	ldi	r17, 0x00	; 0
     4f2:	20 e0       	ldi	r18, 0x00	; 0
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	04 c0       	rjmp	.+8      	; 0x500 <gi_getsymbol+0x9e>
     4f8:	02 e0       	ldi	r16, 0x02	; 2
     4fa:	10 e0       	ldi	r17, 0x00	; 0
     4fc:	20 e0       	ldi	r18, 0x00	; 0
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	eb 01       	movw	r28, r22
     502:	4a 81       	ldd	r20, Y+2	; 0x02
     504:	5b 81       	ldd	r21, Y+3	; 0x03
     506:	6c 81       	ldd	r22, Y+4	; 0x04
     508:	7d 81       	ldd	r23, Y+5	; 0x05
     50a:	40 0f       	add	r20, r16
     50c:	51 1f       	adc	r21, r17
     50e:	62 1f       	adc	r22, r18
     510:	73 1f       	adc	r23, r19
      + ((GBUFINT) pfont->symsize); /* size of symbol data */
   ps = (PGSYMBYTE) (pfont->psymbols);
   return (PGSYMBOL)(&ps[s*c]);
     512:	e4 9f       	mul	r30, r20
     514:	c0 01       	movw	r24, r0
     516:	e5 9f       	mul	r30, r21
     518:	90 0d       	add	r25, r0
     51a:	f4 9f       	mul	r31, r20
     51c:	90 0d       	add	r25, r0
     51e:	11 24       	eor	r1, r1
     520:	8a 0f       	add	r24, r26
     522:	9b 1f       	adc	r25, r27
     524:	0f c0       	rjmp	.+30     	; 0x544 <gi_getsymbol+0xe2>
      crpb = &codepagep->cpr[0]; /* Codepage element array base */

      if (codepagep->cph.cprnum == 0)
         {
         G_WARNING("Illegal codepage header detected");
         return NULL;
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	0c c0       	rjmp	.+24     	; 0x544 <gi_getsymbol+0xe2>
               /* Not found */
               if (c == codepagep->cph.def_wch)
                  {
                  /* Default character does not exist (either) */
                  G_WARNING("Illegal codepage default character detected");
                  return NULL;
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	09 c0       	rjmp	.+18     	; 0x544 <gi_getsymbol+0xe2>
   /* (= ordinaty c parameter check for fonts without codepage).
      (= double check of codepage table lookup for fonts with a codepage) */
   if ( (SGUINT) c > (SGUINT) gi_fnumsym(pfont))
      {
      G_WARNING( "gfsymv.c: symbol index larger than font table" );
      return NULL;
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	06 c0       	rjmp	.+12     	; 0x544 <gi_getsymbol+0xe2>
               c = crp->idx + (c - crp->min); /* Convert to symbol index */
               goto c_converted; /* fast skip of all loops */
               }
            else
               {
               if (half != 0)
     538:	91 11       	cpse	r25, r1
     53a:	bd cf       	rjmp	.-134    	; 0x4b6 <gi_getsymbol+0x54>
     53c:	c2 cf       	rjmp	.-124    	; 0x4c2 <gi_getsymbol+0x60>
     53e:	91 11       	cpse	r25, r1
     540:	be cf       	rjmp	.-132    	; 0x4be <gi_getsymbol+0x5c>
     542:	bf cf       	rjmp	.-130    	; 0x4c2 <gi_getsymbol+0x60>
   /* Is a standard font (linear symbol array in linear memory) */
   s = ((GBUFINT)(giscolor(pfont->psymbols) ? sizeof(GCSYMHEAD) : sizeof(GSYMHEAD))) /* Sizeof symbol header */
      + ((GBUFINT) pfont->symsize); /* size of symbol data */
   ps = (PGSYMBYTE) (pfont->psymbols);
   return (PGSYMBOL)(&ps[s*c]);
   }
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	1f 91       	pop	r17
     54a:	0f 91       	pop	r16
     54c:	08 95       	ret

0000054e <gi_getsymw>:
*/
GXT gi_getsymw( GWCHAR c )
   {
   PGSYMBOL ps;
   #ifdef GDATACHECK
   if (gcurvp == NULL)
     54e:	e0 91 ff 0b 	lds	r30, 0x0BFF
     552:	f0 91 00 0c 	lds	r31, 0x0C00
     556:	30 97       	sbiw	r30, 0x00	; 0
     558:	81 f0       	breq	.+32     	; 0x57a <gi_getsymw+0x2c>
      return GDISPCW;
   if (gcurvp->pfont == NULL)
     55a:	62 85       	ldd	r22, Z+10	; 0x0a
     55c:	73 85       	ldd	r23, Z+11	; 0x0b
     55e:	61 15       	cp	r22, r1
     560:	71 05       	cpc	r23, r1
     562:	69 f0       	breq	.+26     	; 0x57e <gi_getsymw+0x30>
   #ifndef GHW_NO_HDW_FONT
   if( gishwfont() )
      return GDISPCW; /* width of symbol HW fonts*/
   #endif

   ps = gi_getsymbol(c, gcurvp->pfont, gcurvp->codepagep);
     564:	40 85       	ldd	r20, Z+8	; 0x08
     566:	51 85       	ldd	r21, Z+9	; 0x09
     568:	7c df       	rcall	.-264    	; 0x462 <gi_getsymbol>
     56a:	fc 01       	movw	r30, r24
   if( ps == NULL )
     56c:	00 97       	sbiw	r24, 0x00	; 0
     56e:	49 f0       	breq	.+18     	; 0x582 <gi_getsymw+0x34>
      return 0;
   return gsymw(ps); /* Width of SW font */
     570:	80 81       	ld	r24, Z
     572:	81 11       	cpse	r24, r1
     574:	07 c0       	rjmp	.+14     	; 0x584 <gi_getsymw+0x36>
     576:	82 81       	ldd	r24, Z+2	; 0x02
     578:	08 95       	ret
GXT gi_getsymw( GWCHAR c )
   {
   PGSYMBOL ps;
   #ifdef GDATACHECK
   if (gcurvp == NULL)
      return GDISPCW;
     57a:	88 e0       	ldi	r24, 0x08	; 8
     57c:	08 95       	ret
   if (gcurvp->pfont == NULL)
       return GDISPCW;
     57e:	88 e0       	ldi	r24, 0x08	; 8
     580:	08 95       	ret
      return GDISPCW; /* width of symbol HW fonts*/
   #endif

   ps = gi_getsymbol(c, gcurvp->pfont, gcurvp->codepagep);
   if( ps == NULL )
      return 0;
     582:	80 e0       	ldi	r24, 0x00	; 0
   return gsymw(ps); /* Width of SW font */
   }
     584:	08 95       	ret

00000586 <gi_putsymbol>:
  #include <gvfont.h>
#endif

void gi_putsymbol(GXT xs,GYT ys,GXT xemax,GYT yemax,
      PGSYMBOL psymbol, GYT yoffset, GBUFINT symsize)
   {
     586:	3f 92       	push	r3
     588:	4f 92       	push	r4
     58a:	5f 92       	push	r5
     58c:	6f 92       	push	r6
     58e:	7f 92       	push	r7
     590:	8f 92       	push	r8
     592:	9f 92       	push	r9
     594:	af 92       	push	r10
     596:	bf 92       	push	r11
     598:	cf 92       	push	r12
     59a:	df 92       	push	r13
     59c:	ef 92       	push	r14
     59e:	ff 92       	push	r15
     5a0:	0f 93       	push	r16
     5a2:	1f 93       	push	r17
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	48 2e       	mov	r4, r24
     5aa:	56 2e       	mov	r5, r22
     5ac:	f4 2e       	mov	r15, r20
     5ae:	32 2e       	mov	r3, r18
     5b0:	f8 01       	movw	r30, r16
   SGUINT ye;
   SGUINT bw;
   SGUCHAR mode; /* hw mode flags */
   PGSYMBYTE f;

   xe = (SGUINT) gsymw(psymbol);
     5b2:	80 81       	ld	r24, Z
     5b4:	81 11       	cpse	r24, r1
     5b6:	b2 c0       	rjmp	.+356    	; 0x71c <gi_putsymbol+0x196>
     5b8:	82 80       	ldd	r8, Z+2	; 0x02
     5ba:	91 2c       	mov	r9, r1
   ye = (SGUINT) gsymh(psymbol);
     5bc:	23 81       	ldd	r18, Z+3	; 0x03
     5be:	c2 2f       	mov	r28, r18
     5c0:	d0 e0       	ldi	r29, 0x00	; 0
   if ((ye == 0) || (xe == 0))
     5c2:	20 97       	sbiw	r28, 0x00	; 0
     5c4:	09 f4       	brne	.+2      	; 0x5c8 <gi_putsymbol+0x42>
     5c6:	ae c0       	rjmp	.+348    	; 0x724 <gi_putsymbol+0x19e>
     5c8:	81 14       	cp	r8, r1
     5ca:	91 04       	cpc	r9, r1
     5cc:	09 f4       	brne	.+2      	; 0x5d0 <gi_putsymbol+0x4a>
     5ce:	aa c0       	rjmp	.+340    	; 0x724 <gi_putsymbol+0x19e>
         G_WARNING("Check if virtual font has been opened correctly");
         }
      #endif
      return;
      }
   if (giscolor(psymbol))
     5d0:	81 11       	cpse	r24, r1
     5d2:	47 c0       	rjmp	.+142    	; 0x662 <gi_putsymbol+0xdc>
         #endif
         f = (PGSYMBYTE) NULL; /* Signal use of virtual font to low-level driver*/
         }
      else
      #endif
         f = (PGSYMBYTE)&(((PGCSYMBOL)psymbol)->b[0]);  /* first byte in color symbol */
     5d4:	3f 01       	movw	r6, r30
     5d6:	84 e0       	ldi	r24, 0x04	; 4
     5d8:	68 0e       	add	r6, r24
     5da:	71 1c       	adc	r7, r1
      mode = (SGUCHAR) gcolorbits(psymbol);
     5dc:	11 81       	ldd	r17, Z+1	; 0x01
      greymode = ((mode & 0xc0) == 0x40) ? 1 : 0;
     5de:	01 2f       	mov	r16, r17
     5e0:	00 7c       	andi	r16, 0xC0	; 192
      mode &= 0x3f;
     5e2:	1f 73       	andi	r17, 0x3F	; 63
      if (symsize == 0)
     5e4:	a1 14       	cp	r10, r1
     5e6:	b1 04       	cpc	r11, r1
     5e8:	c1 04       	cpc	r12, r1
     5ea:	d1 04       	cpc	r13, r1
     5ec:	09 f5       	brne	.+66     	; 0x630 <gi_putsymbol+0xaa>
         {
         if (mode <= 8)
     5ee:	19 30       	cpi	r17, 0x09	; 9
     5f0:	70 f4       	brcc	.+28     	; 0x60e <gi_putsymbol+0x88>
            bw = (xe*((SGUINT)  mode)+7)/8;    /* width of symbol in bytes */
     5f2:	18 9d       	mul	r17, r8
     5f4:	90 01       	movw	r18, r0
     5f6:	19 9d       	mul	r17, r9
     5f8:	30 0d       	add	r19, r0
     5fa:	11 24       	eor	r1, r1
     5fc:	29 5f       	subi	r18, 0xF9	; 249
     5fe:	3f 4f       	sbci	r19, 0xFF	; 255
     600:	36 95       	lsr	r19
     602:	27 95       	ror	r18
     604:	36 95       	lsr	r19
     606:	27 95       	ror	r18
     608:	36 95       	lsr	r19
     60a:	27 95       	ror	r18
     60c:	18 c0       	rjmp	.+48     	; 0x63e <gi_putsymbol+0xb8>
         else
            bw =  xe*((((SGUINT)mode)+7)/8);   /* width of symbol in bytes */
     60e:	81 2f       	mov	r24, r17
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	07 96       	adiw	r24, 0x07	; 7
     614:	96 95       	lsr	r25
     616:	87 95       	ror	r24
     618:	96 95       	lsr	r25
     61a:	87 95       	ror	r24
     61c:	96 95       	lsr	r25
     61e:	87 95       	ror	r24
     620:	88 9e       	mul	r8, r24
     622:	90 01       	movw	r18, r0
     624:	89 9e       	mul	r8, r25
     626:	30 0d       	add	r19, r0
     628:	98 9e       	mul	r9, r24
     62a:	30 0d       	add	r19, r0
     62c:	11 24       	eor	r1, r1
     62e:	07 c0       	rjmp	.+14     	; 0x63e <gi_putsymbol+0xb8>
         }
      else
         bw = (SGUINT)(symsize/ye);
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	40 e0       	ldi	r20, 0x00	; 0
     634:	50 e0       	ldi	r21, 0x00	; 0
     636:	c6 01       	movw	r24, r12
     638:	b5 01       	movw	r22, r10
     63a:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <__udivmodsi4>
     63e:	10 32       	cpi	r17, 0x20	; 32
     640:	08 f0       	brcs	.+2      	; 0x644 <gi_putsymbol+0xbe>
     642:	1f e1       	ldi	r17, 0x1F	; 31
      if (mode >= 32) mode = 0x1f;
      if ((greymode != 0) && (mode <= 8))
     644:	00 34       	cpi	r16, 0x40	; 64
     646:	89 f5       	brne	.+98     	; 0x6aa <gi_putsymbol+0x124>
     648:	19 30       	cpi	r17, 0x09	; 9
     64a:	78 f5       	brcc	.+94     	; 0x6aa <gi_putsymbol+0x124>
         {
         mode |= GHW_GREYMODE;
         if (G_IS_INVERSE())
     64c:	e0 91 ff 0b 	lds	r30, 0x0BFF
     650:	f0 91 00 0c 	lds	r31, 0x0C00
     654:	84 85       	ldd	r24, Z+12	; 0x0c
     656:	80 fd       	sbrc	r24, 0
     658:	02 c0       	rjmp	.+4      	; 0x65e <gi_putsymbol+0xd8>
      else
         bw = (SGUINT)(symsize/ye);
      if (mode >= 32) mode = 0x1f;
      if ((greymode != 0) && (mode <= 8))
         {
         mode |= GHW_GREYMODE;
     65a:	10 64       	ori	r17, 0x40	; 64
     65c:	26 c0       	rjmp	.+76     	; 0x6aa <gi_putsymbol+0x124>
         if (G_IS_INVERSE())
            mode |= GHW_INVERSE;
     65e:	10 6c       	ori	r17, 0xC0	; 192
     660:	24 c0       	rjmp	.+72     	; 0x6aa <gi_putsymbol+0x124>
         #endif
         f = (PGSYMBYTE) NULL; /* Signal use of virtual font to low-level driver*/
         }
      else
      #endif
         f = (PGSYMBYTE)&(((PGBWSYMBOL)psymbol)->b[0]); /* first byte in B&W symbol */
     662:	3f 01       	movw	r6, r30
     664:	82 e0       	ldi	r24, 0x02	; 2
     666:	68 0e       	add	r6, r24
     668:	71 1c       	adc	r7, r1
      mode = G_IS_INVERSE() ? GHW_INVERSE : 0;
     66a:	e0 91 ff 0b 	lds	r30, 0x0BFF
     66e:	f0 91 00 0c 	lds	r31, 0x0C00
     672:	84 85       	ldd	r24, Z+12	; 0x0c
     674:	80 ff       	sbrs	r24, 0
     676:	02 c0       	rjmp	.+4      	; 0x67c <gi_putsymbol+0xf6>
     678:	10 e8       	ldi	r17, 0x80	; 128
     67a:	01 c0       	rjmp	.+2      	; 0x67e <gi_putsymbol+0xf8>
     67c:	10 e0       	ldi	r17, 0x00	; 0
      if (symsize == 0)
     67e:	a1 14       	cp	r10, r1
     680:	b1 04       	cpc	r11, r1
     682:	c1 04       	cpc	r12, r1
     684:	d1 04       	cpc	r13, r1
     686:	51 f4       	brne	.+20     	; 0x69c <gi_putsymbol+0x116>
         bw = (SGUINT) (xe+7)/8;  /* width of symbol in bytes */
     688:	94 01       	movw	r18, r8
     68a:	29 5f       	subi	r18, 0xF9	; 249
     68c:	3f 4f       	sbci	r19, 0xFF	; 255
     68e:	36 95       	lsr	r19
     690:	27 95       	ror	r18
     692:	36 95       	lsr	r19
     694:	27 95       	ror	r18
     696:	36 95       	lsr	r19
     698:	27 95       	ror	r18
     69a:	07 c0       	rjmp	.+14     	; 0x6aa <gi_putsymbol+0x124>
      else
         bw = (SGUINT)(symsize/ye);
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	40 e0       	ldi	r20, 0x00	; 0
     6a0:	50 e0       	ldi	r21, 0x00	; 0
     6a2:	c6 01       	movw	r24, r12
     6a4:	b5 01       	movw	r22, r10
     6a6:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <__udivmodsi4>
      }

    if (G_IS_TRANSPERANT())
     6aa:	e0 91 ff 0b 	lds	r30, 0x0BFF
     6ae:	f0 91 00 0c 	lds	r31, 0x0C00
     6b2:	84 85       	ldd	r24, Z+12	; 0x0c
     6b4:	95 85       	ldd	r25, Z+13	; 0x0d
     6b6:	99 23       	and	r25, r25
     6b8:	0c f4       	brge	.+2      	; 0x6bc <gi_putsymbol+0x136>
       mode |= GHW_TRANSPERANT;
     6ba:	10 62       	ori	r17, 0x20	; 32
    if (yoffset != 0)
     6bc:	ee 20       	and	r14, r14
     6be:	71 f0       	breq	.+28     	; 0x6dc <gi_putsymbol+0x156>
      {                          /* Only showing lower part of symbol */
      ys += yoffset;
     6c0:	5e 0c       	add	r5, r14
      ye -= yoffset;
     6c2:	8e 2d       	mov	r24, r14
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	c8 1b       	sub	r28, r24
     6c8:	d9 0b       	sbc	r29, r25
      #ifdef GVIRTUAL_FONTS
      if (!gissymbolv(psymbol))
      #endif
         f=&f[bw*yoffset];
     6ca:	28 9f       	mul	r18, r24
     6cc:	a0 01       	movw	r20, r0
     6ce:	29 9f       	mul	r18, r25
     6d0:	50 0d       	add	r21, r0
     6d2:	38 9f       	mul	r19, r24
     6d4:	50 0d       	add	r21, r0
     6d6:	11 24       	eor	r1, r1
     6d8:	64 0e       	add	r6, r20
     6da:	75 1e       	adc	r7, r21
      }

   xe = xe+((SGUINT) xs)-1;
     6dc:	44 2d       	mov	r20, r4
     6de:	50 e0       	ldi	r21, 0x00	; 0
     6e0:	41 50       	subi	r20, 0x01	; 1
     6e2:	51 09       	sbc	r21, r1
     6e4:	84 0e       	add	r8, r20
     6e6:	95 1e       	adc	r9, r21
   ye = ye+((SGUINT) ys)-1;
     6e8:	21 97       	sbiw	r28, 0x01	; 1

   /* truncate at max rect */
   if( xe > ((SGUINT) xemax) )
     6ea:	8f 2d       	mov	r24, r15
     6ec:	90 e0       	ldi	r25, 0x00	; 0
      xe = ((SGUINT) xemax);
   if( ye > ((SGUINT) yemax) )
     6ee:	63 2d       	mov	r22, r3
     6f0:	70 e0       	ldi	r23, 0x00	; 0
      ye = ((SGUINT) yemax);

   glcd_err = 0; /* Reset HW error flag */
     6f2:	10 92 99 0d 	sts	0x0D99, r1
     6f6:	c5 0d       	add	r28, r5
     6f8:	d1 1d       	adc	r29, r1
     6fa:	6c 17       	cp	r22, r28
     6fc:	7d 07       	cpc	r23, r29
     6fe:	08 f4       	brcc	.+2      	; 0x702 <gi_putsymbol+0x17c>
     700:	eb 01       	movw	r28, r22
     702:	a4 01       	movw	r20, r8
     704:	88 15       	cp	r24, r8
     706:	99 05       	cpc	r25, r9
     708:	08 f4       	brcc	.+2      	; 0x70c <gi_putsymbol+0x186>
     70a:	ac 01       	movw	r20, r24

   #ifdef GVIRTUAL_FONTS
   if (gissymbolv(psymbol))
      gi_symv_open( psymbol, bw, yoffset ); /* Preset virtual symbol interface */
   #endif
   ghw_wrsym(xs, ys, (GXT) xe, (GYT) ye, f, bw, mode );
     70c:	c1 2e       	mov	r12, r17
     70e:	79 01       	movw	r14, r18
     710:	83 01       	movw	r16, r6
     712:	2c 2f       	mov	r18, r28
     714:	65 2d       	mov	r22, r5
     716:	84 2d       	mov	r24, r4
     718:	30 d5       	rcall	.+2656   	; 0x117a <ghw_wrsym>
     71a:	04 c0       	rjmp	.+8      	; 0x724 <gi_putsymbol+0x19e>
   SGUINT ye;
   SGUINT bw;
   SGUCHAR mode; /* hw mode flags */
   PGSYMBYTE f;

   xe = (SGUINT) gsymw(psymbol);
     71c:	88 2e       	mov	r8, r24
     71e:	91 2c       	mov	r9, r1
   ye = (SGUINT) gsymh(psymbol);
     720:	21 81       	ldd	r18, Z+1	; 0x01
     722:	4d cf       	rjmp	.-358    	; 0x5be <gi_putsymbol+0x38>
   #ifdef GVIRTUAL_FONTS
   if (gissymbolv(psymbol))
      gi_symv_open( psymbol, bw, yoffset ); /* Preset virtual symbol interface */
   #endif
   ghw_wrsym(xs, ys, (GXT) xe, (GYT) ye, f, bw, mode );
   }
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	1f 91       	pop	r17
     72a:	0f 91       	pop	r16
     72c:	ff 90       	pop	r15
     72e:	ef 90       	pop	r14
     730:	df 90       	pop	r13
     732:	cf 90       	pop	r12
     734:	bf 90       	pop	r11
     736:	af 90       	pop	r10
     738:	9f 90       	pop	r9
     73a:	8f 90       	pop	r8
     73c:	7f 90       	pop	r7
     73e:	6f 90       	pop	r6
     740:	5f 90       	pop	r5
     742:	4f 90       	pop	r4
     744:	3f 90       	pop	r3
     746:	08 95       	ret

00000748 <gi_sizestrseg>:
   Return 3 if more line segments follows (execute a new line caused by wrap or \n)

   When horizontal alignment is enabled the \t and \r is converted to a space
*/
SGUCHAR gi_sizestrseg( PGSTRMARKS sm )
   {
     748:	9f 92       	push	r9
     74a:	af 92       	push	r10
     74c:	bf 92       	push	r11
     74e:	cf 92       	push	r12
     750:	df 92       	push	r13
     752:	ef 92       	push	r14
     754:	ff 92       	push	r15
     756:	0f 93       	push	r16
     758:	1f 93       	push	r17
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	ec 01       	movw	r28, r24
   SGUINT sw; /* symbol width */
   GSTRINGPTR cp,cpsp,cpcstart;
   SGUINT slensp = 0;
   GWCHAR val;
   SGUCHAR first;
   cp.s = sm->cpnext.s;
     760:	0c 81       	ldd	r16, Y+4	; 0x04
     762:	1d 81       	ldd	r17, Y+5	; 0x05
   if (GETCHAR(cp) == 0)
     764:	d8 01       	movw	r26, r16
     766:	8c 91       	ld	r24, X
     768:	88 23       	and	r24, r24
     76a:	09 f4       	brne	.+2      	; 0x76e <gi_sizestrseg+0x26>
     76c:	41 c1       	rjmp	.+642    	; 0x9f0 <gi_sizestrseg+0x2a8>
   #ifdef GMULTIBYTE
   cp.s = sm->cpnext.s;
   #endif

   #ifdef GS_ALIGN  /* Do alignment */
   if (G_IS_ALIGN_HR())
     76e:	a0 91 ff 0b 	lds	r26, 0x0BFF
     772:	b0 91 00 0c 	lds	r27, 0x0C00
     776:	1c 96       	adiw	r26, 0x0c	; 12
     778:	8d 91       	ld	r24, X+
     77a:	9c 91       	ld	r25, X
     77c:	1d 97       	sbiw	r26, 0x0d	; 13
     77e:	9c 01       	movw	r18, r24
     780:	33 27       	eor	r19, r19
     782:	83 ff       	sbrs	r24, 3
     784:	0c c0       	rjmp	.+24     	; 0x79e <gi_sizestrseg+0x56>
     786:	f8 01       	movw	r30, r16
     788:	8f 01       	movw	r16, r30
         {
         #ifdef GMULTIBYTE
         GSTRINGPTR cptmp;
         cptmp = cp;
         #endif
         val = GETCHAR(cp);
     78a:	81 91       	ld	r24, Z+
         if (!((val == ' ') || (val == '\t') || (val == '\r'))) /* leading white ? */
     78c:	80 32       	cpi	r24, 0x20	; 32
     78e:	e1 f3       	breq	.-8      	; 0x788 <gi_sizestrseg+0x40>
     790:	8b 7f       	andi	r24, 0xFB	; 251
     792:	89 30       	cpi	r24, 0x09	; 9
     794:	c9 f3       	breq	.-14     	; 0x788 <gi_sizestrseg+0x40>
            #endif
            break;
            }
         GINCPTR(cp);
         }
      cposx = ltx;  /* cposx should not participate in width evaluation */
     796:	8c 91       	ld	r24, X
     798:	14 96       	adiw	r26, 0x04	; 4
     79a:	8c 93       	st	X, r24
     79c:	0d c0       	rjmp	.+26     	; 0x7b8 <gi_sizestrseg+0x70>
      }
   else
      {
      if (G_IS_ALIGN_LEFT() || G_IS_ALIGN_BOTTOM())
     79e:	c9 01       	movw	r24, r18
     7a0:	8c 70       	andi	r24, 0x0C	; 12
     7a2:	99 27       	eor	r25, r25
     7a4:	04 97       	sbiw	r24, 0x04	; 4
     7a6:	29 f0       	breq	.+10     	; 0x7b2 <gi_sizestrseg+0x6a>
     7a8:	20 73       	andi	r18, 0x30	; 48
     7aa:	33 27       	eor	r19, r19
     7ac:	20 32       	cpi	r18, 0x20	; 32
     7ae:	31 05       	cpc	r19, r1
     7b0:	19 f4       	brne	.+6      	; 0x7b8 <gi_sizestrseg+0x70>
         cposx = ltx;   /* Start at left edge */
     7b2:	8c 91       	ld	r24, X
     7b4:	14 96       	adiw	r26, 0x04	; 4
     7b6:	8c 93       	st	X, r24
      }
   #endif

   sm->cpbeg.s = cp.s;  /* Begin of string */
     7b8:	19 83       	std	Y+1, r17	; 0x01
     7ba:	08 83       	st	Y, r16
   sm->cpend.s = cp.s;
     7bc:	1b 83       	std	Y+3, r17	; 0x03
     7be:	0a 83       	std	Y+2, r16	; 0x02
   cpsp.s  = (PGCSTR)((void*)NULL);    /* No word separator detected */
   sm->slen = 0;        /* Length = 0 */
     7c0:	1f 82       	std	Y+7, r1	; 0x07
     7c2:	1e 82       	std	Y+6, r1	; 0x06

   for(first=1;;first=0)
      {
      cpcstart = cp; /* Mark start of (multibyte) character */
      val = GETCHAR(cp);
     7c4:	f8 01       	movw	r30, r16
     7c6:	80 81       	ld	r24, Z
      if ((val == (GWCHAR) 0) || (val == (GWCHAR) '\n'))
     7c8:	88 23       	and	r24, r24
     7ca:	09 f4       	brne	.+2      	; 0x7ce <gi_sizestrseg+0x86>
     7cc:	b2 c0       	rjmp	.+356    	; 0x932 <gi_sizestrseg+0x1ea>
     7ce:	8a 30       	cpi	r24, 0x0A	; 10
     7d0:	09 f4       	brne	.+2      	; 0x7d4 <gi_sizestrseg+0x8c>
     7d2:	b4 c0       	rjmp	.+360    	; 0x93c <gi_sizestrseg+0x1f4>
      }
   #endif

   sm->cpbeg.s = cp.s;  /* Begin of string */
   sm->cpend.s = cp.s;
   cpsp.s  = (PGCSTR)((void*)NULL);    /* No word separator detected */
     7d4:	e1 2c       	mov	r14, r1
     7d6:	f1 2c       	mov	r15, r1
   sm->slen = 0;        /* Length = 0 */

   for(first=1;;first=0)
     7d8:	21 e0       	ldi	r18, 0x01	; 1
*/
SGUCHAR gi_sizestrseg( PGSTRMARKS sm )
   {
   SGUINT sw; /* symbol width */
   GSTRINGPTR cp,cpsp,cpcstart;
   SGUINT slensp = 0;
     7da:	c1 2c       	mov	r12, r1
     7dc:	b1 2c       	mov	r11, r1
         break;
         }
      #ifdef GSOFT_FONTS
      if (G_IS_PARTIAL_CHAR())
         {
         if ((sm->slen+cposx+(G_IS_ALIGN_RIGHT() ? sw-1 : 0)) > rbx)
     7de:	91 2c       	mov	r9, r1
     7e0:	a1 2c       	mov	r10, r1
   sm->cpbeg.s = cp.s;  /* Begin of string */
   sm->cpend.s = cp.s;
   cpsp.s  = (PGCSTR)((void*)NULL);    /* No word separator detected */
   sm->slen = 0;        /* Length = 0 */

   for(first=1;;first=0)
     7e2:	d1 2c       	mov	r13, r1
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <gi_sizestrseg+0xa6>
      {
      cpcstart = cp; /* Mark start of (multibyte) character */
      val = GETCHAR(cp);
      if ((val == (GWCHAR) 0) || (val == (GWCHAR) '\n'))
     7e6:	8a 30       	cpi	r24, 0x0A	; 10
     7e8:	09 f4       	brne	.+2      	; 0x7ec <gi_sizestrseg+0xa4>
     7ea:	ac c0       	rjmp	.+344    	; 0x944 <gi_sizestrseg+0x1fc>
   sm->cpbeg.s = cp.s;  /* Begin of string */
   sm->cpend.s = cp.s;
   cpsp.s  = (PGCSTR)((void*)NULL);    /* No word separator detected */
   sm->slen = 0;        /* Length = 0 */

   for(first=1;;first=0)
     7ec:	2d 2d       	mov	r18, r13
      cpcstart = cp; /* Mark start of (multibyte) character */
      val = GETCHAR(cp);
      if ((val == (GWCHAR) 0) || (val == (GWCHAR) '\n'))
         break;  /* End of line segment reached */

      if (val == (GWCHAR)'\r')
     7ee:	8d 30       	cpi	r24, 0x0D	; 13
     7f0:	81 f4       	brne	.+32     	; 0x812 <gi_sizestrseg+0xca>
         {
         #ifdef GS_ALIGN  /* Do alignment */
         if (G_IS_ALIGN_H())
     7f2:	e0 91 ff 0b 	lds	r30, 0x0BFF
     7f6:	f0 91 00 0c 	lds	r31, 0x0C00
     7fa:	84 85       	ldd	r24, Z+12	; 0x0c
     7fc:	95 85       	ldd	r25, Z+13	; 0x0d
     7fe:	8c 70       	andi	r24, 0x0C	; 12
     800:	99 27       	eor	r25, r25
     802:	89 2b       	or	r24, r25
     804:	49 f5       	brne	.+82     	; 0x858 <gi_sizestrseg+0x110>
            goto process_space;
            }
         else
         #endif
            {
            if (first)  /* Process \r only as first character */
     806:	22 23       	and	r18, r18
     808:	09 f4       	brne	.+2      	; 0x80c <gi_sizestrseg+0xc4>
     80a:	9c c0       	rjmp	.+312    	; 0x944 <gi_sizestrseg+0x1fc>
               {
               cposx = ltx;
     80c:	80 81       	ld	r24, Z
     80e:	84 83       	std	Z+4, r24	; 0x04
               goto skipchar;
     810:	87 c0       	rjmp	.+270    	; 0x920 <gi_sizestrseg+0x1d8>
               }
            break;  /* \r end of line segment */
            }
         }

      if (val == '\t')
     812:	89 30       	cpi	r24, 0x09	; 9
     814:	f1 f4       	brne	.+60     	; 0x852 <gi_sizestrseg+0x10a>
         { /* Tabulator is handled as a single variable width symbol */
         #ifdef GS_ALIGN  /* Do alignment */
         if (G_IS_ALIGN_H())
     816:	e0 91 ff 0b 	lds	r30, 0x0BFF
     81a:	f0 91 00 0c 	lds	r31, 0x0C00
     81e:	84 85       	ldd	r24, Z+12	; 0x0c
     820:	95 85       	ldd	r25, Z+13	; 0x0d
     822:	8c 70       	andi	r24, 0x0C	; 12
     824:	99 27       	eor	r25, r25
     826:	89 2b       	or	r24, r25
     828:	c9 f4       	brne	.+50     	; 0x85c <gi_sizestrseg+0x114>
            {
            val = (GWCHAR)' ';  /* process \t as space in horizontal alignment modes */
            goto process_space;
            }
         #endif
         cpsp.s = sm->cpend.s;      /* Mark word boundary at previous (or first character) */
     82a:	ea 80       	ldd	r14, Y+2	; 0x02
     82c:	fb 80       	ldd	r15, Y+3	; 0x03
         slensp = sm->slen;
     82e:	ce 80       	ldd	r12, Y+6	; 0x06
     830:	bf 80       	ldd	r11, Y+7	; 0x07
         sw = gi_tabstep((GXT)(cposx+sm->slen))-cposx; /* Viewport tab position in viewport */
     832:	84 81       	ldd	r24, Z+4	; 0x04
     834:	8c 0d       	add	r24, r12
     836:	f1 dc       	rcall	.-1566   	; 0x21a <gi_tabstep>
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	e0 91 ff 0b 	lds	r30, 0x0BFF
     83e:	f0 91 00 0c 	lds	r31, 0x0C00
     842:	24 81       	ldd	r18, Z+4	; 0x04
     844:	82 1b       	sub	r24, r18
     846:	91 09       	sbc	r25, r1
         sw -= sm->slen;            /* Virtual tab character width */
     848:	2e 81       	ldd	r18, Y+6	; 0x06
     84a:	3f 81       	ldd	r19, Y+7	; 0x07
     84c:	82 1b       	sub	r24, r18
     84e:	93 0b       	sbc	r25, r19
     850:	0c c0       	rjmp	.+24     	; 0x86a <gi_sizestrseg+0x122>
         }
      else
         {
         if (val == ' ')
     852:	80 32       	cpi	r24, 0x20	; 32
     854:	41 f4       	brne	.+16     	; 0x866 <gi_sizestrseg+0x11e>
     856:	03 c0       	rjmp	.+6      	; 0x85e <gi_sizestrseg+0x116>
      if (val == (GWCHAR)'\r')
         {
         #ifdef GS_ALIGN  /* Do alignment */
         if (G_IS_ALIGN_H())
            {
            val = (GWCHAR)' ';  /* Process \r as space in horizontal alignment modes */
     858:	80 e2       	ldi	r24, 0x20	; 32
     85a:	01 c0       	rjmp	.+2      	; 0x85e <gi_sizestrseg+0x116>
      if (val == '\t')
         { /* Tabulator is handled as a single variable width symbol */
         #ifdef GS_ALIGN  /* Do alignment */
         if (G_IS_ALIGN_H())
            {
            val = (GWCHAR)' ';  /* process \t as space in horizontal alignment modes */
     85c:	80 e2       	ldi	r24, 0x20	; 32
         if (val == ' ')
            {
            #ifdef GS_ALIGN  /* Do alignment */
            process_space:
            #endif
            cpsp.s = sm->cpend.s;      /* Mark word boundary at previous (or first) character */
     85e:	ea 80       	ldd	r14, Y+2	; 0x02
     860:	fb 80       	ldd	r15, Y+3	; 0x03
            slensp = sm->slen;
     862:	ce 80       	ldd	r12, Y+6	; 0x06
     864:	bf 80       	ldd	r11, Y+7	; 0x07
            }

         /* Get width of (multibyte) character */
         sw = ggetsymw(val);       /* = GDISPCW ifndef GGSOFT_FONT */
     866:	73 de       	rcall	.-794    	; 0x54e <gi_getsymw>
     868:	90 e0       	ldi	r25, 0x00	; 0
         }

      if (sw >= (rbx-ltx+1))
     86a:	e0 91 ff 0b 	lds	r30, 0x0BFF
     86e:	f0 91 00 0c 	lds	r31, 0x0C00
     872:	62 81       	ldd	r22, Z+2	; 0x02
     874:	26 2f       	mov	r18, r22
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	40 81       	ld	r20, Z
     87a:	24 1b       	sub	r18, r20
     87c:	31 09       	sbc	r19, r1
     87e:	a9 01       	movw	r20, r18
     880:	4f 5f       	subi	r20, 0xFF	; 255
     882:	5f 4f       	sbci	r21, 0xFF	; 255
     884:	84 17       	cp	r24, r20
     886:	95 07       	cpc	r25, r21
     888:	28 f0       	brcs	.+10     	; 0x894 <gi_sizestrseg+0x14c>
         {                         /* (first) symbol larger than viewport */
         sm->slen = ((SGUINT)(rbx-ltx)+1);   /* Limit size (for calculations) to within viewport */
     88a:	5f 83       	std	Y+7, r21	; 0x07
     88c:	4e 83       	std	Y+6, r20	; 0x06
         GINCPTR(cp);              /* Point to next character */
     88e:	0f 5f       	subi	r16, 0xFF	; 255
     890:	1f 4f       	sbci	r17, 0xFF	; 255
         cpcstart = cp;            /* Mark start of (multibyte) character */
         break;
     892:	58 c0       	rjmp	.+176    	; 0x944 <gi_sizestrseg+0x1fc>
         }
      #ifdef GSOFT_FONTS
      if (G_IS_PARTIAL_CHAR())
     894:	24 85       	ldd	r18, Z+12	; 0x0c
     896:	35 85       	ldd	r19, Z+13	; 0x0d
     898:	31 ff       	sbrs	r19, 1
     89a:	17 c0       	rjmp	.+46     	; 0x8ca <gi_sizestrseg+0x182>
         {
         if ((sm->slen+cposx+(G_IS_ALIGN_RIGHT() ? sw-1 : 0)) > rbx)
     89c:	74 81       	ldd	r23, Z+4	; 0x04
     89e:	4e 81       	ldd	r20, Y+6	; 0x06
     8a0:	5f 81       	ldd	r21, Y+7	; 0x07
     8a2:	47 0f       	add	r20, r23
     8a4:	51 1d       	adc	r21, r1
     8a6:	2c 70       	andi	r18, 0x0C	; 12
     8a8:	33 27       	eor	r19, r19
     8aa:	28 30       	cpi	r18, 0x08	; 8
     8ac:	31 05       	cpc	r19, r1
     8ae:	21 f4       	brne	.+8      	; 0x8b8 <gi_sizestrseg+0x170>
     8b0:	9c 01       	movw	r18, r24
     8b2:	21 50       	subi	r18, 0x01	; 1
     8b4:	31 09       	sbc	r19, r1
     8b6:	02 c0       	rjmp	.+4      	; 0x8bc <gi_sizestrseg+0x174>
     8b8:	29 2d       	mov	r18, r9
     8ba:	3a 2d       	mov	r19, r10
     8bc:	42 0f       	add	r20, r18
     8be:	53 1f       	adc	r21, r19
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	64 17       	cp	r22, r20
     8c4:	75 07       	cpc	r23, r21
     8c6:	30 f5       	brcc	.+76     	; 0x914 <gi_sizestrseg+0x1cc>
     8c8:	3d c0       	rjmp	.+122    	; 0x944 <gi_sizestrseg+0x1fc>
      #endif
         {
         #ifndef GNOTXTSPACE
         if (((sm->slen+sw)-1)+cposx+chlnx > rbx)
         #else
         if (((sm->slen+sw)-1)+cposx > rbx)
     8ca:	4e 81       	ldd	r20, Y+6	; 0x06
     8cc:	5f 81       	ldd	r21, Y+7	; 0x07
     8ce:	41 50       	subi	r20, 0x01	; 1
     8d0:	51 09       	sbc	r21, r1
     8d2:	74 81       	ldd	r23, Z+4	; 0x04
     8d4:	47 0f       	add	r20, r23
     8d6:	51 1d       	adc	r21, r1
     8d8:	48 0f       	add	r20, r24
     8da:	59 1f       	adc	r21, r25
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	64 17       	cp	r22, r20
     8e0:	75 07       	cpc	r23, r21
     8e2:	c0 f4       	brcc	.+48     	; 0x914 <gi_sizestrseg+0x1cc>
     8e4:	8c 2d       	mov	r24, r12
     8e6:	9b 2d       	mov	r25, r11
         #endif
            {
            /* Word exceeds viewport */
            if ((cpsp.s != NULL) && G_IS_WORDWRAP())
     8e8:	e1 14       	cp	r14, r1
     8ea:	f1 04       	cpc	r15, r1
     8ec:	59 f1       	breq	.+86     	; 0x944 <gi_sizestrseg+0x1fc>
     8ee:	20 7c       	andi	r18, 0xC0	; 192
     8f0:	33 27       	eor	r19, r19
     8f2:	20 34       	cpi	r18, 0x40	; 64
     8f4:	31 05       	cpc	r19, r1
     8f6:	31 f5       	brne	.+76     	; 0x944 <gi_sizestrseg+0x1fc>
               {
               /* Break word at previous word boundary */
               sm->cpend.s = cpsp.s;
     8f8:	fb 82       	std	Y+3, r15	; 0x03
     8fa:	ea 82       	std	Y+2, r14	; 0x02
               sm->slen = slensp;
     8fc:	9f 83       	std	Y+7, r25	; 0x07
     8fe:	8e 83       	std	Y+6, r24	; 0x06
               cp.s = cpsp.s;
               if (slensp > 0)
     900:	89 2b       	or	r24, r25
     902:	21 f0       	breq	.+8      	; 0x90c <gi_sizestrseg+0x1c4>
                  GINCPTR(cp); /* Move point to word separator (if there is a word before word separator) */
     904:	87 01       	movw	r16, r14
     906:	0f 5f       	subi	r16, 0xFF	; 255
     908:	1f 4f       	sbci	r17, 0xFF	; 255
     90a:	01 c0       	rjmp	.+2      	; 0x90e <gi_sizestrseg+0x1c6>
     90c:	87 01       	movw	r16, r14
               GINCPTR(cp);    /* Move point to character after word separator */
     90e:	0f 5f       	subi	r16, 0xFF	; 255
     910:	1f 4f       	sbci	r17, 0xFF	; 255
     912:	18 c0       	rjmp	.+48     	; 0x944 <gi_sizestrseg+0x1fc>

            /* else Break word at character boundary */
            break;
            }
         }
      sm->slen+=sw;
     914:	2e 81       	ldd	r18, Y+6	; 0x06
     916:	3f 81       	ldd	r19, Y+7	; 0x07
     918:	82 0f       	add	r24, r18
     91a:	93 1f       	adc	r25, r19
     91c:	9f 83       	std	Y+7, r25	; 0x07
     91e:	8e 83       	std	Y+6, r24	; 0x06
         sm->slen+=chlnx; /* Add extra inter character space */
      #endif

      skipchar:

      sm->cpend.s = cp.s;
     920:	1b 83       	std	Y+3, r17	; 0x03
     922:	0a 83       	std	Y+2, r16	; 0x02
      GINCPTR(cp); /* Move point to character after word separator */
     924:	0f 5f       	subi	r16, 0xFF	; 255
     926:	1f 4f       	sbci	r17, 0xFF	; 255
   sm->slen = 0;        /* Length = 0 */

   for(first=1;;first=0)
      {
      cpcstart = cp; /* Mark start of (multibyte) character */
      val = GETCHAR(cp);
     928:	d8 01       	movw	r26, r16
     92a:	8c 91       	ld	r24, X
      if ((val == (GWCHAR) 0) || (val == (GWCHAR) '\n'))
     92c:	81 11       	cpse	r24, r1
     92e:	5b cf       	rjmp	.-330    	; 0x7e6 <gi_sizestrseg+0x9e>
     930:	09 c0       	rjmp	.+18     	; 0x944 <gi_sizestrseg+0x1fc>
      }
   #endif

   sm->cpbeg.s = cp.s;  /* Begin of string */
   sm->cpend.s = cp.s;
   cpsp.s  = (PGCSTR)((void*)NULL);    /* No word separator detected */
     932:	e1 2c       	mov	r14, r1
     934:	f1 2c       	mov	r15, r1
*/
SGUCHAR gi_sizestrseg( PGSTRMARKS sm )
   {
   SGUINT sw; /* symbol width */
   GSTRINGPTR cp,cpsp,cpcstart;
   SGUINT slensp = 0;
     936:	c1 2c       	mov	r12, r1
     938:	b1 2c       	mov	r11, r1
     93a:	04 c0       	rjmp	.+8      	; 0x944 <gi_sizestrseg+0x1fc>
      }
   #endif

   sm->cpbeg.s = cp.s;  /* Begin of string */
   sm->cpend.s = cp.s;
   cpsp.s  = (PGCSTR)((void*)NULL);    /* No word separator detected */
     93c:	e1 2c       	mov	r14, r1
     93e:	f1 2c       	mov	r15, r1
*/
SGUCHAR gi_sizestrseg( PGSTRMARKS sm )
   {
   SGUINT sw; /* symbol width */
   GSTRINGPTR cp,cpsp,cpcstart;
   SGUINT slensp = 0;
     940:	c1 2c       	mov	r12, r1
     942:	b1 2c       	mov	r11, r1
      GINCPTR(cp); /* Move point to character after word separator */
      cpcstart = cp; /* Mark start of (multibyte) character */
      }

   /* Set next character */
   sm->cpnext = cpcstart;  /* Set start of (multibyte) character
     944:	1d 83       	std	Y+5, r17	; 0x05
     946:	0c 83       	std	Y+4, r16	; 0x04
   (for rewind if the current character is not used due to wrapping ) */
   if (GETCTRLCHAR(sm->cpbeg) == 0)
     948:	e8 81       	ld	r30, Y
     94a:	f9 81       	ldd	r31, Y+1	; 0x01
     94c:	80 81       	ld	r24, Z
     94e:	88 23       	and	r24, r24
     950:	09 f4       	brne	.+2      	; 0x954 <gi_sizestrseg+0x20c>
     952:	50 c0       	rjmp	.+160    	; 0x9f4 <gi_sizestrseg+0x2ac>
      return 0;  /* Empty line segment */

   if ((GETCTRLCHAR(sm->cpnext) != 0)
     954:	d8 01       	movw	r26, r16
     956:	8c 91       	ld	r24, X
     958:	81 11       	cpse	r24, r1
     95a:	0c c0       	rjmp	.+24     	; 0x974 <gi_sizestrseg+0x22c>
       #ifdef GS_ALIGN  /* Do alignment */
       || G_IS_ALIGN_H_CENTER()
     95c:	a0 91 ff 0b 	lds	r26, 0x0BFF
     960:	b0 91 00 0c 	lds	r27, 0x0C00
     964:	1c 96       	adiw	r26, 0x0c	; 12
     966:	8d 91       	ld	r24, X+
     968:	9c 91       	ld	r25, X
     96a:	1d 97       	sbiw	r26, 0x0d	; 13
     96c:	8c 70       	andi	r24, 0x0C	; 12
     96e:	99 27       	eor	r25, r25
     970:	0c 97       	sbiw	r24, 0x0c	; 12
     972:	89 f4       	brne	.+34     	; 0x996 <gi_sizestrseg+0x24e>
       #endif
       )
      {
      /* skip trailing whites from line segment */
      val = GETCTRLCHAR(sm->cpend);
     974:	aa 81       	ldd	r26, Y+2	; 0x02
     976:	bb 81       	ldd	r27, Y+3	; 0x03
     978:	8c 91       	ld	r24, X
      if (((val == ' ') || (val == '\t')) &&
     97a:	80 32       	cpi	r24, 0x20	; 32
     97c:	11 f0       	breq	.+4      	; 0x982 <gi_sizestrseg+0x23a>
     97e:	89 30       	cpi	r24, 0x09	; 9
     980:	51 f4       	brne	.+20     	; 0x996 <gi_sizestrseg+0x24e>
     982:	ea 17       	cp	r30, r26
     984:	fb 07       	cpc	r31, r27
     986:	39 f0       	breq	.+14     	; 0x996 <gi_sizestrseg+0x24e>
           (sm->cpend.s != sm->cpbeg.s) && (cpsp.s != NULL))
     988:	e1 14       	cp	r14, r1
     98a:	f1 04       	cpc	r15, r1
     98c:	21 f0       	breq	.+8      	; 0x996 <gi_sizestrseg+0x24e>
         {
         sm->cpend.s = cpsp.s;
     98e:	fb 82       	std	Y+3, r15	; 0x03
     990:	ea 82       	std	Y+2, r14	; 0x02
         sm->slen = slensp;
     992:	ce 82       	std	Y+6, r12	; 0x06
     994:	bf 82       	std	Y+7, r11	; 0x07
         }
      }

   for (;;)
      {
      val = GETCTRLCHAR(sm->cpnext);
     996:	4c 81       	ldd	r20, Y+4	; 0x04
     998:	5d 81       	ldd	r21, Y+5	; 0x05
     99a:	fa 01       	movw	r30, r20
     99c:	20 81       	ld	r18, Z
      if (!G_IS_NOWRAP())
     99e:	80 91 ff 0b 	lds	r24, 0x0BFF
     9a2:	90 91 00 0c 	lds	r25, 0x0C00
     9a6:	dc 01       	movw	r26, r24
     9a8:	1c 96       	adiw	r26, 0x0c	; 12
     9aa:	3c 91       	ld	r19, X
     9ac:	33 23       	and	r19, r19
     9ae:	9c f4       	brge	.+38     	; 0x9d6 <gi_sizestrseg+0x28e>
         break;
      /* Linecut is active, skip to end of line or end of string */
      if ((val == 0) || (val == '\n'))
     9b0:	22 23       	and	r18, r18
     9b2:	41 f1       	breq	.+80     	; 0xa04 <gi_sizestrseg+0x2bc>
     9b4:	2a 30       	cpi	r18, 0x0A	; 10
     9b6:	99 f0       	breq	.+38     	; 0x9de <gi_sizestrseg+0x296>
     9b8:	31 96       	adiw	r30, 0x01	; 1
     9ba:	04 c0       	rjmp	.+8      	; 0x9c4 <gi_sizestrseg+0x27c>
     9bc:	22 23       	and	r18, r18
     9be:	11 f1       	breq	.+68     	; 0xa04 <gi_sizestrseg+0x2bc>
     9c0:	2a 30       	cpi	r18, 0x0A	; 10
     9c2:	69 f0       	breq	.+26     	; 0x9de <gi_sizestrseg+0x296>
         break;
      GINCPTR(sm->cpnext);
     9c4:	af 01       	movw	r20, r30
     9c6:	fd 83       	std	Y+5, r31	; 0x05
     9c8:	ec 83       	std	Y+4, r30	; 0x04
         }
      }

   for (;;)
      {
      val = GETCTRLCHAR(sm->cpnext);
     9ca:	21 91       	ld	r18, Z+
      if (!G_IS_NOWRAP())
     9cc:	dc 01       	movw	r26, r24
     9ce:	1c 96       	adiw	r26, 0x0c	; 12
     9d0:	3c 91       	ld	r19, X
     9d2:	33 23       	and	r19, r19
     9d4:	9c f3       	brlt	.-26     	; 0x9bc <gi_sizestrseg+0x274>
      if ((val == 0) || (val == '\n'))
         break;
      GINCPTR(sm->cpnext);
      }

   if (val == 0)
     9d6:	22 23       	and	r18, r18
     9d8:	79 f0       	breq	.+30     	; 0x9f8 <gi_sizestrseg+0x2b0>
      return 1;
   if (val == '\r')
     9da:	2d 30       	cpi	r18, 0x0D	; 13
     9dc:	79 f0       	breq	.+30     	; 0x9fc <gi_sizestrseg+0x2b4>
      return 2;
   if ((val == '\n') || (val == '\t'))
     9de:	29 50       	subi	r18, 0x09	; 9
     9e0:	22 30       	cpi	r18, 0x02	; 2
     9e2:	70 f4       	brcc	.+28     	; 0xa00 <gi_sizestrseg+0x2b8>
      GINCPTR(sm->cpnext);
     9e4:	da 01       	movw	r26, r20
     9e6:	11 96       	adiw	r26, 0x01	; 1
     9e8:	bd 83       	std	Y+5, r27	; 0x05
     9ea:	ac 83       	std	Y+4, r26	; 0x04
   return 3;
     9ec:	83 e0       	ldi	r24, 0x03	; 3
     9ee:	0b c0       	rjmp	.+22     	; 0xa06 <gi_sizestrseg+0x2be>
   SGUINT slensp = 0;
   GWCHAR val;
   SGUCHAR first;
   cp.s = sm->cpnext.s;
   if (GETCHAR(cp) == 0)
      return 0;       /* fast skip of last string segment */
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	09 c0       	rjmp	.+18     	; 0xa06 <gi_sizestrseg+0x2be>

   /* Set next character */
   sm->cpnext = cpcstart;  /* Set start of (multibyte) character
   (for rewind if the current character is not used due to wrapping ) */
   if (GETCTRLCHAR(sm->cpbeg) == 0)
      return 0;  /* Empty line segment */
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	07 c0       	rjmp	.+14     	; 0xa06 <gi_sizestrseg+0x2be>
         break;
      GINCPTR(sm->cpnext);
      }

   if (val == 0)
      return 1;
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	05 c0       	rjmp	.+10     	; 0xa06 <gi_sizestrseg+0x2be>
   if (val == '\r')
      return 2;
     9fc:	82 e0       	ldi	r24, 0x02	; 2
     9fe:	03 c0       	rjmp	.+6      	; 0xa06 <gi_sizestrseg+0x2be>
   if ((val == '\n') || (val == '\t'))
      GINCPTR(sm->cpnext);
   return 3;
     a00:	83 e0       	ldi	r24, 0x03	; 3
     a02:	01 c0       	rjmp	.+2      	; 0xa06 <gi_sizestrseg+0x2be>
         break;
      GINCPTR(sm->cpnext);
      }

   if (val == 0)
      return 1;
     a04:	81 e0       	ldi	r24, 0x01	; 1
   if (val == '\r')
      return 2;
   if ((val == '\n') || (val == '\t'))
      GINCPTR(sm->cpnext);
   return 3;
   }
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	1f 91       	pop	r17
     a0c:	0f 91       	pop	r16
     a0e:	ff 90       	pop	r15
     a10:	ef 90       	pop	r14
     a12:	df 90       	pop	r13
     a14:	cf 90       	pop	r12
     a16:	bf 90       	pop	r11
     a18:	af 90       	pop	r10
     a1a:	9f 90       	pop	r9
     a1c:	08 95       	ret

00000a1e <gputs>:
   gi_put_complete();
   }


void gputs( PGCSTR str )
   {
     a1e:	8f 92       	push	r8
     a20:	9f 92       	push	r9
     a22:	bf 92       	push	r11
     a24:	cf 92       	push	r12
     a26:	df 92       	push	r13
     a28:	ef 92       	push	r14
     a2a:	ff 92       	push	r15
     a2c:	0f 93       	push	r16
     a2e:	1f 93       	push	r17
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	cd b7       	in	r28, 0x3d	; 61
     a36:	de b7       	in	r29, 0x3e	; 62
     a38:	28 97       	sbiw	r28, 0x08	; 8
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	f8 94       	cli
     a3e:	de bf       	out	0x3e, r29	; 62
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	cd bf       	out	0x3d, r28	; 61
   GSTRMARKS sm;
   sm.cpnext.s = str;
     a44:	9e 83       	std	Y+6, r25	; 0x06
     a46:	8d 83       	std	Y+5, r24	; 0x05
   SGUCHAR ln;
   GYT fh;
   GYT vph;
   SGBOOL transmode;

   if( sm->cpnext.s == NULL )
     a48:	89 2b       	or	r24, r25
     a4a:	09 f4       	brne	.+2      	; 0xa4e <gputs+0x30>
     a4c:	ce c1       	rjmp	.+924    	; 0xdea <gputs+0x3cc>
      return;

   gi_put_prepare();
     a4e:	c2 db       	rcall	.-2172   	; 0x1d4 <gi_put_prepare>
   fh = gfgetfh( gcurvp->pfont );
     a50:	e0 91 ff 0b 	lds	r30, 0x0BFF
     a54:	f0 91 00 0c 	lds	r31, 0x0C00
     a58:	82 85       	ldd	r24, Z+10	; 0x0a
     a5a:	93 85       	ldd	r25, Z+11	; 0x0b
     a5c:	65 db       	rcall	.-2358   	; 0x128 <gfgetfh>
     a5e:	c8 2e       	mov	r12, r24
   vph = (rby-lty)+1;
     a60:	e0 91 ff 0b 	lds	r30, 0x0BFF
     a64:	f0 91 00 0c 	lds	r31, 0x0C00
     a68:	81 81       	ldd	r24, Z+1	; 0x01
     a6a:	13 81       	ldd	r17, Z+3	; 0x03
     a6c:	1f 5f       	subi	r17, 0xFF	; 255
     a6e:	18 1b       	sub	r17, r24
   transmode = (G_IS_TRANSPERANT() && !G_IS_INVERSE()) ? 1 : 0;
     a70:	24 85       	ldd	r18, Z+12	; 0x0c
     a72:	35 85       	ldd	r19, Z+13	; 0x0d
     a74:	33 23       	and	r19, r19
     a76:	2c f4       	brge	.+10     	; 0xa82 <gputs+0x64>
     a78:	91 e0       	ldi	r25, 0x01	; 1
     a7a:	20 fd       	sbrc	r18, 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	b9 2e       	mov	r11, r25
     a80:	01 c0       	rjmp	.+2      	; 0xa84 <gputs+0x66>
     a82:	b1 2c       	mov	r11, r1

   if (gi_fullheightline && (vph < fh))
     a84:	90 91 fe 0b 	lds	r25, 0x0BFE
     a88:	99 23       	and	r25, r25
     a8a:	19 f0       	breq	.+6      	; 0xa92 <gputs+0x74>
     a8c:	1c 15       	cp	r17, r12
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <gputs+0x74>
     a90:	ac c1       	rjmp	.+856    	; 0xdea <gputs+0x3cc>
     a92:	a9 01       	movw	r20, r18
     a94:	55 27       	eor	r21, r21
      G_WARNING( "gputch: Viewport height too small for character" );
      return; /* Viewport too small for font, skip output */
      }

   #ifdef GS_ALIGN  /* Do alignment */
   if (G_IS_ALIGN_V_CENTER() || G_IS_ALIGN_BOTTOM())
     a96:	25 ff       	sbrs	r18, 5
     a98:	83 c0       	rjmp	.+262    	; 0xba0 <gputs+0x182>
      GYT linespaces;
      #endif
      GXT cposxtmp;
      GSTRINGPTR cp;

      for(lines = 0, cposxtmp = cposx, cp.s = sm->cpnext.s;;)
     a9a:	04 81       	ldd	r16, Z+4	; 0x04
     a9c:	8d 80       	ldd	r8, Y+5	; 0x05
     a9e:	9e 80       	ldd	r9, Y+6	; 0x06
     aa0:	e1 2c       	mov	r14, r1
     aa2:	f1 2c       	mov	r15, r1
         {
         if ((ln = gi_sizestrseg(sm)) <= 1)
     aa4:	ce 01       	movw	r24, r28
     aa6:	01 96       	adiw	r24, 0x01	; 1
     aa8:	4f de       	rcall	.-866    	; 0x748 <gi_sizestrseg>
     aaa:	82 30       	cpi	r24, 0x02	; 2
     aac:	30 f4       	brcc	.+12     	; 0xaba <gputs+0x9c>
            {
            if (ln == 1)
     aae:	81 30       	cpi	r24, 0x01	; 1
     ab0:	81 f4       	brne	.+32     	; 0xad2 <gputs+0xb4>
               lines += 1; /* single line */
     ab2:	8f ef       	ldi	r24, 0xFF	; 255
     ab4:	e8 1a       	sub	r14, r24
     ab6:	f8 0a       	sbc	r15, r24
     ab8:	0c c0       	rjmp	.+24     	; 0xad2 <gputs+0xb4>
            /* else empty line detected */
            break;
            }
         /* Multiline string detected (optionally caused by character or word wrapping) */
         /* Find total number of lines for prescroll or vertical alignment */
         if (ln == 3)
     aba:	83 30       	cpi	r24, 0x03	; 3
     abc:	19 f4       	brne	.+6      	; 0xac4 <gputs+0xa6>
            lines += 1;  /* \n or line wrap (else \r) */
     abe:	8f ef       	ldi	r24, 0xFF	; 255
     ac0:	e8 1a       	sub	r14, r24
     ac2:	f8 0a       	sbc	r15, r24
         cposx = ltx;
     ac4:	e0 91 ff 0b 	lds	r30, 0x0BFF
     ac8:	f0 91 00 0c 	lds	r31, 0x0C00
     acc:	80 81       	ld	r24, Z
     ace:	84 83       	std	Z+4, r24	; 0x04
     ad0:	e9 cf       	rjmp	.-46     	; 0xaa4 <gputs+0x86>
         }

      /* Restore start position after size calculation */
      sm->cpnext.s = cp.s;
     ad2:	9e 82       	std	Y+6, r9	; 0x06
     ad4:	8d 82       	std	Y+5, r8	; 0x05
      cposx = cposxtmp;
     ad6:	e0 91 ff 0b 	lds	r30, 0x0BFF
     ada:	f0 91 00 0c 	lds	r31, 0x0C00
     ade:	04 83       	std	Z+4, r16	; 0x04
     ae0:	84 85       	ldd	r24, Z+12	; 0x0c
     ae2:	95 85       	ldd	r25, Z+13	; 0x0d
      #ifndef GNOTXTSPACE
       /* extra line space is only used in between wrapping lines */
      linespaces = (lines > 1) ? chlny*(lines-1) : 0;
      #endif

      if (G_IS_ALIGN_V_CENTER())
     ae4:	80 73       	andi	r24, 0x30	; 48
     ae6:	99 27       	eor	r25, r25
     ae8:	c0 97       	sbiw	r24, 0x30	; 48
     aea:	b9 f4       	brne	.+46     	; 0xb1a <gputs+0xfc>
         {
         cposy = fh-1 + lty; /* Overflow, align to top */
     aec:	41 81       	ldd	r20, Z+1	; 0x01
     aee:	41 50       	subi	r20, 0x01	; 1
     af0:	4c 0d       	add	r20, r12
         #ifndef GNOTXTSPACE
         if ((SGUINT)fh*lines + linespaces < (SGUINT)vph)
            cposy += (vph-(fh*lines+linespaces))/2; /* Center lines */
         #else
         if ((SGUINT)fh*lines < (SGUINT)vph)
     af2:	ce 9c       	mul	r12, r14
     af4:	90 01       	movw	r18, r0
     af6:	cf 9c       	mul	r12, r15
     af8:	30 0d       	add	r19, r0
     afa:	11 24       	eor	r1, r1
     afc:	81 2f       	mov	r24, r17
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	28 17       	cp	r18, r24
     b02:	39 07       	cpc	r19, r25
     b04:	10 f0       	brcs	.+4      	; 0xb0a <gputs+0xec>
      linespaces = (lines > 1) ? chlny*(lines-1) : 0;
      #endif

      if (G_IS_ALIGN_V_CENTER())
         {
         cposy = fh-1 + lty; /* Overflow, align to top */
     b06:	45 83       	std	Z+5, r20	; 0x05
     b08:	53 c0       	rjmp	.+166    	; 0xbb0 <gputs+0x192>
         #ifndef GNOTXTSPACE
         if ((SGUINT)fh*lines + linespaces < (SGUINT)vph)
            cposy += (vph-(fh*lines+linespaces))/2; /* Center lines */
         #else
         if ((SGUINT)fh*lines < (SGUINT)vph)
            cposy += (GYT)(vph-(fh*lines))/2;            /* Center lines */
     b0a:	81 2f       	mov	r24, r17
     b0c:	ce 9c       	mul	r12, r14
     b0e:	80 19       	sub	r24, r0
     b10:	11 24       	eor	r1, r1
     b12:	86 95       	lsr	r24
     b14:	48 0f       	add	r20, r24
     b16:	45 83       	std	Z+5, r20	; 0x05
     b18:	4b c0       	rjmp	.+150    	; 0xbb0 <gputs+0x192>
               }
            }
         else
            cposy = rby-(fh+chlny)*(lines-1);
         #else
         if ((SGUINT)fh*lines > (SGUINT)vph)
     b1a:	2c 2d       	mov	r18, r12
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	81 2e       	mov	r8, r17
     b20:	91 2c       	mov	r9, r1
     b22:	e2 9e       	mul	r14, r18
     b24:	c0 01       	movw	r24, r0
     b26:	e3 9e       	mul	r14, r19
     b28:	90 0d       	add	r25, r0
     b2a:	f2 9e       	mul	r15, r18
     b2c:	90 0d       	add	r25, r0
     b2e:	11 24       	eor	r1, r1
     b30:	88 16       	cp	r8, r24
     b32:	99 06       	cpc	r9, r25
     b34:	60 f5       	brcc	.+88     	; 0xb8e <gputs+0x170>
            {
            /* Some lines are skipped or cut */
            cposy = lty+((vph-1)%fh);       /* Set top (partial) line pos */
     b36:	c4 01       	movw	r24, r8
     b38:	01 97       	sbiw	r24, 0x01	; 1
     b3a:	b9 01       	movw	r22, r18
     b3c:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__divmodhi4>
     b40:	41 81       	ldd	r20, Z+1	; 0x01
     b42:	48 0f       	add	r20, r24
     b44:	45 83       	std	Z+5, r20	; 0x05
            if (gi_fullheightline)
     b46:	80 91 fe 0b 	lds	r24, 0x0BFE
     b4a:	88 23       	and	r24, r24
     b4c:	61 f0       	breq	.+24     	; 0xb66 <gputs+0x148>
               {
               lines -= vph/fh;        /* partial top line is not shown */
     b4e:	81 2f       	mov	r24, r17
     b50:	6c 2d       	mov	r22, r12
     b52:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <__udivmodqi4>
     b56:	e8 1a       	sub	r14, r24
     b58:	f1 08       	sbc	r15, r1
               cposy += fh;
     b5a:	4c 0d       	add	r20, r12
     b5c:	45 83       	std	Z+5, r20	; 0x05
               }
            else
               lines -= ((SGUINT)vph+fh-1)/fh; /* top line is partial shown */

            /* Skip invisible lines from string in advance */
            while (lines-- > 0)
     b5e:	e1 14       	cp	r14, r1
     b60:	f1 04       	cpc	r15, r1
     b62:	59 f4       	brne	.+22     	; 0xb7a <gputs+0x15c>
     b64:	25 c0       	rjmp	.+74     	; 0xbb0 <gputs+0x192>
               {
               lines -= vph/fh;        /* partial top line is not shown */
               cposy += fh;
               }
            else
               lines -= ((SGUINT)vph+fh-1)/fh; /* top line is partial shown */
     b66:	c4 01       	movw	r24, r8
     b68:	01 97       	sbiw	r24, 0x01	; 1
     b6a:	82 0f       	add	r24, r18
     b6c:	93 1f       	adc	r25, r19
     b6e:	b9 01       	movw	r22, r18
     b70:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__udivmodhi4>
     b74:	e6 1a       	sub	r14, r22
     b76:	f7 0a       	sbc	r15, r23
     b78:	f2 cf       	rjmp	.-28     	; 0xb5e <gputs+0x140>

            /* Skip invisible lines from string in advance */
            while (lines-- > 0)
               {
               gi_sizestrseg(sm);
     b7a:	ce 01       	movw	r24, r28
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	e4 dd       	rcall	.-1080   	; 0x748 <gi_sizestrseg>
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	e8 1a       	sub	r14, r24
     b84:	f1 08       	sbc	r15, r1
               }
            else
               lines -= ((SGUINT)vph+fh-1)/fh; /* top line is partial shown */

            /* Skip invisible lines from string in advance */
            while (lines-- > 0)
     b86:	e1 14       	cp	r14, r1
     b88:	f1 04       	cpc	r15, r1
     b8a:	b9 f7       	brne	.-18     	; 0xb7a <gputs+0x15c>
     b8c:	11 c0       	rjmp	.+34     	; 0xbb0 <gputs+0x192>
               {
               gi_sizestrseg(sm);
               }
            }
         else
            cposy = (GYT)(rby-fh*(lines-1));
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	e8 1a       	sub	r14, r24
     b92:	f1 08       	sbc	r15, r1
     b94:	83 81       	ldd	r24, Z+3	; 0x03
     b96:	ce 9c       	mul	r12, r14
     b98:	80 19       	sub	r24, r0
     b9a:	11 24       	eor	r1, r1
     b9c:	85 83       	std	Z+5, r24	; 0x05
     b9e:	08 c0       	rjmp	.+16     	; 0xbb0 <gputs+0x192>
      G_WARNING( "gputch: Viewport height too small for character" );
      return; /* Viewport too small for font, skip output */
      }

   #ifdef GS_ALIGN  /* Do alignment */
   if (G_IS_ALIGN_V_CENTER() || G_IS_ALIGN_BOTTOM())
     ba0:	40 73       	andi	r20, 0x30	; 48
     ba2:	55 27       	eor	r21, r21
            cposy = (GYT)(rby-fh*(lines-1));
         #endif  /* GNOTXTSPACE */
         }
      }
   else
      if (G_IS_ALIGN_TOP())
     ba4:	40 31       	cpi	r20, 0x10	; 16
     ba6:	51 05       	cpc	r21, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <gputs+0x192>
         cposy = lty+fh-1;  /* Move to top, compensate for font offset */
     baa:	81 50       	subi	r24, 0x01	; 1
     bac:	8c 0d       	add	r24, r12
     bae:	85 83       	std	Z+5, r24	; 0x05
      gi_xyposalign();
   #endif

   /* Output symbols */
   /* get line segment (handle all word wrap or word cut calculations) */
   ln = gi_sizestrseg(sm);
     bb0:	ce 01       	movw	r24, r28
     bb2:	01 96       	adiw	r24, 0x01	; 1
     bb4:	c9 dd       	rcall	.-1134   	; 0x748 <gi_sizestrseg>
     bb6:	d8 2e       	mov	r13, r24

   /* Clear viewport above string ? */
   if (G_IS_VPCLR_UP() && (cposy >= fh) && !transmode)
     bb8:	e0 91 ff 0b 	lds	r30, 0x0BFF
     bbc:	f0 91 00 0c 	lds	r31, 0x0C00
     bc0:	84 85       	ldd	r24, Z+12	; 0x0c
     bc2:	95 85       	ldd	r25, Z+13	; 0x0d
     bc4:	92 ff       	sbrs	r25, 2
     bc6:	10 c0       	rjmp	.+32     	; 0xbe8 <gputs+0x1ca>
     bc8:	25 81       	ldd	r18, Z+5	; 0x05
     bca:	2c 15       	cp	r18, r12
     bcc:	68 f0       	brcs	.+26     	; 0xbe8 <gputs+0x1ca>
     bce:	b1 10       	cpse	r11, r1
     bd0:	0b c0       	rjmp	.+22     	; 0xbe8 <gputs+0x1ca>
      ghw_fill(ltx,lty,rbx,cposy-fh,(SGUINT)(G_IS_INVERSE() ? 0xffff : 0x0000));
     bd2:	81 70       	andi	r24, 0x01	; 1
     bd4:	99 27       	eor	r25, r25
     bd6:	00 27       	eor	r16, r16
     bd8:	11 27       	eor	r17, r17
     bda:	08 1b       	sub	r16, r24
     bdc:	19 0b       	sbc	r17, r25
     bde:	2c 19       	sub	r18, r12
     be0:	42 81       	ldd	r20, Z+2	; 0x02
     be2:	61 81       	ldd	r22, Z+1	; 0x01
     be4:	80 81       	ld	r24, Z
     be6:	a8 d1       	rcall	.+848    	; 0xf38 <ghw_fill>

   if (ln != 0)
     be8:	dd 20       	and	r13, r13
     bea:	09 f4       	brne	.+2      	; 0xbee <gputs+0x1d0>
     bec:	b1 c0       	rjmp	.+354    	; 0xd50 <gputs+0x332>
      {
      do
         {
         #ifdef GS_ALIGN  /* Do alignment */
         if (G_IS_ALIGN_H_CENTER())
            cposx = (sm->slen >= ((SGUINT)rbx-ltx+1)) ? ltx : (GXT)((SGUINT)ltx + (((SGUINT)rbx-ltx+1) - sm->slen)/2);
     bee:	ee 24       	eor	r14, r14
     bf0:	e3 94       	inc	r14
     bf2:	f1 2c       	mov	r15, r1
            cposx = (sm->slen >= ((SGUINT)rbx-ltx+1)) ? ltx : (GXT)(((SGUINT)rbx+1) - sm->slen);
         #endif /* GS_ALIGN */

         /* Clear viewport to the left of the string segment ? */
         if (G_IS_VPCLR_LEFT() && (cposx > ltx) && !transmode)
            ghw_fill(ltx, (GYT)((cposy < lty+fh) ? lty : cposy-(fh-1)),
     bf4:	8c 2c       	mov	r8, r12
     bf6:	91 2c       	mov	r9, r1
   if (ln != 0)
      {
      do
         {
         #ifdef GS_ALIGN  /* Do alignment */
         if (G_IS_ALIGN_H_CENTER())
     bf8:	e0 91 ff 0b 	lds	r30, 0x0BFF
     bfc:	f0 91 00 0c 	lds	r31, 0x0C00
     c00:	24 85       	ldd	r18, Z+12	; 0x0c
     c02:	35 85       	ldd	r19, Z+13	; 0x0d
     c04:	d9 01       	movw	r26, r18
     c06:	bb 27       	eor	r27, r27
     c08:	c9 01       	movw	r24, r18
     c0a:	8c 70       	andi	r24, 0x0C	; 12
     c0c:	99 27       	eor	r25, r25
     c0e:	8c 30       	cpi	r24, 0x0C	; 12
     c10:	91 05       	cpc	r25, r1
     c12:	c1 f4       	brne	.+48     	; 0xc44 <gputs+0x226>
            cposx = (sm->slen >= ((SGUINT)rbx-ltx+1)) ? ltx : (GXT)((SGUINT)ltx + (((SGUINT)rbx-ltx+1) - sm->slen)/2);
     c14:	8f 81       	ldd	r24, Y+7	; 0x07
     c16:	98 85       	ldd	r25, Y+8	; 0x08
     c18:	10 81       	ld	r17, Z
     c1a:	42 81       	ldd	r20, Z+2	; 0x02
     c1c:	50 e0       	ldi	r21, 0x00	; 0
     c1e:	41 1b       	sub	r20, r17
     c20:	51 09       	sbc	r21, r1
     c22:	ba 01       	movw	r22, r20
     c24:	6f 5f       	subi	r22, 0xFF	; 255
     c26:	7f 4f       	sbci	r23, 0xFF	; 255
     c28:	86 17       	cp	r24, r22
     c2a:	97 07       	cpc	r25, r23
     c2c:	48 f4       	brcc	.+18     	; 0xc40 <gputs+0x222>
     c2e:	b7 01       	movw	r22, r14
     c30:	68 1b       	sub	r22, r24
     c32:	79 0b       	sbc	r23, r25
     c34:	46 0f       	add	r20, r22
     c36:	57 1f       	adc	r21, r23
     c38:	ca 01       	movw	r24, r20
     c3a:	96 95       	lsr	r25
     c3c:	87 95       	ror	r24
     c3e:	18 0f       	add	r17, r24
     c40:	14 83       	std	Z+4, r17	; 0x04
     c42:	13 c0       	rjmp	.+38     	; 0xc6a <gputs+0x24c>
         else
         if (G_IS_ALIGN_RIGHT())
     c44:	08 97       	sbiw	r24, 0x08	; 8
     c46:	89 f4       	brne	.+34     	; 0xc6a <gputs+0x24c>
            cposx = (sm->slen >= ((SGUINT)rbx-ltx+1)) ? ltx : (GXT)(((SGUINT)rbx+1) - sm->slen);
     c48:	8f 81       	ldd	r24, Y+7	; 0x07
     c4a:	98 85       	ldd	r25, Y+8	; 0x08
     c4c:	72 81       	ldd	r23, Z+2	; 0x02
     c4e:	60 81       	ld	r22, Z
     c50:	47 2f       	mov	r20, r23
     c52:	50 e0       	ldi	r21, 0x00	; 0
     c54:	4f 5f       	subi	r20, 0xFF	; 255
     c56:	5f 4f       	sbci	r21, 0xFF	; 255
     c58:	46 1b       	sub	r20, r22
     c5a:	51 09       	sbc	r21, r1
     c5c:	84 17       	cp	r24, r20
     c5e:	95 07       	cpc	r25, r21
     c60:	18 f4       	brcc	.+6      	; 0xc68 <gputs+0x24a>
     c62:	61 e0       	ldi	r22, 0x01	; 1
     c64:	67 0f       	add	r22, r23
     c66:	68 1b       	sub	r22, r24
     c68:	64 83       	std	Z+4, r22	; 0x04
         #endif /* GS_ALIGN */

         /* Clear viewport to the left of the string segment ? */
         if (G_IS_VPCLR_LEFT() && (cposx > ltx) && !transmode)
     c6a:	34 ff       	sbrs	r19, 4
     c6c:	1f c0       	rjmp	.+62     	; 0xcac <gputs+0x28e>
     c6e:	44 81       	ldd	r20, Z+4	; 0x04
     c70:	80 81       	ld	r24, Z
     c72:	84 17       	cp	r24, r20
     c74:	d8 f4       	brcc	.+54     	; 0xcac <gputs+0x28e>
     c76:	b1 10       	cpse	r11, r1
     c78:	19 c0       	rjmp	.+50     	; 0xcac <gputs+0x28e>
            ghw_fill(ltx, (GYT)((cposy < lty+fh) ? lty : cposy-(fh-1)),
     c7a:	a1 70       	andi	r26, 0x01	; 1
     c7c:	bb 27       	eor	r27, r27
     c7e:	00 27       	eor	r16, r16
     c80:	11 27       	eor	r17, r17
     c82:	0a 1b       	sub	r16, r26
     c84:	1b 0b       	sbc	r17, r27
                     (GXT)(cposx-1),
                     (GYT)((cposy > rby) ? rby : cposy),
     c86:	95 81       	ldd	r25, Z+5	; 0x05
            cposx = (sm->slen >= ((SGUINT)rbx-ltx+1)) ? ltx : (GXT)(((SGUINT)rbx+1) - sm->slen);
         #endif /* GS_ALIGN */

         /* Clear viewport to the left of the string segment ? */
         if (G_IS_VPCLR_LEFT() && (cposx > ltx) && !transmode)
            ghw_fill(ltx, (GYT)((cposy < lty+fh) ? lty : cposy-(fh-1)),
     c88:	23 81       	ldd	r18, Z+3	; 0x03
     c8a:	92 17       	cp	r25, r18
     c8c:	08 f4       	brcc	.+2      	; 0xc90 <gputs+0x272>
     c8e:	29 2f       	mov	r18, r25
     c90:	41 50       	subi	r20, 0x01	; 1
     c92:	61 81       	ldd	r22, Z+1	; 0x01
     c94:	a9 2f       	mov	r26, r25
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	f4 01       	movw	r30, r8
     c9a:	e6 0f       	add	r30, r22
     c9c:	f1 1d       	adc	r31, r1
     c9e:	ae 17       	cp	r26, r30
     ca0:	bf 07       	cpc	r27, r31
     ca2:	1c f0       	brlt	.+6      	; 0xcaa <gputs+0x28c>
     ca4:	61 e0       	ldi	r22, 0x01	; 1
     ca6:	69 0f       	add	r22, r25
     ca8:	6c 19       	sub	r22, r12
     caa:	46 d1       	rcall	.+652    	; 0xf38 <ghw_fill>
                     (SGUINT)(G_IS_INVERSE() ? 0xffff : 0x0000));

         for(;;)
            {
            GWCHAR val;
            val = GETCHAR(sm->cpbeg);
     cac:	e9 81       	ldd	r30, Y+1	; 0x01
     cae:	fa 81       	ldd	r31, Y+2	; 0x02
     cb0:	80 81       	ld	r24, Z

            #ifdef GS_ALIGN  /* Do alignment */
            if (G_IS_ALIGN_H() && ((val == '\r') || (val == '\t')))
     cb2:	e0 91 ff 0b 	lds	r30, 0x0BFF
     cb6:	f0 91 00 0c 	lds	r31, 0x0C00
     cba:	24 85       	ldd	r18, Z+12	; 0x0c
     cbc:	35 85       	ldd	r19, Z+13	; 0x0d
     cbe:	2c 70       	andi	r18, 0x0C	; 12
     cc0:	33 27       	eor	r19, r19
     cc2:	23 2b       	or	r18, r19
     cc4:	29 f0       	breq	.+10     	; 0xcd0 <gputs+0x2b2>
     cc6:	98 2f       	mov	r25, r24
     cc8:	9b 7f       	andi	r25, 0xFB	; 251
     cca:	99 30       	cpi	r25, 0x09	; 9
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <gputs+0x2b2>
               val = ' '; /* Process \t and \r as space in horizontal alignment modes */
     cce:	80 e2       	ldi	r24, 0x20	; 32
            #endif /* GS_ALIGN */

            gi_putch( val );
     cd0:	b9 da       	rcall	.-2702   	; 0x244 <gi_putch>
            if (sm->cpbeg.s == sm->cpend.s)
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	9a 81       	ldd	r25, Y+2	; 0x02
     cd6:	2b 81       	ldd	r18, Y+3	; 0x03
     cd8:	3c 81       	ldd	r19, Y+4	; 0x04
     cda:	82 17       	cp	r24, r18
     cdc:	93 07       	cpc	r25, r19
     cde:	21 f0       	breq	.+8      	; 0xce8 <gputs+0x2ca>
               break;
            GINCPTR(sm->cpbeg);
     ce0:	01 96       	adiw	r24, 0x01	; 1
     ce2:	9a 83       	std	Y+2, r25	; 0x02
     ce4:	89 83       	std	Y+1, r24	; 0x01
     ce6:	e2 cf       	rjmp	.-60     	; 0xcac <gputs+0x28e>
            }

         /* Clear viewport to the left of the string segment ? */
         if (G_IS_VPCLR_RIGHT() && (cposx <= rbx) && !transmode)
     ce8:	e0 91 ff 0b 	lds	r30, 0x0BFF
     cec:	f0 91 00 0c 	lds	r31, 0x0C00
     cf0:	24 85       	ldd	r18, Z+12	; 0x0c
     cf2:	35 85       	ldd	r19, Z+13	; 0x0d
     cf4:	35 ff       	sbrs	r19, 5
     cf6:	1e c0       	rjmp	.+60     	; 0xd34 <gputs+0x316>
     cf8:	84 81       	ldd	r24, Z+4	; 0x04
     cfa:	42 81       	ldd	r20, Z+2	; 0x02
     cfc:	48 17       	cp	r20, r24
     cfe:	d0 f0       	brcs	.+52     	; 0xd34 <gputs+0x316>
     d00:	b1 10       	cpse	r11, r1
     d02:	18 c0       	rjmp	.+48     	; 0xd34 <gputs+0x316>
            ghw_fill((GXT) cposx,(GYT)((cposy < lty+fh) ? lty : cposy-(fh-1)),
     d04:	21 70       	andi	r18, 0x01	; 1
     d06:	33 27       	eor	r19, r19
     d08:	00 27       	eor	r16, r16
     d0a:	11 27       	eor	r17, r17
     d0c:	02 1b       	sub	r16, r18
     d0e:	13 0b       	sbc	r17, r19
                      rbx,
                      (GYT)((cposy > rby) ? rby : cposy),
     d10:	95 81       	ldd	r25, Z+5	; 0x05
            GINCPTR(sm->cpbeg);
            }

         /* Clear viewport to the left of the string segment ? */
         if (G_IS_VPCLR_RIGHT() && (cposx <= rbx) && !transmode)
            ghw_fill((GXT) cposx,(GYT)((cposy < lty+fh) ? lty : cposy-(fh-1)),
     d12:	23 81       	ldd	r18, Z+3	; 0x03
     d14:	92 17       	cp	r25, r18
     d16:	08 f4       	brcc	.+2      	; 0xd1a <gputs+0x2fc>
     d18:	29 2f       	mov	r18, r25
     d1a:	61 81       	ldd	r22, Z+1	; 0x01
     d1c:	a9 2f       	mov	r26, r25
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	f4 01       	movw	r30, r8
     d22:	e6 0f       	add	r30, r22
     d24:	f1 1d       	adc	r31, r1
     d26:	ae 17       	cp	r26, r30
     d28:	bf 07       	cpc	r27, r31
     d2a:	1c f0       	brlt	.+6      	; 0xd32 <gputs+0x314>
     d2c:	61 e0       	ldi	r22, 0x01	; 1
     d2e:	69 0f       	add	r22, r25
     d30:	6c 19       	sub	r22, r12
     d32:	02 d1       	rcall	.+516    	; 0xf38 <ghw_fill>
                      rbx,
                      (GYT)((cposy > rby) ? rby : cposy),
                      (SGUINT)(G_IS_INVERSE() ? 0xffff : 0x0000));

         if (ln == 3)
     d34:	83 e0       	ldi	r24, 0x03	; 3
     d36:	d8 12       	cpse	r13, r24
     d38:	04 c0       	rjmp	.+8      	; 0xd42 <gputs+0x324>
            {
            if (gi_process_newline(fh)) /* Make new line processing */
     d3a:	8c 2d       	mov	r24, r12
     d3c:	fd d9       	rcall	.-3078   	; 0x138 <gi_process_newline>
     d3e:	81 11       	cpse	r24, r1
     d40:	3a c0       	rjmp	.+116    	; 0xdb6 <gputs+0x398>
               break;  /* a no-scroll condition reached, no more characters needed */
            }
         ln = gi_sizestrseg(sm);
     d42:	ce 01       	movw	r24, r28
     d44:	01 96       	adiw	r24, 0x01	; 1
     d46:	00 dd       	rcall	.-1536   	; 0x748 <gi_sizestrseg>
     d48:	d8 2e       	mov	r13, r24
         }
      while (ln != 0);
     d4a:	81 11       	cpse	r24, r1
     d4c:	55 cf       	rjmp	.-342    	; 0xbf8 <gputs+0x1da>
     d4e:	33 c0       	rjmp	.+102    	; 0xdb6 <gputs+0x398>
      }
   else
      {
      /* The string only contained whites, or was empty */
      if ((G_IS_VPCLR_LEFT() || G_IS_VPCLR_RIGHT()) && !transmode)
     d50:	e0 91 ff 0b 	lds	r30, 0x0BFF
     d54:	f0 91 00 0c 	lds	r31, 0x0C00
     d58:	84 85       	ldd	r24, Z+12	; 0x0c
     d5a:	95 85       	ldd	r25, Z+13	; 0x0d
     d5c:	9c 01       	movw	r18, r24
     d5e:	22 27       	eor	r18, r18
     d60:	30 73       	andi	r19, 0x30	; 48
     d62:	23 2b       	or	r18, r19
     d64:	41 f1       	breq	.+80     	; 0xdb6 <gputs+0x398>
     d66:	b1 10       	cpse	r11, r1
     d68:	26 c0       	rjmp	.+76     	; 0xdb6 <gputs+0x398>
         {
         /* clear of empty line */
         ghw_fill((GXT)(G_IS_VPCLR_LEFT() ? ltx : cposx),
     d6a:	8c 01       	movw	r16, r24
     d6c:	01 70       	andi	r16, 0x01	; 1
     d6e:	11 27       	eor	r17, r17
     d70:	11 95       	neg	r17
     d72:	01 95       	neg	r16
     d74:	11 09       	sbc	r17, r1
                 (GYT)((cposy < lty+fh) ? lty : cposy-(fh-1)),
                 (GXT)(G_IS_VPCLR_RIGHT() ? rbx : cposx-1),
                 (GYT)((cposy > rby) ? rby : cposy),
     d76:	35 81       	ldd	r19, Z+5	; 0x05
      {
      /* The string only contained whites, or was empty */
      if ((G_IS_VPCLR_LEFT() || G_IS_VPCLR_RIGHT()) && !transmode)
         {
         /* clear of empty line */
         ghw_fill((GXT)(G_IS_VPCLR_LEFT() ? ltx : cposx),
     d78:	23 81       	ldd	r18, Z+3	; 0x03
     d7a:	32 17       	cp	r19, r18
     d7c:	08 f4       	brcc	.+2      	; 0xd80 <gputs+0x362>
     d7e:	23 2f       	mov	r18, r19
     d80:	95 ff       	sbrs	r25, 5
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <gputs+0x36a>
     d84:	42 81       	ldd	r20, Z+2	; 0x02
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <gputs+0x36e>
     d88:	44 81       	ldd	r20, Z+4	; 0x04
     d8a:	41 50       	subi	r20, 0x01	; 1
                 (GYT)((cposy < lty+fh) ? lty : cposy-(fh-1)),
     d8c:	51 81       	ldd	r21, Z+1	; 0x01
     d8e:	a3 2f       	mov	r26, r19
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	6c 2d       	mov	r22, r12
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	65 0f       	add	r22, r21
     d98:	71 1d       	adc	r23, r1
      {
      /* The string only contained whites, or was empty */
      if ((G_IS_VPCLR_LEFT() || G_IS_VPCLR_RIGHT()) && !transmode)
         {
         /* clear of empty line */
         ghw_fill((GXT)(G_IS_VPCLR_LEFT() ? ltx : cposx),
     d9a:	a6 17       	cp	r26, r22
     d9c:	b7 07       	cpc	r27, r23
     d9e:	24 f0       	brlt	.+8      	; 0xda8 <gputs+0x38a>
     da0:	3f 5f       	subi	r19, 0xFF	; 255
     da2:	63 2f       	mov	r22, r19
     da4:	6c 19       	sub	r22, r12
     da6:	01 c0       	rjmp	.+2      	; 0xdaa <gputs+0x38c>
     da8:	65 2f       	mov	r22, r21
     daa:	94 ff       	sbrs	r25, 4
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <gputs+0x394>
     dae:	80 81       	ld	r24, Z
     db0:	01 c0       	rjmp	.+2      	; 0xdb4 <gputs+0x396>
     db2:	84 81       	ldd	r24, Z+4	; 0x04
     db4:	c1 d0       	rcall	.+386    	; 0xf38 <ghw_fill>
                 (GYT)((cposy > rby) ? rby : cposy),
                 (SGUINT)(G_IS_INVERSE() ? 0xffff : 0x0000));
         }
      }
   /* Clear viewport from line to bottom ? */
   if (G_IS_VPCLR_DOWN() && (cposy < rby) && !transmode)
     db6:	e0 91 ff 0b 	lds	r30, 0x0BFF
     dba:	f0 91 00 0c 	lds	r31, 0x0C00
     dbe:	84 85       	ldd	r24, Z+12	; 0x0c
     dc0:	95 85       	ldd	r25, Z+13	; 0x0d
     dc2:	93 ff       	sbrs	r25, 3
     dc4:	11 c0       	rjmp	.+34     	; 0xde8 <gputs+0x3ca>
     dc6:	35 81       	ldd	r19, Z+5	; 0x05
     dc8:	23 81       	ldd	r18, Z+3	; 0x03
     dca:	32 17       	cp	r19, r18
     dcc:	68 f4       	brcc	.+26     	; 0xde8 <gputs+0x3ca>
     dce:	b1 10       	cpse	r11, r1
     dd0:	0b c0       	rjmp	.+22     	; 0xde8 <gputs+0x3ca>
      ghw_fill(ltx, cposy+1 ,rbx, rby,(SGUINT)(G_IS_INVERSE() ? 0xffff : 0x0000));
     dd2:	81 70       	andi	r24, 0x01	; 1
     dd4:	99 27       	eor	r25, r25
     dd6:	00 27       	eor	r16, r16
     dd8:	11 27       	eor	r17, r17
     dda:	08 1b       	sub	r16, r24
     ddc:	19 0b       	sbc	r17, r25
     dde:	61 e0       	ldi	r22, 0x01	; 1
     de0:	63 0f       	add	r22, r19
     de2:	42 81       	ldd	r20, Z+2	; 0x02
     de4:	80 81       	ld	r24, Z
     de6:	a8 d0       	rcall	.+336    	; 0xf38 <ghw_fill>

   gi_put_complete();
     de8:	04 da       	rcall	.-3064   	; 0x1f2 <gi_put_complete>
   sm.cpnext.s = str;
   #ifdef GWIDECHAR
   GDATA_STRTYPE = 0;
   #endif
   gi_puts( &sm );
   }
     dea:	28 96       	adiw	r28, 0x08	; 8
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	f8 94       	cli
     df0:	de bf       	out	0x3e, r29	; 62
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	cd bf       	out	0x3d, r28	; 61
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	1f 91       	pop	r17
     dfc:	0f 91       	pop	r16
     dfe:	ff 90       	pop	r15
     e00:	ef 90       	pop	r14
     e02:	df 90       	pop	r13
     e04:	cf 90       	pop	r12
     e06:	bf 90       	pop	r11
     e08:	9f 90       	pop	r9
     e0a:	8f 90       	pop	r8
     e0c:	08 95       	ret

00000e0e <gi_calcdatacheck>:
*/
void gi_calcdatacheck(void)
   {
   SGUCHAR i,s;
   s = (SGUCHAR)((GVP*)&(gcurvp->gi_check) - gcurvp);
   gcurvp->gi_check = 0;
     e0e:	e0 91 ff 0b 	lds	r30, 0x0BFF
     e12:	f0 91 00 0c 	lds	r31, 0x0C00
     e16:	14 8a       	std	Z+20, r1	; 0x14
     e18:	08 95       	ret

00000e1a <gi_resetvp>:
   Resettype = 2: Clear all, except color and font data setting (gresetposvp)
*/
void gi_resetvp(SGUCHAR resettype)
   {
   /* Set full screen coordiantes */
   gcurvp->lt.x = 0;
     e1a:	e0 91 ff 0b 	lds	r30, 0x0BFF
     e1e:	f0 91 00 0c 	lds	r31, 0x0C00
     e22:	10 82       	st	Z, r1
   gcurvp->lt.y = 0;
     e24:	e0 91 ff 0b 	lds	r30, 0x0BFF
     e28:	f0 91 00 0c 	lds	r31, 0x0C00
     e2c:	11 82       	std	Z+1, r1	; 0x01
   gcurvp->rb.x = GDISPW-1;
     e2e:	e0 91 ff 0b 	lds	r30, 0x0BFF
     e32:	f0 91 00 0c 	lds	r31, 0x0C00
     e36:	93 e8       	ldi	r25, 0x83	; 131
     e38:	92 83       	std	Z+2, r25	; 0x02
   gcurvp->rb.y = GDISPH-1;
     e3a:	9f e9       	ldi	r25, 0x9F	; 159
     e3c:	93 83       	std	Z+3, r25	; 0x03

   #ifdef GGRAPHICS
   /* reset pixel pos */
   gcurvp->ppos.x = 0;
     e3e:	16 82       	std	Z+6, r1	; 0x06
   gcurvp->ppos.y = 0;
     e40:	17 82       	std	Z+7, r1	; 0x07
   #endif /* GGRAPHICS */

   gcurvp->cpos.x = 0;
     e42:	14 82       	std	Z+4, r1	; 0x04
   if (resettype <= 1)
     e44:	82 30       	cpi	r24, 0x02	; 2
     e46:	e0 f4       	brcc	.+56     	; 0xe80 <gi_resetvp+0x66>
      {
      /*gcurvp->cpos.y = SYSFONT.symheight-1;*/
      gcurvp->cpos.y = 8-1; /* default for SYSFONT */
     e48:	97 e0       	ldi	r25, 0x07	; 7
     e4a:	95 83       	std	Z+5, r25	; 0x05
      /* reset mode */
      #ifdef GWORDWRAP
      /* Make compatible with old versions where GWORDWRAP was defined in gdispcfg.h */
      gcurvp->mode = GWORD_WRAP;
      #else
      gcurvp->mode = GNORMAL;
     e4c:	15 86       	std	Z+13, r1	; 0x0d
     e4e:	14 86       	std	Z+12, r1	; 0x0c
      #endif

      /* reset font */
      gcurvp->pfont = &SYSFONT;
     e50:	a9 e2       	ldi	r26, 0x29	; 41
     e52:	b2 e0       	ldi	r27, 0x02	; 2
     e54:	b3 87       	std	Z+11, r27	; 0x0b
     e56:	a2 87       	std	Z+10, r26	; 0x0a
      /* preset code-page */
      gcurvp->codepagep = SYSFONT.pcodepage;
     e58:	20 91 33 02 	lds	r18, 0x0233
     e5c:	30 91 34 02 	lds	r19, 0x0234
     e60:	31 87       	std	Z+9, r19	; 0x09
     e62:	20 87       	std	Z+8, r18	; 0x08
      gcurvp->fsize.x = SYSFONT.symwidth;
     e64:	9c 91       	ld	r25, X
     e66:	96 87       	std	Z+14, r25	; 0x0e
      gcurvp->fsize.y = SYSFONT.symheight;
     e68:	90 91 2a 02 	lds	r25, 0x022A
     e6c:	97 87       	std	Z+15, r25	; 0x0f
      /* default is no extra character & line spacing */
      gcurvp->chln.x = 0;
      gcurvp->chln.y = 0;
      #endif
      #ifdef GHW_USING_COLOR
      if (resettype == 0)
     e6e:	81 11       	cpse	r24, r1
     e70:	12 c0       	rjmp	.+36     	; 0xe96 <gi_resetvp+0x7c>
         {
         gcurvp->foreground = GHW_PALETTE_FOREGROUND;
     e72:	11 8a       	std	Z+17, r1	; 0x11
     e74:	10 8a       	std	Z+16, r1	; 0x10
         gcurvp->background = GHW_PALETTE_BACKGROUND;
     e76:	8f ef       	ldi	r24, 0xFF	; 255
     e78:	9f ef       	ldi	r25, 0xFF	; 255
     e7a:	93 8b       	std	Z+19, r25	; 0x13
     e7c:	82 8b       	std	Z+18, r24	; 0x12
     e7e:	0b c0       	rjmp	.+22     	; 0xe96 <gi_resetvp+0x7c>
         }
      #endif
      }
   else
      {
      gcurvp->cpos.y = ((gcurvp->pfont == NULL) ? SYSFONT.symheight : gcurvp->fsize.y)-1;
     e80:	82 85       	ldd	r24, Z+10	; 0x0a
     e82:	93 85       	ldd	r25, Z+11	; 0x0b
     e84:	89 2b       	or	r24, r25
     e86:	21 f4       	brne	.+8      	; 0xe90 <gi_resetvp+0x76>
     e88:	80 91 2a 02 	lds	r24, 0x022A
     e8c:	81 50       	subi	r24, 0x01	; 1
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <gi_resetvp+0x7a>
     e90:	87 85       	ldd	r24, Z+15	; 0x0f
     e92:	81 50       	subi	r24, 0x01	; 1
     e94:	85 83       	std	Z+5, r24	; 0x05
      #ifndef GNOTXTSPACE
      gi_limit_check();   /* Limit spacing */
      #endif
      }
   gi_calcdatacheck();    /* correct VP checksum to new settings */
     e96:	bb cf       	rjmp	.-138    	; 0xe0e <gi_calcdatacheck>
     e98:	08 95       	ret

00000e9a <ginit>:

/*
    Library and low-level init
*/
SGUCHAR ginit(void)
   {
     e9a:	ff 92       	push	r15
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
   SGUCHAR err;
   if ((err = (SGUCHAR) ghw_init())!=0)   /* init hw */
     ea4:	e2 d5       	rcall	.+3012   	; 0x1a6a <ghw_init>
     ea6:	f8 2e       	mov	r15, r24
     ea8:	81 11       	cpse	r24, r1
     eaa:	16 c0       	rjmp	.+44     	; 0xed8 <ginit+0x3e>
     eac:	c1 e0       	ldi	r28, 0x01	; 1
     eae:	dc e0       	ldi	r29, 0x0C	; 12
     eb0:	0a e6       	ldi	r16, 0x6A	; 106
     eb2:	1c e0       	ldi	r17, 0x0C	; 12
   #endif /* GNOCURSOR */

   /* Reset vp structures */
   for( i=0; i<GNUMVP; i++ )
      {
      gcurvp = &GDATA_VIEWPORTS[i];
     eb4:	d0 93 00 0c 	sts	0x0C00, r29
     eb8:	c0 93 ff 0b 	sts	0x0BFF, r28
      gi_resetvp(0);
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	ad df       	rcall	.-166    	; 0xe1a <gi_resetvp>
     ec0:	65 96       	adiw	r28, 0x15	; 21
   GDATA_CURSOR = GCURSIZE2;
   GDATA_CURSORON = 0;
   #endif /* GNOCURSOR */

   /* Reset vp structures */
   for( i=0; i<GNUMVP; i++ )
     ec2:	c0 17       	cp	r28, r16
     ec4:	d1 07       	cpc	r29, r17
     ec6:	b1 f7       	brne	.-20     	; 0xeb4 <ginit+0x1a>
      gcurvp = &GDATA_VIEWPORTS[i];
      gi_resetvp(0);
      }

   /* select current vp = 0 */
   GDATA_CURVPNUM = 0;
     ec8:	10 92 6a 0c 	sts	0x0C6A, r1
   gcurvp = &GDATA_VIEWPORTS[0];
     ecc:	21 e0       	ldi	r18, 0x01	; 1
     ece:	3c e0       	ldi	r19, 0x0C	; 12
     ed0:	30 93 00 0c 	sts	0x0C00, r19
     ed4:	20 93 ff 0b 	sts	0x0BFF, r18
   #ifdef GVIRTUAL_FONTS_DYN
   /* Clear virtual font load structures */
   gvf_init();
   #endif
   return err;          /* Return != 0 if some error has occured */
   }
     ed8:	8f 2d       	mov	r24, r15
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
     ee2:	ff 90       	pop	r15
     ee4:	08 95       	ret

00000ee6 <gi_datacheck>:

void gi_datacheck(void)
   {
   SGUCHAR c;
   /* Check pointers */
   if ( gcurvp == NULL )
     ee6:	80 91 ff 0b 	lds	r24, 0x0BFF
     eea:	90 91 00 0c 	lds	r25, 0x0C00
     eee:	89 2b       	or	r24, r25
     ef0:	19 f4       	brne	.+6      	; 0xef8 <gi_datacheck+0x12>
      {
      G_WARNING( "GLCD was not initialized, Initialization will be done" );
      if (ginit())
     ef2:	d3 df       	rcall	.-90     	; 0xe9a <ginit>
     ef4:	81 11       	cpse	r24, r1
     ef6:	1f c0       	rjmp	.+62     	; 0xf36 <gi_datacheck+0x50>
                  return; /* (Re-) initialization failed */
      }
   if (GDATA_CURVPNUM >= GNUMVP)
     ef8:	80 91 6a 0c 	lds	r24, 0x0C6A
     efc:	85 30       	cpi	r24, 0x05	; 5
     efe:	48 f0       	brcs	.+18     	; 0xf12 <gi_datacheck+0x2c>
      {
      G_WARNING("Current viewport number >= GNUMVP definition, Defaults to GNUMVP-1");
      GDATA_CURVPNUM = GNUMVP-1;
     f00:	84 e0       	ldi	r24, 0x04	; 4
     f02:	80 93 6a 0c 	sts	0x0C6A, r24
      gcurvp = &GDATA_VIEWPORTS[ GDATA_CURVPNUM ];
     f06:	85 e5       	ldi	r24, 0x55	; 85
     f08:	9c e0       	ldi	r25, 0x0C	; 12
     f0a:	90 93 00 0c 	sts	0x0C00, r25
     f0e:	80 93 ff 0b 	sts	0x0BFF, r24
      }
   if (gcurvp->pfont == NULL)
     f12:	e0 91 ff 0b 	lds	r30, 0x0BFF
     f16:	f0 91 00 0c 	lds	r31, 0x0C00
     f1a:	82 85       	ldd	r24, Z+10	; 0x0a
     f1c:	93 85       	ldd	r25, Z+11	; 0x0b
     f1e:	89 2b       	or	r24, r25
     f20:	49 f4       	brne	.+18     	; 0xf34 <gi_datacheck+0x4e>
      {
      G_WARNING( "GLCD was not initialized, Initialization will be done" );
      if (ginit())
     f22:	bb df       	rcall	.-138    	; 0xe9a <ginit>
     f24:	81 11       	cpse	r24, r1
     f26:	07 c0       	rjmp	.+14     	; 0xf36 <gi_datacheck+0x50>
         return; /* (Re-) initialization failed */
      if (gcurvp == NULL)
     f28:	80 91 ff 0b 	lds	r24, 0x0BFF
     f2c:	90 91 00 0c 	lds	r25, 0x0C00
     f30:	89 2b       	or	r24, r25
     f32:	09 f0       	breq	.+2      	; 0xf36 <gi_datacheck+0x50>
       {
       G_WARNING( "Coordinate range error or missing initialization" );
       }

   c = gcurvp->gi_check;
   gi_calcdatacheck();
     f34:	6c cf       	rjmp	.-296    	; 0xe0e <gi_calcdatacheck>
     f36:	08 95       	ret

00000f38 <ghw_fill>:
#if ( defined( GHW_ACCELERATOR ) && defined (GBUFFER) )
extern SGBOOL ghw_upddelay;
#endif

void ghw_fill(GXT ltx, GYT lty, GXT rbx, GYT rby, SGUINT pattern)
   {
     f38:	9f 92       	push	r9
     f3a:	af 92       	push	r10
     f3c:	bf 92       	push	r11
     f3e:	cf 92       	push	r12
     f40:	df 92       	push	r13
     f42:	ef 92       	push	r14
     f44:	ff 92       	push	r15
     f46:	0f 93       	push	r16
     f48:	1f 93       	push	r17
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	e8 01       	movw	r28, r16
   #ifdef GBUFFER
   GCOLOR *cp;
   GBUF_CHECK();
   #endif

   glcd_err = 0;
     f50:	10 92 99 0d 	sts	0x0D99, r1
     f54:	d8 2e       	mov	r13, r24
     f56:	83 e8       	ldi	r24, 0x83	; 131
     f58:	8d 15       	cp	r24, r13
     f5a:	20 f4       	brcc	.+8      	; 0xf64 <ghw_fill+0x2c>
     f5c:	0f 2e       	mov	r0, r31
     f5e:	f3 e8       	ldi	r31, 0x83	; 131
     f60:	df 2e       	mov	r13, r31
     f62:	f0 2d       	mov	r31, r0
     f64:	f6 2e       	mov	r15, r22
     f66:	8f e9       	ldi	r24, 0x9F	; 159
     f68:	86 17       	cp	r24, r22
     f6a:	20 f4       	brcc	.+8      	; 0xf74 <ghw_fill+0x3c>
     f6c:	0f 2e       	mov	r0, r31
     f6e:	ff e9       	ldi	r31, 0x9F	; 159
     f70:	ff 2e       	mov	r15, r31
     f72:	f0 2d       	mov	r31, r0
     f74:	ef 2c       	mov	r14, r15
     f76:	f2 16       	cp	r15, r18
     f78:	08 f4       	brcc	.+2      	; 0xf7c <ghw_fill+0x44>
     f7a:	e2 2e       	mov	r14, r18
     f7c:	2f e9       	ldi	r18, 0x9F	; 159
     f7e:	2e 15       	cp	r18, r14
     f80:	20 f4       	brcc	.+8      	; 0xf8a <ghw_fill+0x52>
     f82:	0f 2e       	mov	r0, r31
     f84:	ff e9       	ldi	r31, 0x9F	; 159
     f86:	ef 2e       	mov	r14, r31
     f88:	f0 2d       	mov	r31, r0
     f8a:	1d 2d       	mov	r17, r13
     f8c:	d4 16       	cp	r13, r20
     f8e:	08 f4       	brcc	.+2      	; 0xf92 <ghw_fill+0x5a>
     f90:	14 2f       	mov	r17, r20
     f92:	14 38       	cpi	r17, 0x84	; 132
     f94:	08 f0       	brcs	.+2      	; 0xf98 <ghw_fill+0x60>
     f96:	13 e8       	ldi	r17, 0x83	; 131

   #ifdef GBUFFER
   invalrect( ltx, lty );
   invalrect( rbx, rby );
   #else
   ghw_set_xyrange(ltx,lty,rbx,rby);
     f98:	2e 2d       	mov	r18, r14
     f9a:	41 2f       	mov	r20, r17
     f9c:	6f 2d       	mov	r22, r15
     f9e:	8d 2d       	mov	r24, r13
     fa0:	9d d4       	rcall	.+2362   	; 0x18dc <ghw_set_xyrange>
   #endif

   if ((pattern == 0) || (pattern == 0xffff))
     fa2:	ce 01       	movw	r24, r28
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	8e 3f       	cpi	r24, 0xFE	; 254
     fa8:	9f 4f       	sbci	r25, 0xFF	; 255
     faa:	18 f4       	brcc	.+6      	; 0xfb2 <ghw_fill+0x7a>
         }
      }
   else
      {
      /* loop fill for pattern background (mixed foreground / background) */
      for (y = lty; y <= rby; y++)
     fac:	ef 14       	cp	r14, r15
     fae:	e8 f4       	brcc	.+58     	; 0xfea <ghw_fill+0xb2>
     fb0:	4b c0       	rjmp	.+150    	; 0x1048 <ghw_fill+0x110>
   #endif

   if ((pattern == 0) || (pattern == 0xffff))
      {
      /* Accelerated loop fill for uniform color */
      GCOLOR c = (pattern != 0) ? ghw_def_foreground : ghw_def_background;
     fb2:	cd 2b       	or	r28, r29
     fb4:	29 f0       	breq	.+10     	; 0xfc0 <ghw_fill+0x88>
     fb6:	c0 91 95 0d 	lds	r28, 0x0D95
     fba:	d0 91 96 0d 	lds	r29, 0x0D96
     fbe:	04 c0       	rjmp	.+8      	; 0xfc8 <ghw_fill+0x90>
     fc0:	c0 91 97 0d 	lds	r28, 0x0D97
     fc4:	d0 91 98 0d 	lds	r29, 0x0D98
      for (y = lty; y <= rby; y++)
     fc8:	ef 14       	cp	r14, r15
     fca:	08 f4       	brcc	.+2      	; 0xfce <ghw_fill+0x96>
     fcc:	3d c0       	rjmp	.+122    	; 0x1048 <ghw_fill+0x110>
         {
         #ifdef GBUFFER
         cp = &gbuf[GINDEX(ltx,y)];
         #endif
         x = rbx-ltx;
     fce:	1d 19       	sub	r17, r13
     fd0:	01 2f       	mov	r16, r17
         do
            {
            #ifdef GBUFFER
            *cp++ = c;
            #else
            ghw_auto_wr(c);
     fd2:	ce 01       	movw	r24, r28
     fd4:	aa d4       	rcall	.+2388   	; 0x192a <ghw_auto_wr>
            #endif
            }
         while (x-- != 0);
     fd6:	8f ef       	ldi	r24, 0xFF	; 255
     fd8:	80 0f       	add	r24, r16
     fda:	00 23       	and	r16, r16
     fdc:	11 f0       	breq	.+4      	; 0xfe2 <ghw_fill+0xaa>
     fde:	08 2f       	mov	r16, r24
     fe0:	f8 cf       	rjmp	.-16     	; 0xfd2 <ghw_fill+0x9a>

   if ((pattern == 0) || (pattern == 0xffff))
      {
      /* Accelerated loop fill for uniform color */
      GCOLOR c = (pattern != 0) ? ghw_def_foreground : ghw_def_background;
      for (y = lty; y <= rby; y++)
     fe2:	f3 94       	inc	r15
     fe4:	ef 14       	cp	r14, r15
     fe6:	a0 f7       	brcc	.-24     	; 0xfd0 <ghw_fill+0x98>
     fe8:	2f c0       	rjmp	.+94     	; 0x1048 <ghw_fill+0x110>
      {
      /* loop fill for pattern background (mixed foreground / background) */
      for (y = lty; y <= rby; y++)
         {
         SGUCHAR msk,pat;
         pat = ((y & 1) != 0) ? (SGUCHAR)(pattern / 256) : (SGUCHAR)(pattern & 0xff);
     fea:	ad 2e       	mov	r10, r29
     fec:	0c 2f       	mov	r16, r28
         msk = sympixmsk[GPIXEL(ltx)];
     fee:	ed 2d       	mov	r30, r13
     ff0:	e7 70       	andi	r30, 0x07	; 7
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	ef 5d       	subi	r30, 0xDF	; 223
     ff6:	fd 4f       	sbci	r31, 0xFD	; 253
     ff8:	c0 80       	ld	r12, Z
         #ifdef GBUFFER
         cp = &gbuf[GINDEX(ltx,y)];
         #endif
         for (x = ltx; x <= rbx; x++ )
     ffa:	bd 2c       	mov	r11, r13
      {
      /* loop fill for pattern background (mixed foreground / background) */
      for (y = lty; y <= rby; y++)
         {
         SGUCHAR msk,pat;
         pat = ((y & 1) != 0) ? (SGUCHAR)(pattern / 256) : (SGUCHAR)(pattern & 0xff);
     ffc:	f0 fc       	sbrc	r15, 0
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <ghw_fill+0xcc>
    1000:	d0 2f       	mov	r29, r16
    1002:	01 c0       	rjmp	.+2      	; 0x1006 <ghw_fill+0xce>
    1004:	da 2d       	mov	r29, r10
         msk = sympixmsk[GPIXEL(ltx)];
    1006:	9c 2c       	mov	r9, r12
         #ifdef GBUFFER
         cp = &gbuf[GINDEX(ltx,y)];
         #endif
         for (x = ltx; x <= rbx; x++ )
    1008:	1d 15       	cp	r17, r13
    100a:	d8 f0       	brcs	.+54     	; 0x1042 <ghw_fill+0x10a>
    100c:	cb 2d       	mov	r28, r11
            {
            #ifdef GBUFFER
            *cp++ = (pat & msk) ? ghw_def_foreground : ghw_def_background;
            #else
            ghw_auto_wr(((pat & msk) ? ghw_def_foreground : ghw_def_background));
    100e:	89 2d       	mov	r24, r9
    1010:	8d 23       	and	r24, r29
    1012:	29 f0       	breq	.+10     	; 0x101e <ghw_fill+0xe6>
    1014:	80 91 95 0d 	lds	r24, 0x0D95
    1018:	90 91 96 0d 	lds	r25, 0x0D96
    101c:	04 c0       	rjmp	.+8      	; 0x1026 <ghw_fill+0xee>
    101e:	80 91 97 0d 	lds	r24, 0x0D97
    1022:	90 91 98 0d 	lds	r25, 0x0D98
    1026:	81 d4       	rcall	.+2306   	; 0x192a <ghw_auto_wr>
            #endif
            if ((msk >>= 1) == 0)
    1028:	96 94       	lsr	r9
    102a:	41 f4       	brne	.+16     	; 0x103c <ghw_fill+0x104>
               msk = sympixmsk[GPIXEL(x+1)];
    102c:	ec 2f       	mov	r30, r28
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	31 96       	adiw	r30, 0x01	; 1
    1032:	e7 70       	andi	r30, 0x07	; 7
    1034:	f0 78       	andi	r31, 0x80	; 128
    1036:	ef 5d       	subi	r30, 0xDF	; 223
    1038:	fd 4f       	sbci	r31, 0xFD	; 253
    103a:	90 80       	ld	r9, Z
         pat = ((y & 1) != 0) ? (SGUCHAR)(pattern / 256) : (SGUCHAR)(pattern & 0xff);
         msk = sympixmsk[GPIXEL(ltx)];
         #ifdef GBUFFER
         cp = &gbuf[GINDEX(ltx,y)];
         #endif
         for (x = ltx; x <= rbx; x++ )
    103c:	cf 5f       	subi	r28, 0xFF	; 255
    103e:	1c 17       	cp	r17, r28
    1040:	30 f7       	brcc	.-52     	; 0x100e <ghw_fill+0xd6>
         }
      }
   else
      {
      /* loop fill for pattern background (mixed foreground / background) */
      for (y = lty; y <= rby; y++)
    1042:	f3 94       	inc	r15
    1044:	ef 14       	cp	r14, r15
    1046:	d0 f6       	brcc	.-76     	; 0xffc <ghw_fill+0xc4>
               msk = sympixmsk[GPIXEL(x+1)];
            }
         }
      }
   ghw_auto_wr_end();
   }
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	1f 91       	pop	r17
    104e:	0f 91       	pop	r16
    1050:	ff 90       	pop	r15
    1052:	ef 90       	pop	r14
    1054:	df 90       	pop	r13
    1056:	cf 90       	pop	r12
    1058:	bf 90       	pop	r11
    105a:	af 90       	pop	r10
    105c:	9f 90       	pop	r9
    105e:	08 95       	ret

00001060 <ghw_gscroll>:
   The empty area in the bottom is cleared

   lines  =  pixel lines to scroll
*/
void ghw_gscroll(GXT ltx, GYT lty, GXT rbx, GYT rby, GYT lines, SGUINT pattern)
   {
    1060:	7f 92       	push	r7
    1062:	8f 92       	push	r8
    1064:	9f 92       	push	r9
    1066:	af 92       	push	r10
    1068:	bf 92       	push	r11
    106a:	cf 92       	push	r12
    106c:	df 92       	push	r13
    106e:	ef 92       	push	r14
    1070:	ff 92       	push	r15
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
   GCOLOR *cp;
   GYT ylim;
   GXT x;
   #endif  /* GBUFFER */

   glcd_err = 0;
    107a:	10 92 99 0d 	sts	0x0D99, r1
    107e:	98 2e       	mov	r9, r24
    1080:	83 e8       	ldi	r24, 0x83	; 131
    1082:	89 15       	cp	r24, r9
    1084:	20 f4       	brcc	.+8      	; 0x108e <ghw_gscroll+0x2e>
    1086:	0f 2e       	mov	r0, r31
    1088:	f3 e8       	ldi	r31, 0x83	; 131
    108a:	9f 2e       	mov	r9, r31
    108c:	f0 2d       	mov	r31, r0
    108e:	a6 2e       	mov	r10, r22
    1090:	8f e9       	ldi	r24, 0x9F	; 159
    1092:	86 17       	cp	r24, r22
    1094:	20 f4       	brcc	.+8      	; 0x109e <ghw_gscroll+0x3e>
    1096:	0f 2e       	mov	r0, r31
    1098:	ff e9       	ldi	r31, 0x9F	; 159
    109a:	af 2e       	mov	r10, r31
    109c:	f0 2d       	mov	r31, r0
    109e:	8a 2c       	mov	r8, r10
    10a0:	a2 16       	cp	r10, r18
    10a2:	08 f4       	brcc	.+2      	; 0x10a6 <ghw_gscroll+0x46>
    10a4:	82 2e       	mov	r8, r18
    10a6:	8f e9       	ldi	r24, 0x9F	; 159
    10a8:	88 15       	cp	r24, r8
    10aa:	20 f4       	brcc	.+8      	; 0x10b4 <ghw_gscroll+0x54>
    10ac:	0f 2e       	mov	r0, r31
    10ae:	ff e9       	ldi	r31, 0x9F	; 159
    10b0:	8f 2e       	mov	r8, r31
    10b2:	f0 2d       	mov	r31, r0
    10b4:	b9 2c       	mov	r11, r9
    10b6:	94 16       	cp	r9, r20
    10b8:	08 f4       	brcc	.+2      	; 0x10bc <ghw_gscroll+0x5c>
    10ba:	b4 2e       	mov	r11, r20
    10bc:	83 e8       	ldi	r24, 0x83	; 131
    10be:	8b 15       	cp	r24, r11
    10c0:	20 f4       	brcc	.+8      	; 0x10ca <ghw_gscroll+0x6a>
    10c2:	0f 2e       	mov	r0, r31
    10c4:	f3 e8       	ldi	r31, 0x83	; 131
    10c6:	bf 2e       	mov	r11, r31
    10c8:	f0 2d       	mov	r31, r0
         }
      }

   #else
   /* Non-buffered mode */
   if (lines > rby - lty)
    10ca:	80 2f       	mov	r24, r16
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	e8 2d       	mov	r30, r8
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	ea 19       	sub	r30, r10
    10d4:	f1 09       	sbc	r31, r1
    10d6:	e8 17       	cp	r30, r24
    10d8:	f9 07       	cpc	r31, r25
    10da:	3c f4       	brge	.+14     	; 0x10ea <ghw_gscroll+0x8a>
      {
      ghw_fill(ltx, lty, rbx, rby, pattern);   /* just clear whole area */
    10dc:	87 01       	movw	r16, r14
    10de:	28 2d       	mov	r18, r8
    10e0:	4b 2d       	mov	r20, r11
    10e2:	6a 2d       	mov	r22, r10
    10e4:	89 2d       	mov	r24, r9
    10e6:	28 df       	rcall	.-432    	; 0xf38 <ghw_fill>
      return;
    10e8:	3a c0       	rjmp	.+116    	; 0x115e <ghw_gscroll+0xfe>
      }

   ylim = rby - lines;
    10ea:	78 2c       	mov	r7, r8
    10ec:	70 1a       	sub	r7, r16
   ys = (lty+lines);        /* First source row for scroll */

   for (; lty <= rby; lty++, ys++)
    10ee:	8a 14       	cp	r8, r10
    10f0:	b0 f1       	brcs	.+108    	; 0x115e <ghw_gscroll+0xfe>
      {
      /* Loop rows */
      if (lty >= ylim)
    10f2:	a7 14       	cp	r10, r7
    10f4:	50 f0       	brcs	.+20     	; 0x110a <ghw_gscroll+0xaa>
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <ghw_gscroll+0x9c>
    10f8:	a7 14       	cp	r10, r7
    10fa:	68 f0       	brcs	.+26     	; 0x1116 <ghw_gscroll+0xb6>
         {
         ghw_fill(ltx, lty, rbx, rby, pattern);   /* clear remaining area */
    10fc:	87 01       	movw	r16, r14
    10fe:	28 2d       	mov	r18, r8
    1100:	4b 2d       	mov	r20, r11
    1102:	6a 2d       	mov	r22, r10
    1104:	89 2d       	mov	r24, r9
    1106:	18 df       	rcall	.-464    	; 0xf38 <ghw_fill>
         return;
    1108:	2a c0       	rjmp	.+84     	; 0x115e <ghw_gscroll+0xfe>
      ghw_set_xyrange(ltx,lty,rbx,lty);  /* Initiate LCD controller address pointers*/
      #else
      ghw_setxypos(ltx,ys);
      ghw_auto_rd_start();
      /* Loop pixel row read */
      for (x = ltx, cp = &ghw_tmpbuf[0]; x <= rbx; x++,cp++)
    110a:	0f 2e       	mov	r0, r31
    110c:	fd e6       	ldi	r31, 0x6D	; 109
    110e:	cf 2e       	mov	r12, r31
    1110:	fc e0       	ldi	r31, 0x0C	; 12
    1112:	df 2e       	mov	r13, r31
    1114:	f0 2d       	mov	r31, r0
    1116:	60 2f       	mov	r22, r16
    1118:	6a 0d       	add	r22, r10
      /* Loop pixel row read */
      for (x = ltx, cp = &ghw_tmpbuf[0]; x <= rbx; x++,cp++)
         *cp = ghw_rd(x,ys);
      ghw_set_xyrange(ltx,lty,rbx,lty);  /* Initiate LCD controller address pointers*/
      #else
      ghw_setxypos(ltx,ys);
    111a:	89 2d       	mov	r24, r9
    111c:	02 d4       	rcall	.+2052   	; 0x1922 <ghw_setxypos>
      ghw_auto_rd_start();
    111e:	0f d4       	rcall	.+2078   	; 0x193e <ghw_auto_rd_start>
      /* Loop pixel row read */
      for (x = ltx, cp = &ghw_tmpbuf[0]; x <= rbx; x++,cp++)
    1120:	b9 14       	cp	r11, r9
    1122:	c8 f0       	brcs	.+50     	; 0x1156 <ghw_gscroll+0xf6>
    1124:	19 2d       	mov	r17, r9
    1126:	e6 01       	movw	r28, r12
         *cp = ghw_auto_rd();
    1128:	0f d4       	rcall	.+2078   	; 0x1948 <ghw_auto_rd>
    112a:	89 93       	st	Y+, r24
    112c:	99 93       	st	Y+, r25
      ghw_set_xyrange(ltx,lty,rbx,lty);  /* Initiate LCD controller address pointers*/
      #else
      ghw_setxypos(ltx,ys);
      ghw_auto_rd_start();
      /* Loop pixel row read */
      for (x = ltx, cp = &ghw_tmpbuf[0]; x <= rbx; x++,cp++)
    112e:	1f 5f       	subi	r17, 0xFF	; 255
    1130:	b1 16       	cp	r11, r17
    1132:	d0 f7       	brcc	.-12     	; 0x1128 <ghw_gscroll+0xc8>
    1134:	0a c0       	rjmp	.+20     	; 0x114a <ghw_gscroll+0xea>
         *cp = ghw_auto_rd();
      ghw_setxypos(ltx,lty);
      #endif
      /* Loop pixel row write */
      for (x = ltx, cp = &ghw_tmpbuf[0]; x <= rbx; x++,cp++)
         ghw_auto_wr(*cp);
    1136:	89 91       	ld	r24, Y+
    1138:	99 91       	ld	r25, Y+
    113a:	f7 d3       	rcall	.+2030   	; 0x192a <ghw_auto_wr>
      for (x = ltx, cp = &ghw_tmpbuf[0]; x <= rbx; x++,cp++)
         *cp = ghw_auto_rd();
      ghw_setxypos(ltx,lty);
      #endif
      /* Loop pixel row write */
      for (x = ltx, cp = &ghw_tmpbuf[0]; x <= rbx; x++,cp++)
    113c:	1f 5f       	subi	r17, 0xFF	; 255
    113e:	b1 16       	cp	r11, r17
    1140:	d0 f7       	brcc	.-12     	; 0x1136 <ghw_gscroll+0xd6>
      }

   ylim = rby - lines;
   ys = (lty+lines);        /* First source row for scroll */

   for (; lty <= rby; lty++, ys++)
    1142:	a3 94       	inc	r10
    1144:	8a 14       	cp	r8, r10
    1146:	c0 f6       	brcc	.-80     	; 0x10f8 <ghw_gscroll+0x98>
    1148:	0a c0       	rjmp	.+20     	; 0x115e <ghw_gscroll+0xfe>
      ghw_setxypos(ltx,ys);
      ghw_auto_rd_start();
      /* Loop pixel row read */
      for (x = ltx, cp = &ghw_tmpbuf[0]; x <= rbx; x++,cp++)
         *cp = ghw_auto_rd();
      ghw_setxypos(ltx,lty);
    114a:	6a 2d       	mov	r22, r10
    114c:	89 2d       	mov	r24, r9
    114e:	e9 d3       	rcall	.+2002   	; 0x1922 <ghw_setxypos>
      #endif
      /* Loop pixel row write */
      for (x = ltx, cp = &ghw_tmpbuf[0]; x <= rbx; x++,cp++)
    1150:	19 2d       	mov	r17, r9
    1152:	e6 01       	movw	r28, r12
    1154:	f0 cf       	rjmp	.-32     	; 0x1136 <ghw_gscroll+0xd6>
      ghw_setxypos(ltx,ys);
      ghw_auto_rd_start();
      /* Loop pixel row read */
      for (x = ltx, cp = &ghw_tmpbuf[0]; x <= rbx; x++,cp++)
         *cp = ghw_auto_rd();
      ghw_setxypos(ltx,lty);
    1156:	6a 2d       	mov	r22, r10
    1158:	89 2d       	mov	r24, r9
    115a:	e3 d3       	rcall	.+1990   	; 0x1922 <ghw_setxypos>
    115c:	f2 cf       	rjmp	.-28     	; 0x1142 <ghw_gscroll+0xe2>
      for (x = ltx, cp = &ghw_tmpbuf[0]; x <= rbx; x++,cp++)
         ghw_auto_wr(*cp);
      ghw_auto_wr_end();
      }
   #endif
   }
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	ff 90       	pop	r15
    1168:	ef 90       	pop	r14
    116a:	df 90       	pop	r13
    116c:	cf 90       	pop	r12
    116e:	bf 90       	pop	r11
    1170:	af 90       	pop	r10
    1172:	9f 90       	pop	r9
    1174:	8f 90       	pop	r8
    1176:	7f 90       	pop	r7
    1178:	08 95       	ret

0000117a <ghw_wrsym>:
   bw = symbol row width in bytes
   mode is number of bits pr pixel in symbol (or true inverse for B&W character)
*/

void ghw_wrsym(GXT ltx, GYT lty, GXT rbx, GYT rby, PGSYMBYTE src, SGUINT bw, SGUCHAR mode)
   {
    117a:	2f 92       	push	r2
    117c:	3f 92       	push	r3
    117e:	4f 92       	push	r4
    1180:	5f 92       	push	r5
    1182:	6f 92       	push	r6
    1184:	7f 92       	push	r7
    1186:	8f 92       	push	r8
    1188:	9f 92       	push	r9
    118a:	af 92       	push	r10
    118c:	bf 92       	push	r11
    118e:	cf 92       	push	r12
    1190:	df 92       	push	r13
    1192:	ef 92       	push	r14
    1194:	ff 92       	push	r15
    1196:	0f 93       	push	r16
    1198:	1f 93       	push	r17
    119a:	cf 93       	push	r28
    119c:	df 93       	push	r29
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	6d 97       	sbiw	r28, 0x1d	; 29
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61
    11ae:	18 01       	movw	r2, r16

   #ifdef GVIRTUAL_FONTS
   if (bw == 0)
      return;
   #else
   if ((src == NULL) || (bw == 0))
    11b0:	01 15       	cp	r16, r1
    11b2:	11 05       	cpc	r17, r1
    11b4:	09 f4       	brne	.+2      	; 0x11b8 <ghw_wrsym+0x3e>
    11b6:	f8 c1       	rjmp	.+1008   	; 0x15a8 <ghw_wrsym+0x42e>
    11b8:	e1 14       	cp	r14, r1
    11ba:	f1 04       	cpc	r15, r1
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <ghw_wrsym+0x46>
    11be:	f4 c1       	rjmp	.+1000   	; 0x15a8 <ghw_wrsym+0x42e>
   invalrect( ltx, lty );
   invalrect( rbx, rby );
   #endif

   transperant = (mode & GHW_TRANSPERANT) ? 1 : 0;
   smode = mode & GHW_PALETTEMASK;
    11c0:	0c 2d       	mov	r16, r12
    11c2:	0f 71       	andi	r16, 0x1F	; 31

   /* Is it a color/gray scale symbol or a 'b&w' symbol ? */
   if (smode == 0)
    11c4:	69 f0       	breq	.+26     	; 0x11e0 <ghw_wrsym+0x66>
      smode = 1; /* Make compatible with old fonts */
   if (smode <= 8)
    11c6:	09 30       	cpi	r16, 0x09	; 9
    11c8:	d0 f5       	brcc	.+116    	; 0x123e <ghw_wrsym+0xc4>
      {
      /* b&w, palette or grey-level. Check if symbol resolution is supported */
      if ((smode != 1)  && (smode != 2)  && (smode != 4)  && (smode != 8))
    11ca:	9f ef       	ldi	r25, 0xFF	; 255
    11cc:	90 0f       	add	r25, r16
    11ce:	92 30       	cpi	r25, 0x02	; 2
    11d0:	40 f0       	brcs	.+16     	; 0x11e2 <ghw_wrsym+0x68>
    11d2:	04 30       	cpi	r16, 0x04	; 4
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <ghw_wrsym+0x5e>
    11d6:	c7 c1       	rjmp	.+910    	; 0x1566 <ghw_wrsym+0x3ec>
    11d8:	08 30       	cpi	r16, 0x08	; 8
    11da:	09 f0       	breq	.+2      	; 0x11de <ghw_wrsym+0x64>
    11dc:	e5 c1       	rjmp	.+970    	; 0x15a8 <ghw_wrsym+0x42e>
    11de:	c3 c1       	rjmp	.+902    	; 0x1566 <ghw_wrsym+0x3ec>
   transperant = (mode & GHW_TRANSPERANT) ? 1 : 0;
   smode = mode & GHW_PALETTEMASK;

   /* Is it a color/gray scale symbol or a 'b&w' symbol ? */
   if (smode == 0)
      smode = 1; /* Make compatible with old fonts */
    11e0:	01 e0       	ldi	r16, 0x01	; 1
         {
         G_WARNING( "ghwsymw: symbol color pixel resolution not supported" );
         return;
         }
      /* initiate shift & spmsk ( only used when mode < 8 or ==8 and greysymbol) */
      spshift_start = 8-smode;
    11e2:	98 e0       	ldi	r25, 0x08	; 8
    11e4:	90 1b       	sub	r25, r16
    11e6:	9d 83       	std	Y+5, r25	; 0x05
      /* initiate spmsk */
      spmask = (1<<smode)-1;    /* 1 -> 0x01, 2->0x03,  4->0x0f, 8->0xff */
    11e8:	e1 e0       	ldi	r30, 0x01	; 1
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	00 2e       	mov	r0, r16
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <ghw_wrsym+0x7a>
    11f0:	ee 0f       	add	r30, r30
    11f2:	ff 1f       	adc	r31, r31
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <ghw_wrsym+0x76>
    11f8:	dd 24       	eor	r13, r13
    11fa:	da 94       	dec	r13
    11fc:	de 0e       	add	r13, r30

      if ((smode == 1) || (mode & GHW_GREYMODE))
    11fe:	01 30       	cpi	r16, 0x01	; 1
    1200:	11 f0       	breq	.+4      	; 0x1206 <ghw_wrsym+0x8c>
    1202:	c6 fe       	sbrs	r12, 6
    1204:	2e c0       	rjmp	.+92     	; 0x1262 <ghw_wrsym+0xe8>
         {
         /* "B&W" symbol or grey level */
         if ((mode & GHW_INVERSE) == 0)
    1206:	cc 20       	and	r12, r12
    1208:	6c f0       	brlt	.+26     	; 0x1224 <ghw_wrsym+0xaa>
            {
            fore = ghw_def_foreground;  /* Normal 'b&w' */
    120a:	30 91 95 0d 	lds	r19, 0x0D95
    120e:	3c 87       	std	Y+12, r19	; 0x0c
    1210:	90 90 96 0d 	lds	r9, 0x0D96
            back = ghw_def_background;
    1214:	50 91 97 0d 	lds	r21, 0x0D97
    1218:	5a 87       	std	Y+10, r21	; 0x0a
    121a:	90 91 98 0d 	lds	r25, 0x0D98
    121e:	9b 87       	std	Y+11, r25	; 0x0b
    1220:	1c 2d       	mov	r17, r12
    1222:	24 c0       	rjmp	.+72     	; 0x126c <ghw_wrsym+0xf2>
            }
         else
            {
            fore = ghw_def_background;  /* Inverse 'b&w' */
    1224:	a0 91 97 0d 	lds	r26, 0x0D97
    1228:	ac 87       	std	Y+12, r26	; 0x0c
    122a:	90 90 98 0d 	lds	r9, 0x0D98
            back = ghw_def_foreground;
    122e:	b0 91 95 0d 	lds	r27, 0x0D95
    1232:	ba 87       	std	Y+10, r27	; 0x0a
    1234:	e0 91 96 0d 	lds	r30, 0x0D96
    1238:	eb 87       	std	Y+11, r30	; 0x0b
    123a:	1c 2d       	mov	r17, r12
    123c:	17 c0       	rjmp	.+46     	; 0x126c <ghw_wrsym+0xf2>
         }
      }
   else
      {
      /* RGB modes. Check if symbol resolution is supported */
      if ((smode != 16) && (smode != 18) && (smode != 24) && (smode != 0x1f))
    123e:	9c 2d       	mov	r25, r12
    1240:	9d 71       	andi	r25, 0x1D	; 29
    1242:	90 31       	cpi	r25, 0x10	; 16
    1244:	29 f0       	breq	.+10     	; 0x1250 <ghw_wrsym+0xd6>
    1246:	08 31       	cpi	r16, 0x18	; 24
    1248:	19 f0       	breq	.+6      	; 0x1250 <ghw_wrsym+0xd6>
    124a:	0f 31       	cpi	r16, 0x1F	; 31
    124c:	09 f0       	breq	.+2      	; 0x1250 <ghw_wrsym+0xd6>
    124e:	ac c1       	rjmp	.+856    	; 0x15a8 <ghw_wrsym+0x42e>
         {
         G_WARNING( "ghwsymw: symbol color pixel resolution not supported" );
         return;
         }
      mode &= ~GHW_GREYMODE; /* Just in case */
    1250:	1c 2d       	mov	r17, r12
    1252:	1f 7b       	andi	r17, 0xBF	; 191
   {
   GCOLOR fore = 0;
   GCOLOR back = 0;
   SGUCHAR sval = 0;
   SGUCHAR spshift_start = 0;
   SGUCHAR spmask = 0;
    1254:	d1 2c       	mov	r13, r1
void ghw_wrsym(GXT ltx, GYT lty, GXT rbx, GYT rby, PGSYMBYTE src, SGUINT bw, SGUCHAR mode)
   {
   GCOLOR fore = 0;
   GCOLOR back = 0;
   SGUCHAR sval = 0;
   SGUCHAR spshift_start = 0;
    1256:	1d 82       	std	Y+5, r1	; 0x05
*/

void ghw_wrsym(GXT ltx, GYT lty, GXT rbx, GYT rby, PGSYMBYTE src, SGUINT bw, SGUCHAR mode)
   {
   GCOLOR fore = 0;
   GCOLOR back = 0;
    1258:	1a 86       	std	Y+10, r1	; 0x0a
    125a:	1b 86       	std	Y+11, r1	; 0x0b
   mode is number of bits pr pixel in symbol (or true inverse for B&W character)
*/

void ghw_wrsym(GXT ltx, GYT lty, GXT rbx, GYT rby, PGSYMBYTE src, SGUINT bw, SGUCHAR mode)
   {
   GCOLOR fore = 0;
    125c:	1c 86       	std	Y+12, r1	; 0x0c
    125e:	91 2c       	mov	r9, r1
    1260:	05 c0       	rjmp	.+10     	; 0x126c <ghw_wrsym+0xf2>
    1262:	1c 2d       	mov	r17, r12
   GCOLOR back = 0;
    1264:	1a 86       	std	Y+10, r1	; 0x0a
    1266:	1b 86       	std	Y+11, r1	; 0x0b
   mode is number of bits pr pixel in symbol (or true inverse for B&W character)
*/

void ghw_wrsym(GXT ltx, GYT lty, GXT rbx, GYT rby, PGSYMBYTE src, SGUINT bw, SGUCHAR mode)
   {
   GCOLOR fore = 0;
    1268:	1c 86       	std	Y+12, r1	; 0x0c
    126a:	91 2c       	mov	r9, r1
    126c:	8e 87       	std	Y+14, r24	; 0x0e
    126e:	84 38       	cpi	r24, 0x84	; 132
    1270:	10 f0       	brcs	.+4      	; 0x1276 <ghw_wrsym+0xfc>
    1272:	f3 e8       	ldi	r31, 0x83	; 131
    1274:	fe 87       	std	Y+14, r31	; 0x0e
    1276:	56 2e       	mov	r5, r22
    1278:	3f e9       	ldi	r19, 0x9F	; 159
    127a:	36 17       	cp	r19, r22
    127c:	20 f4       	brcc	.+8      	; 0x1286 <ghw_wrsym+0x10c>
    127e:	0f 2e       	mov	r0, r31
    1280:	ff e9       	ldi	r31, 0x9F	; 159
    1282:	5f 2e       	mov	r5, r31
    1284:	f0 2d       	mov	r31, r0
    1286:	85 2d       	mov	r24, r5
    1288:	52 16       	cp	r5, r18
    128a:	08 f4       	brcc	.+2      	; 0x128e <ghw_wrsym+0x114>
    128c:	82 2f       	mov	r24, r18
    128e:	8e 83       	std	Y+6, r24	; 0x06
    1290:	80 3a       	cpi	r24, 0xA0	; 160
    1292:	10 f0       	brcs	.+4      	; 0x1298 <ghw_wrsym+0x11e>
    1294:	5f e9       	ldi	r21, 0x9F	; 159
    1296:	5e 83       	std	Y+6, r21	; 0x06
    1298:	7e 84       	ldd	r7, Y+14	; 0x0e
    129a:	74 16       	cp	r7, r20
    129c:	08 f4       	brcc	.+2      	; 0x12a0 <ghw_wrsym+0x126>
    129e:	74 2e       	mov	r7, r20
    12a0:	83 e8       	ldi	r24, 0x83	; 131
    12a2:	87 15       	cp	r24, r7
    12a4:	20 f4       	brcc	.+8      	; 0x12ae <ghw_wrsym+0x134>
    12a6:	0f 2e       	mov	r0, r31
    12a8:	f3 e8       	ldi	r31, 0x83	; 131
    12aa:	7f 2e       	mov	r7, r31
    12ac:	f0 2d       	mov	r31, r0
         }
      mode &= ~GHW_GREYMODE; /* Just in case */
      }

   #ifndef GBUFFER
   if (!transperant)
    12ae:	c5 fa       	bst	r12, 5
    12b0:	66 24       	eor	r6, r6
    12b2:	60 f8       	bld	r6, 0
    12b4:	c5 fc       	sbrc	r12, 5
    12b6:	05 c0       	rjmp	.+10     	; 0x12c2 <ghw_wrsym+0x148>
      ghw_set_xyrange(ltx,lty,rbx,rby);
    12b8:	2e 81       	ldd	r18, Y+6	; 0x06
    12ba:	47 2d       	mov	r20, r7
    12bc:	65 2d       	mov	r22, r5
    12be:	8e 85       	ldd	r24, Y+14	; 0x0e
    12c0:	0d d3       	rcall	.+1562   	; 0x18dc <ghw_set_xyrange>
   updatepos = 0;
   #endif

   for (sridx = 0;lty <= rby; lty++)
    12c2:	9e 81       	ldd	r25, Y+6	; 0x06
    12c4:	95 15       	cp	r25, r5
    12c6:	08 f4       	brcc	.+2      	; 0x12ca <ghw_wrsym+0x150>
    12c8:	6f c1       	rjmp	.+734    	; 0x15a8 <ghw_wrsym+0x42e>
                  {
                  #ifdef GHW_INVERTGRAPHIC_SYM
                  pval = (pval ^ 0xff) & spmask; /* Grey level symbols assume 0 is black, invert */
                  #endif
                  /* normalize grey level to blending value (0-255) */
                  pval = (pval * (SGUINT)0xff)/(((SGUINT)1<<smode)-1);
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	00 2e       	mov	r0, r16
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <ghw_wrsym+0x15c>
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	0a 94       	dec	r0
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <ghw_wrsym+0x158>
    12da:	dc 01       	movw	r26, r24
    12dc:	11 97       	sbiw	r26, 0x01	; 1
    12de:	ba 8b       	std	Y+18, r27	; 0x12
    12e0:	a9 8b       	std	Y+17, r26	; 0x11
    12e2:	81 2c       	mov	r8, r1
    12e4:	19 82       	std	Y+1, r1	; 0x01
    12e6:	1a 82       	std	Y+2, r1	; 0x02
    12e8:	1b 82       	std	Y+3, r1	; 0x03
    12ea:	1c 82       	std	Y+4, r1	; 0x04
    12ec:	a1 2c       	mov	r10, r1
      #endif

      sidx = 0;                 /* Point to symbol row start */
      spshift = spshift_start;  /* Shift for normalize first pixel */

      for (x = ltx; x <= rbx; x++)
    12ee:	bd 81       	ldd	r27, Y+5	; 0x05
    12f0:	b9 87       	std	Y+9, r27	; 0x09

         for (;;)
            {
            if (transperant)
               {
               if ((mode & GHW_GREYMODE) || (smode > 24))
    12f2:	10 74       	andi	r17, 0x40	; 64
    12f4:	b1 2e       	mov	r11, r17
               ghw_set_xyrange(x,lty,rbx,rby);
               updatepos = 0;
               }
            ghw_auto_wr( color );
            #endif
            break;
    12f6:	41 2c       	mov	r4, r1
                  {
                  #ifdef GHW_INVERTGRAPHIC_SYM
                  pval = (pval ^ 0xff) & spmask; /* Grey level symbols assume 0 is black, invert */
                  #endif
                  /* normalize grey level to blending value (0-255) */
                  pval = (pval * (SGUINT)0xff)/(((SGUINT)1<<smode)-1);
    12f8:	ef ef       	ldi	r30, 0xFF	; 255
    12fa:	ef 8b       	std	Y+23, r30	; 0x17
                  if (!transperant)
                     /* Create color from blending foreground and background colors */
                     color = ghw_color_blend(fore,back,pval);
                  else
                     color = fore;
    12fc:	9d 86       	std	Y+13, r9	; 0x0d
         #ifdef GBUFFER
         gbufidx++;
         #endif
         }

      sridx += bw;    /* Set index to next symbol row */
    12fe:	97 01       	movw	r18, r14
    1300:	40 e0       	ldi	r20, 0x00	; 0
    1302:	50 e0       	ldi	r21, 0x00	; 0
    1304:	2b 8b       	std	Y+19, r18	; 0x13
    1306:	3c 8b       	std	Y+20, r19	; 0x14
    1308:	4d 8b       	std	Y+21, r20	; 0x15
    130a:	5e 8b       	std	Y+22, r21	; 0x16
    130c:	cd 2c       	mov	r12, r13
    130e:	f0 2e       	mov	r15, r16
      /* Loop character rows */
      /* Calculate buffer start index for line */
      #ifdef GBUFFER
      gbufidx = GINDEX(ltx,lty);
      #else
      if (transperant)
    1310:	66 20       	and	r6, r6
    1312:	31 f0       	breq	.+12     	; 0x1320 <ghw_wrsym+0x1a6>
         {
         ghw_auto_wr_end();
         ghw_set_xyrange(ltx,lty,rbx,rby);
    1314:	2e 81       	ldd	r18, Y+6	; 0x06
    1316:	47 2d       	mov	r20, r7
    1318:	65 2d       	mov	r22, r5
    131a:	8e 85       	ldd	r24, Y+14	; 0x0e
    131c:	df d2       	rcall	.+1470   	; 0x18dc <ghw_set_xyrange>
         updatepos = 0;
    131e:	81 2c       	mov	r8, r1
      #endif

      sidx = 0;                 /* Point to symbol row start */
      spshift = spshift_start;  /* Shift for normalize first pixel */

      for (x = ltx; x <= rbx; x++)
    1320:	3e 85       	ldd	r19, Y+14	; 0x0e
    1322:	73 16       	cp	r7, r19
    1324:	08 f4       	brcc	.+2      	; 0x1328 <ghw_wrsym+0x1ae>
    1326:	09 c1       	rjmp	.+530    	; 0x153a <ghw_wrsym+0x3c0>
    1328:	e3 2e       	mov	r14, r19
    132a:	d9 84       	ldd	r13, Y+9	; 0x09
    132c:	00 e0       	ldi	r16, 0x00	; 0
    132e:	10 e0       	ldi	r17, 0x00	; 0
                  }
               }
            else
            #endif
               {
               col = (SGULONG)(src[sridx + sidx++]);
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	9a 81       	ldd	r25, Y+2	; 0x02
    1334:	ac 01       	movw	r20, r24
    1336:	42 0d       	add	r20, r2
    1338:	53 1d       	adc	r21, r3
    133a:	58 87       	std	Y+8, r21	; 0x08
    133c:	4f 83       	std	Y+7, r20	; 0x07
               if (smode >= 16)
                  {
                  col = (col<<8) + (SGULONG)(src[sridx + sidx++]);
                  if (smode > 16)
                     {
                     col = (col<<8) + (SGULONG)(src[sridx + sidx++]);
    133e:	58 8b       	std	Y+16, r21	; 0x10
    1340:	4f 87       	std	Y+15, r20	; 0x0f
      spshift = spshift_start;  /* Shift for normalize first pixel */

      for (x = ltx; x <= rbx; x++)
         {
         SGUCHAR pval = 0;
         if ((smode < 8) || ((smode == 8) && (mode & GHW_GREYMODE)))
    1342:	b7 e0       	ldi	r27, 0x07	; 7
    1344:	bf 15       	cp	r27, r15
    1346:	30 f4       	brcc	.+12     	; 0x1354 <ghw_wrsym+0x1da>
    1348:	e8 e0       	ldi	r30, 0x08	; 8
    134a:	fe 12       	cpse	r15, r30
    134c:	4c c0       	rjmp	.+152    	; 0x13e6 <ghw_wrsym+0x26c>
    134e:	bb 20       	and	r11, r11
    1350:	09 f4       	brne	.+2      	; 0x1354 <ghw_wrsym+0x1da>
    1352:	18 c1       	rjmp	.+560    	; 0x1584 <ghw_wrsym+0x40a>
            {
            /* Extract color from symbol byte */
            if (spshift == spshift_start)
    1354:	fd 81       	ldd	r31, Y+5	; 0x05
    1356:	df 12       	cpse	r13, r31
    1358:	0a c0       	rjmp	.+20     	; 0x136e <ghw_wrsym+0x1f4>
                  /* Load new symbol byte from virtual memory */
                  sval = gi_symv_by(sridx + sidx);
               else
               #endif
                  /* Load new symbol byte from normal memory */
                  sval = src[sridx + sidx];
    135a:	f1 01       	movw	r30, r2
    135c:	e0 0f       	add	r30, r16
    135e:	f1 1f       	adc	r31, r17
    1360:	29 81       	ldd	r18, Y+1	; 0x01
    1362:	3a 81       	ldd	r19, Y+2	; 0x02
    1364:	e2 0f       	add	r30, r18
    1366:	f3 1f       	adc	r31, r19
    1368:	a0 80       	ld	r10, Z
               sidx++;
    136a:	0f 5f       	subi	r16, 0xFF	; 255
    136c:	1f 4f       	sbci	r17, 0xFF	; 255
               }

            pval = (sval >> spshift) & spmask;   /* normalize bit */
    136e:	8a 2d       	mov	r24, r10
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	0d 2c       	mov	r0, r13
    1374:	02 c0       	rjmp	.+4      	; 0x137a <ghw_wrsym+0x200>
    1376:	95 95       	asr	r25
    1378:	87 95       	ror	r24
    137a:	0a 94       	dec	r0
    137c:	e2 f7       	brpl	.-8      	; 0x1376 <ghw_wrsym+0x1fc>
    137e:	9c 2c       	mov	r9, r12
    1380:	98 22       	and	r9, r24
            if (spshift == 0)
    1382:	dd 20       	and	r13, r13
    1384:	11 f0       	breq	.+4      	; 0x138a <ghw_wrsym+0x210>
               spshift = spshift_start;
            else
               spshift -= smode;
    1386:	df 18       	sub	r13, r15
    1388:	01 c0       	rjmp	.+2      	; 0x138c <ghw_wrsym+0x212>
               sidx++;
               }

            pval = (sval >> spshift) & spmask;   /* normalize bit */
            if (spshift == 0)
               spshift = spshift_start;
    138a:	d9 84       	ldd	r13, Y+9	; 0x09
            else
               spshift -= smode;

            if (smode == 1)
    138c:	31 e0       	ldi	r19, 0x01	; 1
    138e:	f3 12       	cpse	r15, r19
    1390:	08 c0       	rjmp	.+16     	; 0x13a2 <ghw_wrsym+0x228>
               {
               /* Convert B&W symbol to foreground / background color */
               color = (pval != 0) ? fore : back;
    1392:	99 20       	and	r9, r9
    1394:	09 f4       	brne	.+2      	; 0x1398 <ghw_wrsym+0x21e>
    1396:	8c c0       	rjmp	.+280    	; 0x14b0 <ghw_wrsym+0x336>
    1398:	4c 85       	ldd	r20, Y+12	; 0x0c
    139a:	48 8f       	std	Y+24, r20	; 0x18
    139c:	5d 85       	ldd	r21, Y+13	; 0x0d
    139e:	59 8f       	std	Y+25, r21	; 0x19
    13a0:	8b c0       	rjmp	.+278    	; 0x14b8 <ghw_wrsym+0x33e>
               }
            else
               {
               /* Convert and map color pixels */
               if (mode & GHW_GREYMODE)
    13a2:	bb 20       	and	r11, r11
    13a4:	a9 f0       	breq	.+42     	; 0x13d0 <ghw_wrsym+0x256>
                  {
                  #ifdef GHW_INVERTGRAPHIC_SYM
                  pval = (pval ^ 0xff) & spmask; /* Grey level symbols assume 0 is black, invert */
    13a6:	90 94       	com	r9
    13a8:	9c 20       	and	r9, r12
                  #endif
                  /* normalize grey level to blending value (0-255) */
                  pval = (pval * (SGUINT)0xff)/(((SGUINT)1<<smode)-1);
    13aa:	af ef       	ldi	r26, 0xFF	; 255
    13ac:	a9 9d       	mul	r26, r9
    13ae:	c0 01       	movw	r24, r0
    13b0:	11 24       	eor	r1, r1
    13b2:	69 89       	ldd	r22, Y+17	; 0x11
    13b4:	7a 89       	ldd	r23, Y+18	; 0x12
    13b6:	2c d4       	rcall	.+2136   	; 0x1c10 <__udivmodhi4>
    13b8:	96 2e       	mov	r9, r22
                  if (!transperant)
    13ba:	61 10       	cpse	r6, r1
    13bc:	85 c0       	rjmp	.+266    	; 0x14c8 <ghw_wrsym+0x34e>
                     /* Create color from blending foreground and background colors */
                     color = ghw_color_blend(fore,back,pval);
    13be:	46 2f       	mov	r20, r22
    13c0:	6a 85       	ldd	r22, Y+10	; 0x0a
    13c2:	7b 85       	ldd	r23, Y+11	; 0x0b
    13c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    13c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    13c8:	c3 d1       	rcall	.+902    	; 0x1750 <ghw_color_blend>
    13ca:	99 8f       	std	Y+25, r25	; 0x19
    13cc:	88 8f       	std	Y+24, r24	; 0x18
    13ce:	a0 c0       	rjmp	.+320    	; 0x1510 <ghw_wrsym+0x396>
                  }
               else
                  {
                  #if (GHW_PALETTE_SIZE > 0)
                  /* Make a palette lookup */
                  color = ghw_palette_opr[pval]; /* 2,4 bit pr pixel modes */
    13d0:	e9 2d       	mov	r30, r9
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	ee 0f       	add	r30, r30
    13d6:	ff 1f       	adc	r31, r31
    13d8:	eb 58       	subi	r30, 0x8B	; 139
    13da:	f2 4f       	sbci	r31, 0xF2	; 242
    13dc:	20 81       	ld	r18, Z
    13de:	31 81       	ldd	r19, Z+1	; 0x01
    13e0:	39 8f       	std	Y+25, r19	; 0x19
    13e2:	28 8f       	std	Y+24, r18	; 0x18
    13e4:	69 c0       	rjmp	.+210    	; 0x14b8 <ghw_wrsym+0x33e>
                  }
               }
            else
            #endif
               {
               col = (SGULONG)(src[sridx + sidx++]);
    13e6:	d8 01       	movw	r26, r16
    13e8:	11 96       	adiw	r26, 0x01	; 1
    13ea:	ef 81       	ldd	r30, Y+7	; 0x07
    13ec:	f8 85       	ldd	r31, Y+8	; 0x08
    13ee:	e0 0f       	add	r30, r16
    13f0:	f1 1f       	adc	r31, r17
    13f2:	60 81       	ld	r22, Z
    13f4:	70 e0       	ldi	r23, 0x00	; 0
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	90 e0       	ldi	r25, 0x00	; 0
               if (smode >= 16)
    13fa:	3f e0       	ldi	r19, 0x0F	; 15
    13fc:	3f 15       	cp	r19, r15
    13fe:	08 f0       	brcs	.+2      	; 0x1402 <ghw_wrsym+0x288>
    1400:	48 c0       	rjmp	.+144    	; 0x1492 <ghw_wrsym+0x318>
                  {
                  col = (col<<8) + (SGULONG)(src[sridx + sidx++]);
    1402:	22 27       	eor	r18, r18
    1404:	36 2f       	mov	r19, r22
    1406:	47 2f       	mov	r20, r23
    1408:	58 2f       	mov	r21, r24
    140a:	2a 8f       	std	Y+26, r18	; 0x1a
    140c:	3b 8f       	std	Y+27, r19	; 0x1b
    140e:	4c 8f       	std	Y+28, r20	; 0x1c
    1410:	5d 8f       	std	Y+29, r21	; 0x1d
    1412:	a8 01       	movw	r20, r16
    1414:	4e 5f       	subi	r20, 0xFE	; 254
    1416:	5f 4f       	sbci	r21, 0xFF	; 255
    1418:	59 8f       	std	Y+25, r21	; 0x19
    141a:	48 8f       	std	Y+24, r20	; 0x18
    141c:	9d 01       	movw	r18, r26
    141e:	22 0d       	add	r18, r2
    1420:	33 1d       	adc	r19, r3
    1422:	a9 81       	ldd	r26, Y+1	; 0x01
    1424:	ba 81       	ldd	r27, Y+2	; 0x02
    1426:	a2 0f       	add	r26, r18
    1428:	b3 1f       	adc	r27, r19
    142a:	8c 91       	ld	r24, X
    142c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    142e:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1430:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1432:	5d 8d       	ldd	r21, Y+29	; 0x1d
    1434:	28 0f       	add	r18, r24
    1436:	31 1d       	adc	r19, r1
    1438:	41 1d       	adc	r20, r1
    143a:	51 1d       	adc	r21, r1
    143c:	ca 01       	movw	r24, r20
    143e:	b9 01       	movw	r22, r18
                  if (smode > 16)
    1440:	30 e1       	ldi	r19, 0x10	; 16
    1442:	3f 15       	cp	r19, r15
    1444:	20 f5       	brcc	.+72     	; 0x148e <ghw_wrsym+0x314>
                     {
                     col = (col<<8) + (SGULONG)(src[sridx + sidx++]);
    1446:	44 27       	eor	r20, r20
    1448:	56 2f       	mov	r21, r22
    144a:	67 2f       	mov	r22, r23
    144c:	78 2f       	mov	r23, r24
    144e:	d8 01       	movw	r26, r16
    1450:	13 96       	adiw	r26, 0x03	; 3
    1452:	28 8d       	ldd	r18, Y+24	; 0x18
    1454:	39 8d       	ldd	r19, Y+25	; 0x19
    1456:	8f 85       	ldd	r24, Y+15	; 0x0f
    1458:	98 89       	ldd	r25, Y+16	; 0x10
    145a:	28 0f       	add	r18, r24
    145c:	39 1f       	adc	r19, r25
    145e:	f9 01       	movw	r30, r18
    1460:	20 81       	ld	r18, Z
    1462:	cb 01       	movw	r24, r22
    1464:	ba 01       	movw	r22, r20
    1466:	62 0f       	add	r22, r18
    1468:	71 1d       	adc	r23, r1
    146a:	81 1d       	adc	r24, r1
    146c:	91 1d       	adc	r25, r1
                     if (smode > 24)
    146e:	f8 e1       	ldi	r31, 0x18	; 24
    1470:	ff 15       	cp	r31, r15
    1472:	08 f0       	brcs	.+2      	; 0x1476 <ghw_wrsym+0x2fc>
    1474:	96 c0       	rjmp	.+300    	; 0x15a2 <ghw_wrsym+0x428>
                        {
                        if (transperant)
    1476:	66 20       	and	r6, r6
    1478:	31 f0       	breq	.+12     	; 0x1486 <ghw_wrsym+0x30c>
                           pval = src[sridx + sidx];
    147a:	2f 85       	ldd	r18, Y+15	; 0x0f
    147c:	38 89       	ldd	r19, Y+16	; 0x10
    147e:	a2 0f       	add	r26, r18
    1480:	b3 1f       	adc	r27, r19
    1482:	9c 90       	ld	r9, X
    1484:	01 c0       	rjmp	.+2      	; 0x1488 <ghw_wrsym+0x30e>
                        else
                           pval = 0xff;
    1486:	9f 88       	ldd	r9, Y+23	; 0x17
                        sidx++;
    1488:	d8 01       	movw	r26, r16
    148a:	14 96       	adiw	r26, 0x04	; 4
    148c:	8b c0       	rjmp	.+278    	; 0x15a4 <ghw_wrsym+0x42a>
            #endif
               {
               col = (SGULONG)(src[sridx + sidx++]);
               if (smode >= 16)
                  {
                  col = (col<<8) + (SGULONG)(src[sridx + sidx++]);
    148e:	a8 8d       	ldd	r26, Y+24	; 0x18
    1490:	b9 8d       	ldd	r27, Y+25	; 0x19
                        sidx++;
                        }
                     }
                  }
               }
            if (smode != GDISPPIXW)
    1492:	30 e1       	ldi	r19, 0x10	; 16
    1494:	f3 16       	cp	r15, r19
    1496:	39 f0       	breq	.+14     	; 0x14a6 <ghw_wrsym+0x32c>
    1498:	8d 01       	movw	r16, r26
    149a:	94 2c       	mov	r9, r4
               {
               /* Symbol use a different color resolution than controller configuration,
                  do conversion to controller color */
               color = ghw_color_conv(col,smode);
    149c:	4f 2d       	mov	r20, r15
    149e:	45 d1       	rcall	.+650    	; 0x172a <ghw_color_conv>
    14a0:	99 8f       	std	Y+25, r25	; 0x19
    14a2:	88 8f       	std	Y+24, r24	; 0x18
    14a4:	09 c0       	rjmp	.+18     	; 0x14b8 <ghw_wrsym+0x33e>
               }
            else
               color = (GCOLOR) col;
    14a6:	79 8f       	std	Y+25, r23	; 0x19
    14a8:	68 8f       	std	Y+24, r22	; 0x18
    14aa:	8d 01       	movw	r16, r26
    14ac:	94 2c       	mov	r9, r4
    14ae:	04 c0       	rjmp	.+8      	; 0x14b8 <ghw_wrsym+0x33e>
    14b0:	4a 85       	ldd	r20, Y+10	; 0x0a
    14b2:	48 8f       	std	Y+24, r20	; 0x18
    14b4:	5b 85       	ldd	r21, Y+11	; 0x0b
    14b6:	59 8f       	std	Y+25, r21	; 0x19
            }

         for (;;)
            {
            if (transperant)
    14b8:	66 20       	and	r6, r6
    14ba:	51 f1       	breq	.+84     	; 0x1510 <ghw_wrsym+0x396>
               {
               if ((mode & GHW_GREYMODE) || (smode > 24))
    14bc:	b1 10       	cpse	r11, r1
    14be:	08 c0       	rjmp	.+16     	; 0x14d0 <ghw_wrsym+0x356>
    14c0:	88 e1       	ldi	r24, 0x18	; 24
    14c2:	8f 15       	cp	r24, r15
    14c4:	e0 f4       	brcc	.+56     	; 0x14fe <ghw_wrsym+0x384>
    14c6:	04 c0       	rjmp	.+8      	; 0x14d0 <ghw_wrsym+0x356>
                  pval = (pval * (SGUINT)0xff)/(((SGUINT)1<<smode)-1);
                  if (!transperant)
                     /* Create color from blending foreground and background colors */
                     color = ghw_color_blend(fore,back,pval);
                  else
                     color = fore;
    14c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    14ca:	98 8f       	std	Y+24, r25	; 0x18
    14cc:	ad 85       	ldd	r26, Y+13	; 0x0d
    14ce:	a9 8f       	std	Y+25, r26	; 0x19
            {
            if (transperant)
               {
               if ((mode & GHW_GREYMODE) || (smode > 24))
                  { /* Blending with background pixel color */
                  if (pval == 0x00)
    14d0:	99 20       	and	r9, r9
    14d2:	51 f1       	breq	.+84     	; 0x1528 <ghw_wrsym+0x3ae>
                     #ifndef GBUFFER
                     updatepos = 1;
                     #endif
                     break;
                     }
                  if (pval != 0xff)
    14d4:	bf ef       	ldi	r27, 0xFF	; 255
    14d6:	9b 16       	cp	r9, r27
    14d8:	d9 f0       	breq	.+54     	; 0x1510 <ghw_wrsym+0x396>
                      /* Transperant symbol mode, Read background pixel to do blending */
                      #ifdef GBUFFER
                      back = gbuf[gbufidx];
                      #else
                      ghw_auto_wr_end();
                      ghw_set_xyrange(x,lty,rbx,rby);
    14da:	2e 81       	ldd	r18, Y+6	; 0x06
    14dc:	47 2d       	mov	r20, r7
    14de:	65 2d       	mov	r22, r5
    14e0:	8e 2d       	mov	r24, r14
    14e2:	fc d1       	rcall	.+1016   	; 0x18dc <ghw_set_xyrange>
                      #ifndef GHW_NO_RDINC
                      ghw_auto_rd_start();
    14e4:	2c d2       	rcall	.+1112   	; 0x193e <ghw_auto_rd_start>
                      back = ghw_auto_rd();
    14e6:	30 d2       	rcall	.+1120   	; 0x1948 <ghw_auto_rd>
    14e8:	8a 87       	std	Y+10, r24	; 0x0a
    14ea:	9b 87       	std	Y+11, r25	; 0x0b
                      back = ghw_rd(x,lty);
                      #endif
                      updatepos = 1;
                      #endif
                     #endif
                     color = ghw_color_blend(color,back,pval);
    14ec:	49 2d       	mov	r20, r9
    14ee:	68 2f       	mov	r22, r24
    14f0:	79 2f       	mov	r23, r25
    14f2:	88 8d       	ldd	r24, Y+24	; 0x18
    14f4:	99 8d       	ldd	r25, Y+25	; 0x19
    14f6:	2c d1       	rcall	.+600    	; 0x1750 <ghw_color_blend>
    14f8:	99 8f       	std	Y+25, r25	; 0x19
    14fa:	88 8f       	std	Y+24, r24	; 0x18
    14fc:	0b c0       	rjmp	.+22     	; 0x1514 <ghw_wrsym+0x39a>
                     }
                  }
               else
                  {
                  /* On off transperance by symbol color match */
                  if (color == ghw_def_background)
    14fe:	80 91 97 0d 	lds	r24, 0x0D97
    1502:	90 91 98 0d 	lds	r25, 0x0D98
    1506:	e8 8d       	ldd	r30, Y+24	; 0x18
    1508:	f9 8d       	ldd	r31, Y+25	; 0x19
    150a:	e8 17       	cp	r30, r24
    150c:	f9 07       	cpc	r31, r25
    150e:	79 f0       	breq	.+30     	; 0x152e <ghw_wrsym+0x3b4>

            #ifdef GBUFFER
            gbuf[gbufidx] = color;
            #else
            /* Write and auto increment */
            if (updatepos)
    1510:	88 20       	and	r8, r8
    1512:	29 f0       	breq	.+10     	; 0x151e <ghw_wrsym+0x3a4>
               { /* previous pixels was transperant, update position */
               ghw_auto_wr_end();
               ghw_set_xyrange(x,lty,rbx,rby);
    1514:	2e 81       	ldd	r18, Y+6	; 0x06
    1516:	47 2d       	mov	r20, r7
    1518:	65 2d       	mov	r22, r5
    151a:	8e 2d       	mov	r24, r14
    151c:	df d1       	rcall	.+958    	; 0x18dc <ghw_set_xyrange>
               updatepos = 0;
               }
            ghw_auto_wr( color );
    151e:	88 8d       	ldd	r24, Y+24	; 0x18
    1520:	99 8d       	ldd	r25, Y+25	; 0x19
    1522:	03 d2       	rcall	.+1030   	; 0x192a <ghw_auto_wr>
            #endif
            break;
    1524:	84 2c       	mov	r8, r4
    1526:	05 c0       	rjmp	.+10     	; 0x1532 <ghw_wrsym+0x3b8>
                  { /* Blending with background pixel color */
                  if (pval == 0x00)
                     {
                     /* Fully transperant just skip pixel */
                     #ifndef GBUFFER
                     updatepos = 1;
    1528:	88 24       	eor	r8, r8
    152a:	83 94       	inc	r8
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <ghw_wrsym+0x3b8>
                  /* On off transperance by symbol color match */
                  if (color == ghw_def_background)
                     {
                     /* Fully transperant just skip pixel */
                     #ifndef GBUFFER
                     updatepos = 1;
    152e:	88 24       	eor	r8, r8
    1530:	83 94       	inc	r8
      #endif

      sidx = 0;                 /* Point to symbol row start */
      spshift = spshift_start;  /* Shift for normalize first pixel */

      for (x = ltx; x <= rbx; x++)
    1532:	e3 94       	inc	r14
    1534:	7e 14       	cp	r7, r14
    1536:	08 f0       	brcs	.+2      	; 0x153a <ghw_wrsym+0x3c0>
    1538:	04 cf       	rjmp	.-504    	; 0x1342 <ghw_wrsym+0x1c8>
         #ifdef GBUFFER
         gbufidx++;
         #endif
         }

      sridx += bw;    /* Set index to next symbol row */
    153a:	29 81       	ldd	r18, Y+1	; 0x01
    153c:	3a 81       	ldd	r19, Y+2	; 0x02
    153e:	4b 81       	ldd	r20, Y+3	; 0x03
    1540:	5c 81       	ldd	r21, Y+4	; 0x04
    1542:	8b 89       	ldd	r24, Y+19	; 0x13
    1544:	9c 89       	ldd	r25, Y+20	; 0x14
    1546:	ad 89       	ldd	r26, Y+21	; 0x15
    1548:	be 89       	ldd	r27, Y+22	; 0x16
    154a:	28 0f       	add	r18, r24
    154c:	39 1f       	adc	r19, r25
    154e:	4a 1f       	adc	r20, r26
    1550:	5b 1f       	adc	r21, r27
    1552:	29 83       	std	Y+1, r18	; 0x01
    1554:	3a 83       	std	Y+2, r19	; 0x02
    1556:	4b 83       	std	Y+3, r20	; 0x03
    1558:	5c 83       	std	Y+4, r21	; 0x04
   if (!transperant)
      ghw_set_xyrange(ltx,lty,rbx,rby);
   updatepos = 0;
   #endif

   for (sridx = 0;lty <= rby; lty++)
    155a:	53 94       	inc	r5
    155c:	9e 81       	ldd	r25, Y+6	; 0x06
    155e:	95 15       	cp	r25, r5
    1560:	08 f0       	brcs	.+2      	; 0x1564 <ghw_wrsym+0x3ea>
    1562:	d6 ce       	rjmp	.-596    	; 0x1310 <ghw_wrsym+0x196>
    1564:	21 c0       	rjmp	.+66     	; 0x15a8 <ghw_wrsym+0x42e>
         {
         G_WARNING( "ghwsymw: symbol color pixel resolution not supported" );
         return;
         }
      /* initiate shift & spmsk ( only used when mode < 8 or ==8 and greysymbol) */
      spshift_start = 8-smode;
    1566:	98 e0       	ldi	r25, 0x08	; 8
    1568:	90 1b       	sub	r25, r16
    156a:	9d 83       	std	Y+5, r25	; 0x05
      /* initiate spmsk */
      spmask = (1<<smode)-1;    /* 1 -> 0x01, 2->0x03,  4->0x0f, 8->0xff */
    156c:	e1 e0       	ldi	r30, 0x01	; 1
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	00 2e       	mov	r0, r16
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <ghw_wrsym+0x3fe>
    1574:	ee 0f       	add	r30, r30
    1576:	ff 1f       	adc	r31, r31
    1578:	0a 94       	dec	r0
    157a:	e2 f7       	brpl	.-8      	; 0x1574 <ghw_wrsym+0x3fa>
    157c:	dd 24       	eor	r13, r13
    157e:	da 94       	dec	r13
    1580:	de 0e       	add	r13, r30
    1582:	3f ce       	rjmp	.-898    	; 0x1202 <ghw_wrsym+0x88>
                  }
               }
            else
            #endif
               {
               col = (SGULONG)(src[sridx + sidx++]);
    1584:	f1 01       	movw	r30, r2
    1586:	e0 0f       	add	r30, r16
    1588:	f1 1f       	adc	r31, r17
    158a:	a9 81       	ldd	r26, Y+1	; 0x01
    158c:	ba 81       	ldd	r27, Y+2	; 0x02
    158e:	ea 0f       	add	r30, r26
    1590:	fb 1f       	adc	r31, r27
    1592:	60 81       	ld	r22, Z
    1594:	70 e0       	ldi	r23, 0x00	; 0
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	0f 5f       	subi	r16, 0xFF	; 255
    159c:	1f 4f       	sbci	r17, 0xFF	; 255
    159e:	94 2c       	mov	r9, r4
    15a0:	7d cf       	rjmp	.-262    	; 0x149c <ghw_wrsym+0x322>
      sidx = 0;                 /* Point to symbol row start */
      spshift = spshift_start;  /* Shift for normalize first pixel */

      for (x = ltx; x <= rbx; x++)
         {
         SGUCHAR pval = 0;
    15a2:	94 2c       	mov	r9, r4
    15a4:	8d 01       	movw	r16, r26
    15a6:	7a cf       	rjmp	.-268    	; 0x149c <ghw_wrsym+0x322>
         }

      sridx += bw;    /* Set index to next symbol row */
      }
   ghw_auto_wr_end();
   }
    15a8:	6d 96       	adiw	r28, 0x1d	; 29
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	f8 94       	cli
    15ae:	de bf       	out	0x3e, r29	; 62
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	cd bf       	out	0x3d, r28	; 61
    15b4:	df 91       	pop	r29
    15b6:	cf 91       	pop	r28
    15b8:	1f 91       	pop	r17
    15ba:	0f 91       	pop	r16
    15bc:	ff 90       	pop	r15
    15be:	ef 90       	pop	r14
    15c0:	df 90       	pop	r13
    15c2:	cf 90       	pop	r12
    15c4:	bf 90       	pop	r11
    15c6:	af 90       	pop	r10
    15c8:	9f 90       	pop	r9
    15ca:	8f 90       	pop	r8
    15cc:	7f 90       	pop	r7
    15ce:	6f 90       	pop	r6
    15d0:	5f 90       	pop	r5
    15d2:	4f 90       	pop	r4
    15d4:	3f 90       	pop	r3
    15d6:	2f 90       	pop	r2
    15d8:	08 95       	ret

000015da <ghw_color_to_rgb>:

/*
   Convert RGB symbol color value to generic RGB palette color
*/
void ghw_color_to_rgb( SGULONG color, GPALETTE_RGB *palette, SGUCHAR mode )
   {
    15da:	0f 93       	push	r16
    15dc:	1f 93       	push	r17
    15de:	fa 01       	movw	r30, r20
   if (palette == NULL)
    15e0:	30 97       	sbiw	r30, 0x00	; 0
    15e2:	09 f4       	brne	.+2      	; 0x15e6 <ghw_color_to_rgb+0xc>
    15e4:	9f c0       	rjmp	.+318    	; 0x1724 <ghw_color_to_rgb+0x14a>
      return;

   if (mode == 8)
    15e6:	28 30       	cpi	r18, 0x08	; 8
    15e8:	81 f5       	brne	.+96     	; 0x164a <ghw_color_to_rgb+0x70>
      {
      palette->r = (SGUCHAR) (color & 0xe0);
    15ea:	36 2f       	mov	r19, r22
    15ec:	30 7e       	andi	r19, 0xE0	; 224
      palette->g = (SGUCHAR) ((color << 3) & 0xe0);
    15ee:	26 2f       	mov	r18, r22
    15f0:	22 0f       	add	r18, r18
    15f2:	22 0f       	add	r18, r18
    15f4:	22 0f       	add	r18, r18
    15f6:	20 7e       	andi	r18, 0xE0	; 224
      palette->b = (SGUCHAR) ((color << 6) & 0xc0);
    15f8:	62 95       	swap	r22
    15fa:	66 0f       	add	r22, r22
    15fc:	66 0f       	add	r22, r22
    15fe:	60 7c       	andi	r22, 0xC0	; 192
      /* Let MSBit on each color ribble down to get full saturation */
      palette->r |= (palette->r >> 3) | (palette->r >> 5);
    1600:	93 2f       	mov	r25, r19
    1602:	96 95       	lsr	r25
    1604:	96 95       	lsr	r25
    1606:	96 95       	lsr	r25
    1608:	83 2f       	mov	r24, r19
    160a:	82 95       	swap	r24
    160c:	86 95       	lsr	r24
    160e:	87 70       	andi	r24, 0x07	; 7
    1610:	89 2b       	or	r24, r25
    1612:	38 2b       	or	r19, r24
    1614:	30 83       	st	Z, r19
      palette->g |= (palette->g >> 3) | (palette->g >> 5);
    1616:	92 2f       	mov	r25, r18
    1618:	96 95       	lsr	r25
    161a:	96 95       	lsr	r25
    161c:	96 95       	lsr	r25
    161e:	82 2f       	mov	r24, r18
    1620:	82 95       	swap	r24
    1622:	86 95       	lsr	r24
    1624:	87 70       	andi	r24, 0x07	; 7
    1626:	89 2b       	or	r24, r25
    1628:	28 2b       	or	r18, r24
    162a:	21 83       	std	Z+1, r18	; 0x01
      palette->b |= (palette->b >> 2) | (palette->b >> 4) | (palette->b >> 6);
    162c:	96 2f       	mov	r25, r22
    162e:	96 95       	lsr	r25
    1630:	96 95       	lsr	r25
    1632:	86 2f       	mov	r24, r22
    1634:	82 95       	swap	r24
    1636:	8f 70       	andi	r24, 0x0F	; 15
    1638:	89 2b       	or	r24, r25
    163a:	86 2b       	or	r24, r22
    163c:	62 95       	swap	r22
    163e:	66 95       	lsr	r22
    1640:	66 95       	lsr	r22
    1642:	63 70       	andi	r22, 0x03	; 3
    1644:	68 2b       	or	r22, r24
    1646:	62 83       	std	Z+2, r22	; 0x02
    1648:	6d c0       	rjmp	.+218    	; 0x1724 <ghw_color_to_rgb+0x14a>
      }
   else
   if (mode == 16)
    164a:	20 31       	cpi	r18, 0x10	; 16
    164c:	79 f5       	brne	.+94     	; 0x16ac <ghw_color_to_rgb+0xd2>
      {
      palette->r = (SGUCHAR)((color >> 8) & 0xf8);
    164e:	47 2f       	mov	r20, r23
    1650:	48 7f       	andi	r20, 0xF8	; 248
    1652:	40 83       	st	Z, r20
      palette->g = (SGUCHAR)((color >> 3) & 0xfc);
    1654:	8b 01       	movw	r16, r22
    1656:	9c 01       	movw	r18, r24
    1658:	68 94       	set
    165a:	12 f8       	bld	r1, 2
    165c:	36 95       	lsr	r19
    165e:	27 95       	ror	r18
    1660:	17 95       	ror	r17
    1662:	07 95       	ror	r16
    1664:	16 94       	lsr	r1
    1666:	d1 f7       	brne	.-12     	; 0x165c <ghw_color_to_rgb+0x82>
    1668:	50 2f       	mov	r21, r16
    166a:	5c 7f       	andi	r21, 0xFC	; 252
    166c:	51 83       	std	Z+1, r21	; 0x01
      palette->b = (SGUCHAR)((color << 3) & 0xf8);
    166e:	66 0f       	add	r22, r22
    1670:	66 0f       	add	r22, r22
    1672:	66 0f       	add	r22, r22
    1674:	62 83       	std	Z+2, r22	; 0x02
      /* Let MSBit on each color ribble down to get full saturation */
      if (palette->r == palette->b)
    1676:	46 13       	cpse	r20, r22
    1678:	05 c0       	rjmp	.+10     	; 0x1684 <ghw_color_to_rgb+0xaa>
         {
         if (palette->r == (palette->g & 0xf8))
    167a:	08 7f       	andi	r16, 0xF8	; 248
    167c:	40 13       	cpse	r20, r16
    167e:	09 c0       	rjmp	.+18     	; 0x1692 <ghw_color_to_rgb+0xb8>
            palette->g = palette->r;  /* Promote grey level */
    1680:	41 83       	std	Z+1, r20	; 0x01
    1682:	07 c0       	rjmp	.+14     	; 0x1692 <ghw_color_to_rgb+0xb8>
         }
      else
         palette->g |= (palette->g >> 6);
    1684:	85 2f       	mov	r24, r21
    1686:	82 95       	swap	r24
    1688:	86 95       	lsr	r24
    168a:	86 95       	lsr	r24
    168c:	83 70       	andi	r24, 0x03	; 3
    168e:	58 2b       	or	r21, r24
    1690:	51 83       	std	Z+1, r21	; 0x01
      palette->r |= (palette->r >> 5);
    1692:	84 2f       	mov	r24, r20
    1694:	82 95       	swap	r24
    1696:	86 95       	lsr	r24
    1698:	87 70       	andi	r24, 0x07	; 7
    169a:	48 2b       	or	r20, r24
    169c:	40 83       	st	Z, r20
      palette->b |= (palette->b >> 5);
    169e:	86 2f       	mov	r24, r22
    16a0:	82 95       	swap	r24
    16a2:	86 95       	lsr	r24
    16a4:	87 70       	andi	r24, 0x07	; 7
    16a6:	68 2b       	or	r22, r24
    16a8:	62 83       	std	Z+2, r22	; 0x02
    16aa:	3c c0       	rjmp	.+120    	; 0x1724 <ghw_color_to_rgb+0x14a>
      }
   else
   if (mode == 18)
    16ac:	22 31       	cpi	r18, 0x12	; 18
    16ae:	89 f5       	brne	.+98     	; 0x1712 <ghw_color_to_rgb+0x138>
      {
      palette->r = (SGUCHAR)((color >> 10) & 0xfc);
    16b0:	8b 01       	movw	r16, r22
    16b2:	9c 01       	movw	r18, r24
    16b4:	0f 2e       	mov	r0, r31
    16b6:	fa e0       	ldi	r31, 0x0A	; 10
    16b8:	36 95       	lsr	r19
    16ba:	27 95       	ror	r18
    16bc:	17 95       	ror	r17
    16be:	07 95       	ror	r16
    16c0:	fa 95       	dec	r31
    16c2:	d1 f7       	brne	.-12     	; 0x16b8 <ghw_color_to_rgb+0xde>
    16c4:	f0 2d       	mov	r31, r0
    16c6:	40 2f       	mov	r20, r16
    16c8:	4c 7f       	andi	r20, 0xFC	; 252
      palette->g = (SGUCHAR)((color >> 4) & 0xfc);
    16ca:	8b 01       	movw	r16, r22
    16cc:	9c 01       	movw	r18, r24
    16ce:	68 94       	set
    16d0:	13 f8       	bld	r1, 3
    16d2:	36 95       	lsr	r19
    16d4:	27 95       	ror	r18
    16d6:	17 95       	ror	r17
    16d8:	07 95       	ror	r16
    16da:	16 94       	lsr	r1
    16dc:	d1 f7       	brne	.-12     	; 0x16d2 <ghw_color_to_rgb+0xf8>
    16de:	20 2f       	mov	r18, r16
    16e0:	2c 7f       	andi	r18, 0xFC	; 252
      palette->b = (SGUCHAR)((color << 2) & 0xfc);
    16e2:	66 0f       	add	r22, r22
    16e4:	66 0f       	add	r22, r22
      /* Let MSBit on each color ribble down to get full saturation */
      palette->r |= (palette->r >> 6);
    16e6:	04 2f       	mov	r16, r20
    16e8:	02 95       	swap	r16
    16ea:	06 95       	lsr	r16
    16ec:	06 95       	lsr	r16
    16ee:	03 70       	andi	r16, 0x03	; 3
    16f0:	40 2b       	or	r20, r16
    16f2:	40 83       	st	Z, r20
      palette->g |= (palette->g >> 6);
    16f4:	02 2f       	mov	r16, r18
    16f6:	02 95       	swap	r16
    16f8:	06 95       	lsr	r16
    16fa:	06 95       	lsr	r16
    16fc:	03 70       	andi	r16, 0x03	; 3
    16fe:	20 2b       	or	r18, r16
    1700:	21 83       	std	Z+1, r18	; 0x01
      palette->b |= (palette->b >> 6);
    1702:	86 2f       	mov	r24, r22
    1704:	82 95       	swap	r24
    1706:	86 95       	lsr	r24
    1708:	86 95       	lsr	r24
    170a:	83 70       	andi	r24, 0x03	; 3
    170c:	68 2b       	or	r22, r24
    170e:	62 83       	std	Z+2, r22	; 0x02
    1710:	09 c0       	rjmp	.+18     	; 0x1724 <ghw_color_to_rgb+0x14a>
      }
   else
   if (mode >= 24)
    1712:	28 31       	cpi	r18, 0x18	; 24
    1714:	20 f0       	brcs	.+8      	; 0x171e <ghw_color_to_rgb+0x144>
      {
      palette->r = (SGUCHAR)(color >> 16);
    1716:	80 83       	st	Z, r24
      palette->g = (SGUCHAR)(color >> 8);
    1718:	71 83       	std	Z+1, r23	; 0x01
      palette->b = (SGUCHAR) color;
    171a:	62 83       	std	Z+2, r22	; 0x02
    171c:	03 c0       	rjmp	.+6      	; 0x1724 <ghw_color_to_rgb+0x14a>
      }
   else
      {
      palette->r = 0;
    171e:	10 82       	st	Z, r1
      palette->g = 0;
    1720:	11 82       	std	Z+1, r1	; 0x01
      palette->b = 0;
    1722:	12 82       	std	Z+2, r1	; 0x02
      }
   }
    1724:	1f 91       	pop	r17
    1726:	0f 91       	pop	r16
    1728:	08 95       	ret

0000172a <ghw_color_conv>:
/*
   Convert a RGB symbol color mode to hardware specific color mode
   This function is called both by ghwsymwr and common functions
*/
GCOLOR ghw_color_conv(SGULONG dat, SGUCHAR dat_bit_pr_pixel)
   {
    172a:	cf 93       	push	r28
    172c:	df 93       	push	r29
    172e:	00 d0       	rcall	.+0      	; 0x1730 <ghw_color_conv+0x6>
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	24 2f       	mov	r18, r20
   GPALETTE_RGB palette;
   ghw_color_to_rgb(dat, &palette, dat_bit_pr_pixel);
    1736:	ae 01       	movw	r20, r28
    1738:	4f 5f       	subi	r20, 0xFF	; 255
    173a:	5f 4f       	sbci	r21, 0xFF	; 255
    173c:	4e df       	rcall	.-356    	; 0x15da <ghw_color_to_rgb>
   return ghw_rgb_to_color( &palette );
    173e:	ce 01       	movw	r24, r28
    1740:	01 96       	adiw	r24, 0x01	; 1
    1742:	27 d1       	rcall	.+590    	; 0x1992 <ghw_rgb_to_color>
   }
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	df 91       	pop	r29
    174c:	cf 91       	pop	r28
    174e:	08 95       	ret

00001750 <ghw_color_blend>:
/*
   Blend two RGB colors using the hardware specific color mode
   This function is called both by ghwsymwr and common functions
*/
GCOLOR ghw_color_blend(GCOLOR fore, GCOLOR back, SGUCHAR alpha)
   {
    1750:	2f 92       	push	r2
    1752:	3f 92       	push	r3
    1754:	4f 92       	push	r4
    1756:	5f 92       	push	r5
    1758:	6f 92       	push	r6
    175a:	7f 92       	push	r7
    175c:	8f 92       	push	r8
    175e:	9f 92       	push	r9
    1760:	af 92       	push	r10
    1762:	bf 92       	push	r11
    1764:	cf 92       	push	r12
    1766:	df 92       	push	r13
    1768:	ef 92       	push	r14
    176a:	ff 92       	push	r15
    176c:	0f 93       	push	r16
    176e:	1f 93       	push	r17
    1770:	cf 93       	push	r28
    1772:	df 93       	push	r29
    1774:	00 d0       	rcall	.+0      	; 0x1776 <ghw_color_blend+0x26>
    1776:	00 d0       	rcall	.+0      	; 0x1778 <ghw_color_blend+0x28>
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	8c 01       	movw	r16, r24
    177e:	7e 83       	std	Y+6, r23	; 0x06
    1780:	6d 83       	std	Y+5, r22	; 0x05
   SGUCHAR ialpha;
   if (alpha == 0)
    1782:	44 23       	and	r20, r20
    1784:	09 f4       	brne	.+2      	; 0x1788 <ghw_color_blend+0x38>
    1786:	66 c0       	rjmp	.+204    	; 0x1854 <ghw_color_blend+0x104>
      return back;
   if (alpha == 0xff)
    1788:	4f 3f       	cpi	r20, 0xFF	; 255
    178a:	09 f4       	brne	.+2      	; 0x178e <ghw_color_blend+0x3e>
    178c:	66 c0       	rjmp	.+204    	; 0x185a <ghw_color_blend+0x10a>
      return fore;
   ialpha = 0xff-alpha;
   #if (GDISPPIXW <= 24)
   return (GCOLOR)
        ((((((SGULONG)(fore & G_RED_MSK  ))*alpha + ((SGULONG)(back & G_RED_MSK  ))*ialpha)/0xff)&G_RED_MSK  ) |
    178e:	84 2e       	mov	r8, r20
    1790:	91 2c       	mov	r9, r1
    1792:	a1 2c       	mov	r10, r1
    1794:	b1 2c       	mov	r11, r1
   SGUCHAR ialpha;
   if (alpha == 0)
      return back;
   if (alpha == 0xff)
      return fore;
   ialpha = 0xff-alpha;
    1796:	44 2e       	mov	r4, r20
    1798:	40 94       	com	r4
   #if (GDISPPIXW <= 24)
   return (GCOLOR)
        ((((((SGULONG)(fore & G_RED_MSK  ))*alpha + ((SGULONG)(back & G_RED_MSK  ))*ialpha)/0xff)&G_RED_MSK  ) |
    179a:	51 2c       	mov	r5, r1
    179c:	61 2c       	mov	r6, r1
    179e:	71 2c       	mov	r7, r1
         (((((SGULONG)(fore & G_GREEN_MSK))*alpha + ((SGULONG)(back & G_GREEN_MSK))*ialpha)/0xff)&G_GREEN_MSK) |
    17a0:	db 01       	movw	r26, r22
    17a2:	a0 7e       	andi	r26, 0xE0	; 224
    17a4:	b7 70       	andi	r27, 0x07	; 7
    17a6:	a3 01       	movw	r20, r6
    17a8:	92 01       	movw	r18, r4
    17aa:	8a d2       	rcall	.+1300   	; 0x1cc0 <__muluhisi3>
    17ac:	6b 01       	movw	r12, r22
    17ae:	7c 01       	movw	r14, r24
    17b0:	d8 01       	movw	r26, r16
    17b2:	a0 7e       	andi	r26, 0xE0	; 224
    17b4:	b7 70       	andi	r27, 0x07	; 7
    17b6:	a5 01       	movw	r20, r10
    17b8:	94 01       	movw	r18, r8
    17ba:	82 d2       	rcall	.+1284   	; 0x1cc0 <__muluhisi3>
    17bc:	6c 0d       	add	r22, r12
    17be:	7d 1d       	adc	r23, r13
    17c0:	8e 1d       	adc	r24, r14
    17c2:	9f 1d       	adc	r25, r15
    17c4:	c1 2c       	mov	r12, r1
    17c6:	d1 2c       	mov	r13, r1
    17c8:	76 01       	movw	r14, r12
    17ca:	ca 94       	dec	r12
    17cc:	a7 01       	movw	r20, r14
    17ce:	96 01       	movw	r18, r12
    17d0:	46 d2       	rcall	.+1164   	; 0x1c5e <__udivmodsi4>
      return back;
   if (alpha == 0xff)
      return fore;
   ialpha = 0xff-alpha;
   #if (GDISPPIXW <= 24)
   return (GCOLOR)
    17d2:	19 01       	movw	r2, r18
    17d4:	80 ee       	ldi	r24, 0xE0	; 224
    17d6:	28 22       	and	r2, r24
    17d8:	87 e0       	ldi	r24, 0x07	; 7
    17da:	38 22       	and	r3, r24
        ((((((SGULONG)(fore & G_RED_MSK  ))*alpha + ((SGULONG)(back & G_RED_MSK  ))*ialpha)/0xff)&G_RED_MSK  ) |
    17dc:	ad 81       	ldd	r26, Y+5	; 0x05
    17de:	be 81       	ldd	r27, Y+6	; 0x06
    17e0:	aa 27       	eor	r26, r26
    17e2:	b8 7f       	andi	r27, 0xF8	; 248
    17e4:	a3 01       	movw	r20, r6
    17e6:	92 01       	movw	r18, r4
    17e8:	6b d2       	rcall	.+1238   	; 0x1cc0 <__muluhisi3>
    17ea:	69 83       	std	Y+1, r22	; 0x01
    17ec:	7a 83       	std	Y+2, r23	; 0x02
    17ee:	8b 83       	std	Y+3, r24	; 0x03
    17f0:	9c 83       	std	Y+4, r25	; 0x04
    17f2:	d8 01       	movw	r26, r16
    17f4:	aa 27       	eor	r26, r26
    17f6:	b8 7f       	andi	r27, 0xF8	; 248
    17f8:	a5 01       	movw	r20, r10
    17fa:	94 01       	movw	r18, r8
    17fc:	61 d2       	rcall	.+1218   	; 0x1cc0 <__muluhisi3>
    17fe:	29 81       	ldd	r18, Y+1	; 0x01
    1800:	3a 81       	ldd	r19, Y+2	; 0x02
    1802:	4b 81       	ldd	r20, Y+3	; 0x03
    1804:	5c 81       	ldd	r21, Y+4	; 0x04
    1806:	62 0f       	add	r22, r18
    1808:	73 1f       	adc	r23, r19
    180a:	84 1f       	adc	r24, r20
    180c:	95 1f       	adc	r25, r21
    180e:	a7 01       	movw	r20, r14
    1810:	96 01       	movw	r18, r12
    1812:	25 d2       	rcall	.+1098   	; 0x1c5e <__udivmodsi4>
      return back;
   if (alpha == 0xff)
      return fore;
   ialpha = 0xff-alpha;
   #if (GDISPPIXW <= 24)
   return (GCOLOR)
    1814:	22 27       	eor	r18, r18
    1816:	38 7f       	andi	r19, 0xF8	; 248
    1818:	22 2a       	or	r2, r18
    181a:	33 2a       	or	r3, r19
        ((((((SGULONG)(fore & G_RED_MSK  ))*alpha + ((SGULONG)(back & G_RED_MSK  ))*ialpha)/0xff)&G_RED_MSK  ) |
         (((((SGULONG)(fore & G_GREEN_MSK))*alpha + ((SGULONG)(back & G_GREEN_MSK))*ialpha)/0xff)&G_GREEN_MSK) |
         (((((SGULONG)(fore & G_BLUE_MSK ))*alpha + ((SGULONG)(back & G_BLUE_MSK ))*ialpha)/0xff)&G_BLUE_MSK ));
    181c:	ad 81       	ldd	r26, Y+5	; 0x05
    181e:	be 81       	ldd	r27, Y+6	; 0x06
    1820:	af 71       	andi	r26, 0x1F	; 31
    1822:	bb 27       	eor	r27, r27
    1824:	a3 01       	movw	r20, r6
    1826:	92 01       	movw	r18, r4
    1828:	4b d2       	rcall	.+1174   	; 0x1cc0 <__muluhisi3>
    182a:	2b 01       	movw	r4, r22
    182c:	3c 01       	movw	r6, r24
    182e:	d8 01       	movw	r26, r16
    1830:	af 71       	andi	r26, 0x1F	; 31
    1832:	bb 27       	eor	r27, r27
    1834:	a5 01       	movw	r20, r10
    1836:	94 01       	movw	r18, r8
    1838:	43 d2       	rcall	.+1158   	; 0x1cc0 <__muluhisi3>
    183a:	64 0d       	add	r22, r4
    183c:	75 1d       	adc	r23, r5
    183e:	86 1d       	adc	r24, r6
    1840:	97 1d       	adc	r25, r7
    1842:	a7 01       	movw	r20, r14
    1844:	96 01       	movw	r18, r12
    1846:	0b d2       	rcall	.+1046   	; 0x1c5e <__udivmodsi4>
      return back;
   if (alpha == 0xff)
      return fore;
   ialpha = 0xff-alpha;
   #if (GDISPPIXW <= 24)
   return (GCOLOR)
    1848:	2f 71       	andi	r18, 0x1F	; 31
    184a:	33 27       	eor	r19, r19
    184c:	c1 01       	movw	r24, r2
    184e:	82 2b       	or	r24, r18
    1850:	93 2b       	or	r25, r19
    1852:	03 c0       	rjmp	.+6      	; 0x185a <ghw_color_blend+0x10a>
*/
GCOLOR ghw_color_blend(GCOLOR fore, GCOLOR back, SGUCHAR alpha)
   {
   SGUCHAR ialpha;
   if (alpha == 0)
      return back;
    1854:	8d 81       	ldd	r24, Y+5	; 0x05
    1856:	9e 81       	ldd	r25, Y+6	; 0x06
    1858:	00 c0       	rjmp	.+0      	; 0x185a <ghw_color_blend+0x10a>
   return (GCOLOR)
        ((((((SGULONG)(fore & G_RED_MSK  ))*alpha + ((SGULONG)(back & G_RED_MSK  ))*ialpha)/0xff)&G_RED_MSK  ) |
         (((((SGULONG)(fore & G_GREEN_MSK))*alpha + ((SGULONG)(back & G_GREEN_MSK))*ialpha)/0xff)&G_GREEN_MSK) |
         (((((SGULONG)(fore & G_BLUE_MSK ))*alpha + ((SGULONG)(back & G_BLUE_MSK ))*ialpha)/0xff)&G_BLUE_MSK ) | 0xff000000);
   #endif
   }
    185a:	26 96       	adiw	r28, 0x06	; 6
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	cd bf       	out	0x3d, r28	; 61
    1866:	df 91       	pop	r29
    1868:	cf 91       	pop	r28
    186a:	1f 91       	pop	r17
    186c:	0f 91       	pop	r16
    186e:	ff 90       	pop	r15
    1870:	ef 90       	pop	r14
    1872:	df 90       	pop	r13
    1874:	cf 90       	pop	r12
    1876:	bf 90       	pop	r11
    1878:	af 90       	pop	r10
    187a:	9f 90       	pop	r9
    187c:	8f 90       	pop	r8
    187e:	7f 90       	pop	r7
    1880:	6f 90       	pop	r6
    1882:	5f 90       	pop	r5
    1884:	4f 90       	pop	r4
    1886:	3f 90       	pop	r3
    1888:	2f 90       	pop	r2
    188a:	08 95       	ret

0000188c <ghw_cmd_wait>:
   ghw_cmd_wr(GCTRL_DISP_CTRL3,0x38); /* GON=1,DTE=1,D1-0=10 */
   ghw_cmd_wait( 100 );               /* Wait 2 frames */
   ghw_cmd_wr(GCTRL_DISP_CTRL3,0x04); /* GON=1,DTE=1,D1-0=11 */
   ghw_cmd_wait( 100 );               /* Wait 2 frames */
   #else
   ghw_cmd(GCTRL_DISPOFF);
    188c:	40 ed       	ldi	r20, 0xD0	; 208
    188e:	57 e0       	ldi	r21, 0x07	; 7
    1890:	1a c0       	rjmp	.+52     	; 0x18c6 <ghw_cmd_wait+0x3a>
    1892:	50 93 fd 0b 	sts	0x0BFD, r21
    1896:	40 93 fc 0b 	sts	0x0BFC, r20
    189a:	20 91 fc 0b 	lds	r18, 0x0BFC
    189e:	30 91 fd 0b 	lds	r19, 0x0BFD
    18a2:	23 2b       	or	r18, r19
    18a4:	81 f0       	breq	.+32     	; 0x18c6 <ghw_cmd_wait+0x3a>
    18a6:	20 91 fc 0b 	lds	r18, 0x0BFC
    18aa:	30 91 fd 0b 	lds	r19, 0x0BFD
    18ae:	21 50       	subi	r18, 0x01	; 1
    18b0:	31 09       	sbc	r19, r1
    18b2:	30 93 fd 0b 	sts	0x0BFD, r19
    18b6:	20 93 fc 0b 	sts	0x0BFC, r18
    18ba:	20 91 fc 0b 	lds	r18, 0x0BFC
    18be:	30 91 fd 0b 	lds	r19, 0x0BFD
    18c2:	23 2b       	or	r18, r19
    18c4:	81 f7       	brne	.-32     	; 0x18a6 <ghw_cmd_wait+0x1a>
    18c6:	81 50       	subi	r24, 0x01	; 1
    18c8:	20 f7       	brcc	.-56     	; 0x1892 <ghw_cmd_wait+0x6>
    18ca:	08 95       	ret

000018cc <ghw_cmddat>:
    18cc:	68 2f       	mov	r22, r24
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	2a c1       	rjmp	.+596    	; 0x1b26 <simwrby>
    18d2:	08 95       	ret

000018d4 <ghw_cmd>:
    18d4:	68 2f       	mov	r22, r24
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	26 c1       	rjmp	.+588    	; 0x1b26 <simwrby>
    18da:	08 95       	ret

000018dc <ghw_set_xyrange>:
    18dc:	0f 93       	push	r16
    18de:	1f 93       	push	r17
    18e0:	cf 93       	push	r28
    18e2:	df 93       	push	r29
    18e4:	08 2f       	mov	r16, r24
    18e6:	d6 2f       	mov	r29, r22
    18e8:	14 2f       	mov	r17, r20
    18ea:	c2 2f       	mov	r28, r18
    18ec:	8a e2       	ldi	r24, 0x2A	; 42
    18ee:	f2 df       	rcall	.-28     	; 0x18d4 <ghw_cmd>
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	ec df       	rcall	.-40     	; 0x18cc <ghw_cmddat>
    18f4:	80 2f       	mov	r24, r16
    18f6:	ea df       	rcall	.-44     	; 0x18cc <ghw_cmddat>
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	e8 df       	rcall	.-48     	; 0x18cc <ghw_cmddat>
    18fc:	81 2f       	mov	r24, r17
    18fe:	e6 df       	rcall	.-52     	; 0x18cc <ghw_cmddat>
    1900:	8b e2       	ldi	r24, 0x2B	; 43
    1902:	e8 df       	rcall	.-48     	; 0x18d4 <ghw_cmd>
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	e2 df       	rcall	.-60     	; 0x18cc <ghw_cmddat>
    1908:	8d 2f       	mov	r24, r29
    190a:	e0 df       	rcall	.-64     	; 0x18cc <ghw_cmddat>
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	de df       	rcall	.-68     	; 0x18cc <ghw_cmddat>
    1910:	8c 2f       	mov	r24, r28
    1912:	dc df       	rcall	.-72     	; 0x18cc <ghw_cmddat>
    1914:	8c e2       	ldi	r24, 0x2C	; 44
    1916:	de df       	rcall	.-68     	; 0x18d4 <ghw_cmd>
    1918:	df 91       	pop	r29
    191a:	cf 91       	pop	r28
    191c:	1f 91       	pop	r17
    191e:	0f 91       	pop	r16
    1920:	08 95       	ret

00001922 <ghw_setxypos>:
    1922:	2f e9       	ldi	r18, 0x9F	; 159
    1924:	43 e8       	ldi	r20, 0x83	; 131
    1926:	da cf       	rjmp	.-76     	; 0x18dc <ghw_set_xyrange>
    1928:	08 95       	ret

0000192a <ghw_auto_wr>:
    192a:	cf 93       	push	r28
    192c:	c8 2f       	mov	r28, r24
    192e:	69 2f       	mov	r22, r25
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	f9 d0       	rcall	.+498    	; 0x1b26 <simwrby>
    1934:	6c 2f       	mov	r22, r28
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	f6 d0       	rcall	.+492    	; 0x1b26 <simwrby>
    193a:	cf 91       	pop	r28
    193c:	08 95       	ret

0000193e <ghw_auto_rd_start>:
    193e:	8e e2       	ldi	r24, 0x2E	; 46
    1940:	c9 df       	rcall	.-110    	; 0x18d4 <ghw_cmd>
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	f1 c0       	rjmp	.+482    	; 0x1b28 <simrdby>
    1946:	08 95       	ret

00001948 <ghw_auto_rd>:
    1948:	0f 93       	push	r16
    194a:	1f 93       	push	r17
    194c:	cf 93       	push	r28
    194e:	df 93       	push	r29
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	ea d0       	rcall	.+468    	; 0x1b28 <simrdby>
    1954:	88 7f       	andi	r24, 0xF8	; 248
    1956:	08 2f       	mov	r16, r24
    1958:	10 e0       	ldi	r17, 0x00	; 0
    195a:	10 2f       	mov	r17, r16
    195c:	00 27       	eor	r16, r16
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	e3 d0       	rcall	.+454    	; 0x1b28 <simrdby>
    1962:	8c 7f       	andi	r24, 0xFC	; 252
    1964:	c8 2f       	mov	r28, r24
    1966:	d0 e0       	ldi	r29, 0x00	; 0
    1968:	cc 0f       	add	r28, r28
    196a:	dd 1f       	adc	r29, r29
    196c:	cc 0f       	add	r28, r28
    196e:	dd 1f       	adc	r29, r29
    1970:	cc 0f       	add	r28, r28
    1972:	dd 1f       	adc	r29, r29
    1974:	c0 2b       	or	r28, r16
    1976:	d1 2b       	or	r29, r17
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	d6 d0       	rcall	.+428    	; 0x1b28 <simrdby>
    197c:	86 95       	lsr	r24
    197e:	86 95       	lsr	r24
    1980:	86 95       	lsr	r24
    1982:	9e 01       	movw	r18, r28
    1984:	28 2b       	or	r18, r24
    1986:	c9 01       	movw	r24, r18
    1988:	df 91       	pop	r29
    198a:	cf 91       	pop	r28
    198c:	1f 91       	pop	r17
    198e:	0f 91       	pop	r16
    1990:	08 95       	ret

00001992 <ghw_rgb_to_color>:
    1992:	fc 01       	movw	r30, r24
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	91 f0       	breq	.+36     	; 0x19bc <ghw_rgb_to_color+0x2a>
    1998:	20 81       	ld	r18, Z
    199a:	28 7f       	andi	r18, 0xF8	; 248
    199c:	81 81       	ldd	r24, Z+1	; 0x01
    199e:	8c 7f       	andi	r24, 0xFC	; 252
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	88 0f       	add	r24, r24
    19a4:	99 1f       	adc	r25, r25
    19a6:	88 0f       	add	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	88 0f       	add	r24, r24
    19ac:	99 1f       	adc	r25, r25
    19ae:	92 2b       	or	r25, r18
    19b0:	22 81       	ldd	r18, Z+2	; 0x02
    19b2:	26 95       	lsr	r18
    19b4:	26 95       	lsr	r18
    19b6:	26 95       	lsr	r18
    19b8:	82 2b       	or	r24, r18
    19ba:	08 95       	ret
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	08 95       	ret

000019c2 <ghw_palette_wr>:
    19c2:	cf 92       	push	r12
    19c4:	df 92       	push	r13
    19c6:	ef 92       	push	r14
    19c8:	ff 92       	push	r15
    19ca:	0f 93       	push	r16
    19cc:	1f 93       	push	r17
    19ce:	cf 93       	push	r28
    19d0:	df 93       	push	r29
    19d2:	00 d0       	rcall	.+0      	; 0x19d4 <ghw_palette_wr+0x12>
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	61 15       	cp	r22, r1
    19da:	71 05       	cpc	r23, r1
    19dc:	49 f0       	breq	.+18     	; 0x19f0 <ghw_palette_wr+0x2e>
    19de:	9b 01       	movw	r18, r22
    19e0:	28 0f       	add	r18, r24
    19e2:	39 1f       	adc	r19, r25
    19e4:	21 31       	cpi	r18, 0x11	; 17
    19e6:	31 05       	cpc	r19, r1
    19e8:	18 f4       	brcc	.+6      	; 0x19f0 <ghw_palette_wr+0x2e>
    19ea:	41 15       	cp	r20, r1
    19ec:	51 05       	cpc	r21, r1
    19ee:	21 f4       	brne	.+8      	; 0x19f8 <ghw_palette_wr+0x36>
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	80 93 99 0d 	sts	0x0D99, r24
    19f6:	2a c0       	rjmp	.+84     	; 0x1a4c <ghw_palette_wr+0x8a>
    19f8:	10 92 99 0d 	sts	0x0D99, r1
    19fc:	7b 01       	movw	r14, r22
    19fe:	21 e0       	ldi	r18, 0x01	; 1
    1a00:	e2 1a       	sub	r14, r18
    1a02:	f1 08       	sbc	r15, r1
    1a04:	8a 01       	movw	r16, r20
    1a06:	0e 5f       	subi	r16, 0xFE	; 254
    1a08:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0a:	88 0f       	add	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	fc 01       	movw	r30, r24
    1a10:	eb 58       	subi	r30, 0x8B	; 139
    1a12:	f2 4f       	sbci	r31, 0xF2	; 242
    1a14:	6f 01       	movw	r12, r30
    1a16:	f8 01       	movw	r30, r16
    1a18:	32 97       	sbiw	r30, 0x02	; 2
    1a1a:	80 81       	ld	r24, Z
    1a1c:	89 83       	std	Y+1, r24	; 0x01
    1a1e:	31 96       	adiw	r30, 0x01	; 1
    1a20:	80 81       	ld	r24, Z
    1a22:	8a 83       	std	Y+2, r24	; 0x02
    1a24:	f8 01       	movw	r30, r16
    1a26:	80 81       	ld	r24, Z
    1a28:	8b 83       	std	Y+3, r24	; 0x03
    1a2a:	ce 01       	movw	r24, r28
    1a2c:	01 96       	adiw	r24, 0x01	; 1
    1a2e:	b1 df       	rcall	.-158    	; 0x1992 <ghw_rgb_to_color>
    1a30:	f6 01       	movw	r30, r12
    1a32:	81 93       	st	Z+, r24
    1a34:	91 93       	st	Z+, r25
    1a36:	6f 01       	movw	r12, r30
    1a38:	f1 e0       	ldi	r31, 0x01	; 1
    1a3a:	ef 1a       	sub	r14, r31
    1a3c:	f1 08       	sbc	r15, r1
    1a3e:	0d 5f       	subi	r16, 0xFD	; 253
    1a40:	1f 4f       	sbci	r17, 0xFF	; 255
    1a42:	2f ef       	ldi	r18, 0xFF	; 255
    1a44:	e2 16       	cp	r14, r18
    1a46:	f2 06       	cpc	r15, r18
    1a48:	31 f7       	brne	.-52     	; 0x1a16 <ghw_palette_wr+0x54>
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	df 91       	pop	r29
    1a54:	cf 91       	pop	r28
    1a56:	1f 91       	pop	r17
    1a58:	0f 91       	pop	r16
    1a5a:	ff 90       	pop	r15
    1a5c:	ef 90       	pop	r14
    1a5e:	df 90       	pop	r13
    1a60:	cf 90       	pop	r12
    1a62:	08 95       	ret

00001a64 <ghw_dispon>:
   ghw_cmd_wr(GCTRL_DISP_CTRL3,0x38); /* GON=1,DTE=1,D1-0=10 */
   ghw_cmd_wait( 100 );               /* Wait 2 frames */
   ghw_cmd_wr(GCTRL_DISP_CTRL3,0x3c); /* GON=1,DTE=1,D1-0=11 */
   ghw_cmd_wait( 100 );               /* Wait 2 frames */
   #else
   ghw_cmd(GCTRL_DISPON);
    1a64:	89 e2       	ldi	r24, 0x29	; 41
    1a66:	36 cf       	rjmp	.-404    	; 0x18d4 <ghw_cmd>
    1a68:	08 95       	ret

00001a6a <ghw_init>:

   Return 0 if no error,
   Return != 0 if some error
*/
SGBOOL ghw_init(void)
   {
    1a6a:	ef 92       	push	r14
    1a6c:	ff 92       	push	r15
    1a6e:	0f 93       	push	r16
    1a70:	1f 93       	push	r17
    1a72:	cf 93       	push	r28
    1a74:	df 93       	push	r29
   irbx = 0;
   irby = 0;
   ghw_upddelay = 0;
   #endif

   glcd_err = 0;
    1a76:	10 92 99 0d 	sts	0x0D99, r1
   ghw_io_init(); /* Set any hardware interface lines, controller hardware reset */
    1a7a:	58 d0       	rcall	.+176    	; 0x1b2c <ghw_io_init>
      else
         gbuf_owner = 1;
      }
   #endif

   if (glcd_err != 0)
    1a7c:	80 91 99 0d 	lds	r24, 0x0D99
    1a80:	81 11       	cpse	r24, r1
    1a82:	49 c0       	rjmp	.+146    	; 0x1b16 <ghw_init+0xac>
   /* Mask unused bits */
   fore &= 0xfcfcfc;
   back &= 0xfcfcfc;
   #endif
   /* Update active colors */
   ghw_def_foreground = fore;
    1a84:	10 92 96 0d 	sts	0x0D96, r1
    1a88:	10 92 95 0d 	sts	0x0D95, r1
   ghw_def_background = back;
    1a8c:	8f ef       	ldi	r24, 0xFF	; 255
    1a8e:	9f ef       	ldi	r25, 0xFF	; 255
    1a90:	90 93 98 0d 	sts	0x0D98, r25
    1a94:	80 93 97 0d 	sts	0x0D97, r24
   /* Set default colors */
   ghw_setcolor( GHW_PALETTE_FOREGROUND, GHW_PALETTE_BACKGROUND );

   #if (GHW_PALETTE_SIZE > 0)
   /* Load palette */
   ghw_palette_wr(0, sizeof(ghw_palette)/sizeof(GPALETTE_RGB), (GCONSTP GPALETTE_RGB PFCODE *)&ghw_palette[0]);
    1a98:	45 e3       	ldi	r20, 0x35	; 53
    1a9a:	57 e0       	ldi	r21, 0x07	; 7
    1a9c:	60 e1       	ldi	r22, 0x10	; 16
    1a9e:	70 e0       	ldi	r23, 0x00	; 0
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	8e df       	rcall	.-228    	; 0x19c2 <ghw_palette_wr>
      Wait for hardware reset to complete
      If a delay after reset is already introdued by other parts of the
      system you may reduce the wait time parameter in the call below or
      comment out the call
   */
   ghw_cmd_wait(150); /* Wait for hardware to stabilize after power on */
    1aa6:	86 e9       	ldi	r24, 0x96	; 150
    1aa8:	f1 de       	rcall	.-542    	; 0x188c <ghw_cmd_wait>
    1aaa:	c2 e0       	ldi	r28, 0x02	; 2
    1aac:	d2 e0       	ldi	r29, 0x02	; 2
    1aae:	0f 2e       	mov	r0, r31
    1ab0:	f3 e2       	ldi	r31, 0x23	; 35
    1ab2:	ef 2e       	mov	r14, r31
    1ab4:	f2 e0       	ldi	r31, 0x02	; 2
    1ab6:	ff 2e       	mov	r15, r31
    1ab8:	f0 2d       	mov	r31, r0
    1aba:	8e 01       	movw	r16, r28
    1abc:	fe 01       	movw	r30, r28
    1abe:	32 97       	sbiw	r30, 0x02	; 2
      }
   #else
   /* Command mode */
   for (i=0; i < sizeof(as1dregs)/sizeof(S1D_REGS); i++)
      {
      if (as1dregs[i].index == CMD)
    1ac0:	80 81       	ld	r24, Z
    1ac2:	81 11       	cpse	r24, r1
    1ac4:	03 c0       	rjmp	.+6      	; 0x1acc <ghw_init+0x62>
         ghw_cmd(as1dregs[i].value);
    1ac6:	88 81       	ld	r24, Y
    1ac8:	05 df       	rcall	.-502    	; 0x18d4 <ghw_cmd>
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <ghw_init+0x66>
      else
         ghw_cmddat(as1dregs[i].value);
    1acc:	88 81       	ld	r24, Y
    1ace:	fe de       	rcall	.-516    	; 0x18cc <ghw_cmddat>
    1ad0:	f8 01       	movw	r30, r16
    1ad2:	31 97       	sbiw	r30, 0x01	; 1
      if (as1dregs[i].delay != 0)
    1ad4:	80 81       	ld	r24, Z
    1ad6:	81 11       	cpse	r24, r1
         ghw_cmd_wait( as1dregs[i].delay );
    1ad8:	d9 de       	rcall	.-590    	; 0x188c <ghw_cmd_wait>
    1ada:	23 96       	adiw	r28, 0x03	; 3
      if (as1dregs[i].delay != 0)
         ghw_cmd_wait( as1dregs[i].delay );
      }
   #else
   /* Command mode */
   for (i=0; i < sizeof(as1dregs)/sizeof(S1D_REGS); i++)
    1adc:	ce 15       	cp	r28, r14
    1ade:	df 05       	cpc	r29, r15
    1ae0:	61 f7       	brne	.-40     	; 0x1aba <ghw_init+0x50>
   /* Test RGB-BGR setting (configured with GHW_COLOR_SWAP) */
//    ghw_dispon(); /* placed here to ease initial debug */
//    ghw_bufset( G_RED );
//    ghw_bufset( G_GREEN );
//    ghw_bufset( G_BLUE );
   ghw_bufset( ghw_def_background );
    1ae2:	00 91 97 0d 	lds	r16, 0x0D97
    1ae6:	10 91 98 0d 	lds	r17, 0x0D98
*/
static void ghw_bufset(GCOLOR color)
   {
   GBUFINT cnt;
   cnt = 0;
   ghw_set_xyrange(0,0,GDISPW-1,GDISPH-1);
    1aea:	2f e9       	ldi	r18, 0x9F	; 159
    1aec:	43 e8       	ldi	r20, 0x83	; 131
    1aee:	60 e0       	ldi	r22, 0x00	; 0
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	f4 de       	rcall	.-536    	; 0x18dc <ghw_set_xyrange>
    1af4:	c0 e0       	ldi	r28, 0x00	; 0
    1af6:	d0 e0       	ldi	r29, 0x00	; 0
      #ifndef GBUFFER
      else
          break; /* All clearing done in hardware, skip completely */
      #endif
      #else
      ghw_auto_wr(color);      /* Set LCD buffer */
    1af8:	c8 01       	movw	r24, r16
    1afa:	17 df       	rcall	.-466    	; 0x192a <ghw_auto_wr>
    1afc:	21 96       	adiw	r28, 0x01	; 1
      #endif
      }
   while (++cnt < ((GBUFINT) GDISPW) * ((GBUFINT) GDISPH)); /* Loop until x+y wrap */
    1afe:	c0 38       	cpi	r28, 0x80	; 128
    1b00:	82 e5       	ldi	r24, 0x52	; 82
    1b02:	d8 07       	cpc	r29, r24
    1b04:	c9 f7       	brne	.-14     	; 0x1af8 <ghw_init+0x8e>
//    ghw_dispon(); /* placed here to ease initial debug */
//    ghw_bufset( G_RED );
//    ghw_bufset( G_GREEN );
//    ghw_bufset( G_BLUE );
   ghw_bufset( ghw_def_background );
   ghw_dispon();     /* Turn display on after buffer clear */
    1b06:	ae df       	rcall	.-164    	; 0x1a64 <ghw_dispon>
   #endif

   ghw_updatehw();  /* Flush to display hdw or simulator */


   return (glcd_err != 0) ? 1 : 0;
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	90 91 99 0d 	lds	r25, 0x0D99
    1b0e:	91 11       	cpse	r25, r1
    1b10:	03 c0       	rjmp	.+6      	; 0x1b18 <ghw_init+0xae>
    1b12:	80 e0       	ldi	r24, 0x00	; 0
    1b14:	01 c0       	rjmp	.+2      	; 0x1b18 <ghw_init+0xae>
         gbuf_owner = 1;
      }
   #endif

   if (glcd_err != 0)
      return 1;
    1b16:	81 e0       	ldi	r24, 0x01	; 1

   ghw_updatehw();  /* Flush to display hdw or simulator */


   return (glcd_err != 0) ? 1 : 0;
   }
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28
    1b1c:	1f 91       	pop	r17
    1b1e:	0f 91       	pop	r16
    1b20:	ff 90       	pop	r15
    1b22:	ef 90       	pop	r14
    1b24:	08 95       	ret

00001b26 <simwrby>:
   This access function is 8 bit processor data bus interfaces.

   The address parameter adr is assumed to be either 0 or 1.
*/
void simwrby(SGUCHAR adr, SGUCHAR dat)
   {
    1b26:	08 95       	ret

00001b28 <simrdby>:
   /* c: Set /RD active low, (Delay min 150ns), */
   /* d: Read data from data port */
   /* e1:Set /RD passive high, */
   /* e2:Set /CE passive high (could be ignored) */
   return dat;
   }
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	08 95       	ret

00001b2c <ghw_io_init>:
   controller registers is addressed. Any target system specific
   initialization like I/O port initialization can be placed here.

*/
void ghw_io_init(void)
{
    1b2c:	df 92       	push	r13
    1b2e:	ef 92       	push	r14
    1b30:	ff 92       	push	r15
    1b32:	0f 93       	push	r16
    1b34:	1f 93       	push	r17
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
   #ifdef GHW_SINGLE_CHIP
   //sim_reset();  /* Initiate LCD bus simulation ports */
   #endif
   
     // Initialize pins for CS and DC (and RST if needed)
     TFT_PINS_INIT();
    1b3a:	0a 9a       	sbi	0x01, 2	; 1
    1b3c:	08 9a       	sbi	0x01, 0	; 1

    // Hardware Reset Sequence
	TFT_RST_LOW();
    1b3e:	77 98       	cbi	0x0e, 7	; 14
    //_delay_ms(10);
    
	TFT_RST_HIGH();
    1b40:	17 9a       	sbi	0x02, 7	; 2
    //_delay_ms(150);
	
	// Send initialization commands
	const uint8_t *addr = hx8357d_init;
    1b42:	e6 e9       	ldi	r30, 0x96	; 150
    1b44:	fb e0       	ldi	r31, 0x0B	; 11
		uint8_t cmd = *addr++;
		uint8_t numArgs = *addr & 0x7F;
		//uint8_t delayFlag = *addr++ & 0x80;
		
		spi_tft_sendCommand(cmd);
		for (uint8_t i = 0; i < numArgs; i++)
    1b46:	d1 2c       	mov	r13, r1
	TFT_RST_HIGH();
    //_delay_ms(150);
	
	// Send initialization commands
	const uint8_t *addr = hx8357d_init;
	while (*addr)
    1b48:	18 c0       	rjmp	.+48     	; 0x1b7a <ghw_io_init+0x4e>
	{
		uint8_t cmd = *addr++;
    1b4a:	8f 01       	movw	r16, r30
    1b4c:	0f 5f       	subi	r16, 0xFF	; 255
    1b4e:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t numArgs = *addr & 0x7F;
    1b50:	e1 81       	ldd	r30, Z+1	; 0x01
    1b52:	ef 77       	andi	r30, 0x7F	; 127
    1b54:	ee 2e       	mov	r14, r30
		//uint8_t delayFlag = *addr++ & 0x80;
		
		spi_tft_sendCommand(cmd);
    1b56:	46 d0       	rcall	.+140    	; 0x1be4 <spi_tft_sendCommand>
		for (uint8_t i = 0; i < numArgs; i++)
    1b58:	ee 20       	and	r14, r14
    1b5a:	71 f0       	breq	.+28     	; 0x1b78 <ghw_io_init+0x4c>
    1b5c:	e8 01       	movw	r28, r16
    1b5e:	fd 2c       	mov	r15, r13
		{
			spi_tft_sendData(*addr++);
    1b60:	89 91       	ld	r24, Y+
    1b62:	45 d0       	rcall	.+138    	; 0x1bee <spi_tft_sendData>
		uint8_t cmd = *addr++;
		uint8_t numArgs = *addr & 0x7F;
		//uint8_t delayFlag = *addr++ & 0x80;
		
		spi_tft_sendCommand(cmd);
		for (uint8_t i = 0; i < numArgs; i++)
    1b64:	f3 94       	inc	r15
    1b66:	fe 10       	cpse	r15, r14
    1b68:	fb cf       	rjmp	.-10     	; 0x1b60 <ghw_io_init+0x34>
    1b6a:	ea 94       	dec	r14
    1b6c:	ee 2d       	mov	r30, r14
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	31 96       	adiw	r30, 0x01	; 1
    1b72:	e0 0f       	add	r30, r16
    1b74:	f1 1f       	adc	r31, r17
    1b76:	01 c0       	rjmp	.+2      	; 0x1b7a <ghw_io_init+0x4e>
	
	// Send initialization commands
	const uint8_t *addr = hx8357d_init;
	while (*addr)
	{
		uint8_t cmd = *addr++;
    1b78:	f8 01       	movw	r30, r16
	TFT_RST_HIGH();
    //_delay_ms(150);
	
	// Send initialization commands
	const uint8_t *addr = hx8357d_init;
	while (*addr)
    1b7a:	80 81       	ld	r24, Z
    1b7c:	81 11       	cpse	r24, r1
    1b7e:	e5 cf       	rjmp	.-54     	; 0x1b4a <ghw_io_init+0x1e>
			//_delay_ms(5); // 5 ms * numArgs total

		}
	}
	#endif
}
    1b80:	df 91       	pop	r29
    1b82:	cf 91       	pop	r28
    1b84:	1f 91       	pop	r17
    1b86:	0f 91       	pop	r16
    1b88:	ff 90       	pop	r15
    1b8a:	ef 90       	pop	r14
    1b8c:	df 90       	pop	r13
    1b8e:	08 95       	ret

00001b90 <init_pins>:
#include "TFT_spi.h" // Includes Chip Select definitions for TFT SPI

void init_pins(void) 
{
	// Set CS pins as output
	TFT_SPI_CS_DDR |= TFT_SPI_CS_MASK; //port A DDR pin 2 set for O/P
    1b90:	0a 9a       	sbi	0x01, 2	; 1

	// Set CS pins high (inactive state)
	TFT_SPI_CS_PORT |= TFT_SPI_CS_MASK;
    1b92:	12 9a       	sbi	0x02, 2	; 2
    1b94:	08 95       	ret

00001b96 <main>:
}

int main(void)
{
	// Initialize SPI and pins
	init_pins();
    1b96:	fc df       	rcall	.-8      	; 0x1b90 <init_pins>
	init_spi_master();
    1b98:	18 d0       	rcall	.+48     	; 0x1bca <init_spi_master>
	//Init display hardware and print an error message
	//on the center of the LCD display module from manual pg 26
	
	// turn back light on
	DDRB |= (1<<PB7); //Sets PB7 as output, leaves other pins unchanged
    1b9a:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= (1<<PB7); // Sets PB7 high, leaves other pins unchanged
    1b9c:	2f 9a       	sbi	0x05, 7	; 5
		
	ghw_io_init(); // in ghwioini.c
    1b9e:	c6 df       	rcall	.-116    	; 0x1b2c <ghw_io_init>
	gputs("\nUsing SYSFONT");
    1ba0:	80 ee       	ldi	r24, 0xE0	; 224
    1ba2:	9b e0       	ldi	r25, 0x0B	; 11
    1ba4:	0e 94 0f 05 	call	0xa1e	; 0xa1e <gputs>
	gselfont(&ariel9);
    1ba8:	85 e6       	ldi	r24, 0x65	; 101
    1baa:	97 e0       	ldi	r25, 0x07	; 7
    1bac:	0e 94 e5 01 	call	0x3ca	; 0x3ca <gselfont>
	gputs("Using ariel9");
    1bb0:	8f ee       	ldi	r24, 0xEF	; 239
    1bb2:	9b e0       	ldi	r25, 0x0B	; 11
    1bb4:	0e 94 0f 05 	call	0xa1e	; 0xa1e <gputs>
	gselfont(&SYSFONT);
    1bb8:	89 e2       	ldi	r24, 0x29	; 41
    1bba:	92 e0       	ldi	r25, 0x02	; 2
    1bbc:	0e 94 e5 01 	call	0x3ca	; 0x3ca <gselfont>
	gputs("\nUsing SYSFONT");
    1bc0:	80 ee       	ldi	r24, 0xE0	; 224
    1bc2:	9b e0       	ldi	r25, 0x0B	; 11
    1bc4:	0e 94 0f 05 	call	0xa1e	; 0xa1e <gputs>
    1bc8:	ff cf       	rjmp	.-2      	; 0x1bc8 <main+0x32>

00001bca <init_spi_master>:
	}
	else
	{
		// Mode 0
		SPCR |= (0 << CPOL); //SCK is LOW when Idle
		SPCR |= (0 << CPHA); //Data sampled on leading edge
    1bca:	84 b1       	in	r24, 0x04	; 4
    1bcc:	87 60       	ori	r24, 0x07	; 7
    1bce:	84 b9       	out	0x04, r24	; 4
    1bd0:	2b 9a       	sbi	0x05, 3	; 5
    1bd2:	81 e5       	ldi	r24, 0x51	; 81
    1bd4:	8c bd       	out	0x2c, r24	; 44
    1bd6:	08 95       	ret

00001bd8 <SPI_Transfer>:
	}
}

uint8_t SPI_Transfer(uint8_t data)
{
	SPDR = data;
    1bd8:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)));
    1bda:	0d b4       	in	r0, 0x2d	; 45
    1bdc:	07 fe       	sbrs	r0, 7
    1bde:	fd cf       	rjmp	.-6      	; 0x1bda <SPI_Transfer+0x2>
	return SPDR;
    1be0:	8e b5       	in	r24, 0x2e	; 46
}
    1be2:	08 95       	ret

00001be4 <spi_tft_sendCommand>:
#include "TFT_spi.h"

// Set D/C low for command, send byte over SPI
void spi_tft_sendCommand(uint8_t cmd) 
{
	TFT_DC_LOW();       // D/C = 0 for command
    1be4:	10 98       	cbi	0x02, 0	; 2
	TFT_CS_LOW();   // Select the TFT 
    1be6:	10 98       	cbi	0x02, 0	; 2
	SPI_Transfer(cmd);  // Send byte via SPI (implement this for your MCU)
    1be8:	f7 df       	rcall	.-18     	; 0x1bd8 <SPI_Transfer>
	TFT_CS_HIGH();  // De-select TFT
    1bea:	12 9a       	sbi	0x02, 2	; 2
    1bec:	08 95       	ret

00001bee <spi_tft_sendData>:
}

// Function to perform SPI communication with the TFT display
void spi_tft_sendData(uint8_t data) 
{
	TFT_DC_HIGH();      // D/C = 1 for data
    1bee:	10 9a       	sbi	0x02, 0	; 2
	TFT_CS_LOW();   // Select the TFT
    1bf0:	10 98       	cbi	0x02, 0	; 2
	SPI_Transfer(data); // Send byte via SPI
    1bf2:	f2 df       	rcall	.-28     	; 0x1bd8 <SPI_Transfer>
	TFT_CS_HIGH();  // De-select TFT
    1bf4:	12 9a       	sbi	0x02, 2	; 2
    1bf6:	08 95       	ret

00001bf8 <__udivmodqi4>:
    1bf8:	99 1b       	sub	r25, r25
    1bfa:	79 e0       	ldi	r23, 0x09	; 9
    1bfc:	04 c0       	rjmp	.+8      	; 0x1c06 <__udivmodqi4_ep>

00001bfe <__udivmodqi4_loop>:
    1bfe:	99 1f       	adc	r25, r25
    1c00:	96 17       	cp	r25, r22
    1c02:	08 f0       	brcs	.+2      	; 0x1c06 <__udivmodqi4_ep>
    1c04:	96 1b       	sub	r25, r22

00001c06 <__udivmodqi4_ep>:
    1c06:	88 1f       	adc	r24, r24
    1c08:	7a 95       	dec	r23
    1c0a:	c9 f7       	brne	.-14     	; 0x1bfe <__udivmodqi4_loop>
    1c0c:	80 95       	com	r24
    1c0e:	08 95       	ret

00001c10 <__udivmodhi4>:
    1c10:	aa 1b       	sub	r26, r26
    1c12:	bb 1b       	sub	r27, r27
    1c14:	51 e1       	ldi	r21, 0x11	; 17
    1c16:	07 c0       	rjmp	.+14     	; 0x1c26 <__udivmodhi4_ep>

00001c18 <__udivmodhi4_loop>:
    1c18:	aa 1f       	adc	r26, r26
    1c1a:	bb 1f       	adc	r27, r27
    1c1c:	a6 17       	cp	r26, r22
    1c1e:	b7 07       	cpc	r27, r23
    1c20:	10 f0       	brcs	.+4      	; 0x1c26 <__udivmodhi4_ep>
    1c22:	a6 1b       	sub	r26, r22
    1c24:	b7 0b       	sbc	r27, r23

00001c26 <__udivmodhi4_ep>:
    1c26:	88 1f       	adc	r24, r24
    1c28:	99 1f       	adc	r25, r25
    1c2a:	5a 95       	dec	r21
    1c2c:	a9 f7       	brne	.-22     	; 0x1c18 <__udivmodhi4_loop>
    1c2e:	80 95       	com	r24
    1c30:	90 95       	com	r25
    1c32:	bc 01       	movw	r22, r24
    1c34:	cd 01       	movw	r24, r26
    1c36:	08 95       	ret

00001c38 <__divmodhi4>:
    1c38:	97 fb       	bst	r25, 7
    1c3a:	07 2e       	mov	r0, r23
    1c3c:	16 f4       	brtc	.+4      	; 0x1c42 <__divmodhi4+0xa>
    1c3e:	00 94       	com	r0
    1c40:	06 d0       	rcall	.+12     	; 0x1c4e <__divmodhi4_neg1>
    1c42:	77 fd       	sbrc	r23, 7
    1c44:	08 d0       	rcall	.+16     	; 0x1c56 <__divmodhi4_neg2>
    1c46:	e4 df       	rcall	.-56     	; 0x1c10 <__udivmodhi4>
    1c48:	07 fc       	sbrc	r0, 7
    1c4a:	05 d0       	rcall	.+10     	; 0x1c56 <__divmodhi4_neg2>
    1c4c:	3e f4       	brtc	.+14     	; 0x1c5c <__divmodhi4_exit>

00001c4e <__divmodhi4_neg1>:
    1c4e:	90 95       	com	r25
    1c50:	81 95       	neg	r24
    1c52:	9f 4f       	sbci	r25, 0xFF	; 255
    1c54:	08 95       	ret

00001c56 <__divmodhi4_neg2>:
    1c56:	70 95       	com	r23
    1c58:	61 95       	neg	r22
    1c5a:	7f 4f       	sbci	r23, 0xFF	; 255

00001c5c <__divmodhi4_exit>:
    1c5c:	08 95       	ret

00001c5e <__udivmodsi4>:
    1c5e:	a1 e2       	ldi	r26, 0x21	; 33
    1c60:	1a 2e       	mov	r1, r26
    1c62:	aa 1b       	sub	r26, r26
    1c64:	bb 1b       	sub	r27, r27
    1c66:	fd 01       	movw	r30, r26
    1c68:	0d c0       	rjmp	.+26     	; 0x1c84 <__udivmodsi4_ep>

00001c6a <__udivmodsi4_loop>:
    1c6a:	aa 1f       	adc	r26, r26
    1c6c:	bb 1f       	adc	r27, r27
    1c6e:	ee 1f       	adc	r30, r30
    1c70:	ff 1f       	adc	r31, r31
    1c72:	a2 17       	cp	r26, r18
    1c74:	b3 07       	cpc	r27, r19
    1c76:	e4 07       	cpc	r30, r20
    1c78:	f5 07       	cpc	r31, r21
    1c7a:	20 f0       	brcs	.+8      	; 0x1c84 <__udivmodsi4_ep>
    1c7c:	a2 1b       	sub	r26, r18
    1c7e:	b3 0b       	sbc	r27, r19
    1c80:	e4 0b       	sbc	r30, r20
    1c82:	f5 0b       	sbc	r31, r21

00001c84 <__udivmodsi4_ep>:
    1c84:	66 1f       	adc	r22, r22
    1c86:	77 1f       	adc	r23, r23
    1c88:	88 1f       	adc	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	1a 94       	dec	r1
    1c8e:	69 f7       	brne	.-38     	; 0x1c6a <__udivmodsi4_loop>
    1c90:	60 95       	com	r22
    1c92:	70 95       	com	r23
    1c94:	80 95       	com	r24
    1c96:	90 95       	com	r25
    1c98:	9b 01       	movw	r18, r22
    1c9a:	ac 01       	movw	r20, r24
    1c9c:	bd 01       	movw	r22, r26
    1c9e:	cf 01       	movw	r24, r30
    1ca0:	08 95       	ret

00001ca2 <__umulhisi3>:
    1ca2:	a2 9f       	mul	r26, r18
    1ca4:	b0 01       	movw	r22, r0
    1ca6:	b3 9f       	mul	r27, r19
    1ca8:	c0 01       	movw	r24, r0
    1caa:	a3 9f       	mul	r26, r19
    1cac:	70 0d       	add	r23, r0
    1cae:	81 1d       	adc	r24, r1
    1cb0:	11 24       	eor	r1, r1
    1cb2:	91 1d       	adc	r25, r1
    1cb4:	b2 9f       	mul	r27, r18
    1cb6:	70 0d       	add	r23, r0
    1cb8:	81 1d       	adc	r24, r1
    1cba:	11 24       	eor	r1, r1
    1cbc:	91 1d       	adc	r25, r1
    1cbe:	08 95       	ret

00001cc0 <__muluhisi3>:
    1cc0:	f0 df       	rcall	.-32     	; 0x1ca2 <__umulhisi3>
    1cc2:	a5 9f       	mul	r26, r21
    1cc4:	90 0d       	add	r25, r0
    1cc6:	b4 9f       	mul	r27, r20
    1cc8:	90 0d       	add	r25, r0
    1cca:	a4 9f       	mul	r26, r20
    1ccc:	80 0d       	add	r24, r0
    1cce:	91 1d       	adc	r25, r1
    1cd0:	11 24       	eor	r1, r1
    1cd2:	08 95       	ret

00001cd4 <_exit>:
    1cd4:	f8 94       	cli

00001cd6 <__stop_program>:
    1cd6:	ff cf       	rjmp	.-2      	; 0x1cd6 <__stop_program>
